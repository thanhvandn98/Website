var search_data = {"index":{"searchIndex":["argf","argumenterror","array","basicobject","binding","class","closedqueueerror","comparable","complex","conditionvariable","continuation","data","dir","env","eoferror","encoding","compatibilityerror","converter","converternotfounderror","invalidbytesequenceerror","undefinedconversionerror","encodingerror","enumerable","enumerator","arithmeticsequence","chain","generator","lazy","producer","yielder","errno","exception","falseclass","fiber","fibererror","file","file::constants","stat","filetest","float","floatdomainerror","frozenerror","gc","profiler","hash","io","eagainwaitreadable","eagainwaitwritable","einprogresswaitreadable","einprogresswaitwritable","ewouldblockwaitreadable","ewouldblockwaitwritable","waitreadable","waitwritable","ioerror","indexerror","integer","interrupt","kernel","keyerror","loaderror","localjumperror","marshal","matchdata","math","domainerror","method","module","mutex","nameerror","nilclass","nomatchingpatternerror","nomemoryerror","nomethoderror","notimplementederror","numeric","object","objectspace","weakmap","pool","proc","process","gid","status","sys","uid","queue","random","formatter","range","rangeerror","rational","regexp","regexperror","ripper","rubyvm","abstractsyntaxtree","node","instructionsequence","mjit","runtimeerror","scripterror","securityerror","signal","signalexception","sizedqueue","standarderror","stopiteration","string","struct","symbol","syntaxerror","systemcallerror","systemexit","systemstackerror","thread","location","threaderror","threadgroup","time","tracepoint","trueclass","typeerror","unboundmethod","uncaughtthrowerror","unicodenormalize","warning","zerodivisionerror","fatal","unknown","!()","!=()","!~~()","=~()","=~()","=~()","=~()",">()",">()",">()",">()",">()",">=()",">=()",">=()",">=()",">=()",">>()",">>()",">>()",">>()","array()","complex()","debug()","debug=()","float()","hash()","integer()","rational()","string()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","^()","^()","^()","^()","__callee__()","__dir__()","__id__()","__method__()","__send__()","_enumerable_collect()","_enumerable_collect_concat()","_enumerable_drop()","_enumerable_drop_while()","_enumerable_filter()","_enumerable_filter_map()","_enumerable_find_all()","_enumerable_flat_map()","_enumerable_grep()","_enumerable_grep_v()","_enumerable_map()","_enumerable_reject()","_enumerable_select()","_enumerable_take()","_enumerable_take_while()","_enumerable_uniq()","_enumerable_with_index()","_enumerable_zip()","_id2ref()","`()","abort()","abort()","abort_on_exception()","abort_on_exception()","abort_on_exception=()","abort_on_exception=()","abs()","abs()","abs()","abs()","abs()","abs2()","abs2()","absolute_path()","absolute_path()","absolute_path()","absolute_path?()","acos()","acosh()","add()","add_stress_to_class()","add_trace_func()","advise()","alias_method()","aliases()","alive?()","alive?()","all?()","all?()","all_symbols()","allbits?()","allocate()","ancestors()","angle()","angle()","angle()","any?()","any?()","any?()","anybits?()","append()","append_features()","arg()","arg()","arg()","args()","argv()","argv0()","arity()","arity()","arity()","ascii_compatible?()","ascii_only?()","asciicompat_encoding()","asctime()","asin()","asinh()","assoc()","assoc()","assoc()","at()","at()","at_exit()","atan()","atan2()","atanh()","atime()","atime()","atime()","attr()","attr_accessor()","attr_reader()","attr_writer()","autoclose=()","autoclose?()","autoload()","autoload()","autoload?()","autoload?()","b()","backtrace()","backtrace()","backtrace_locations()","backtrace_locations()","base_label()","base_label()","basename()","begin()","begin()","begin()","between?()","bind()","bind_call()","binding()","binding()","binding()","binmode()","binmode()","binmode?()","binmode?()","binread()","binwrite()","birthtime()","birthtime()","birthtime()","bit_length()","blksize()","block_given?()","blockdev?()","blockdev?()","blockdev?()","blocks()","broadcast()","bsearch()","bsearch()","bsearch_index()","bytes()","bytes()","bytes()","bytes()","bytes()","bytesize()","byteslice()","call()","call()","call()","call()","callable_methods()","callcc()","callee_id()","caller()","caller_locations()","capitalize()","capitalize()","capitalize!()","captures()","casecmp()","casecmp()","casecmp?()","casecmp?()","casefold?()","catch()","cause()","cbrt()","ceil()","ceil()","ceil()","ceil()","ceil()","center()","chain()","change_privilege()","change_privilege()","chardev?()","chardev?()","chardev?()","chars()","chars()","chars()","chdir()","children()","children()","children()","chmod()","chmod()","chomp()","chomp()","chomp!()","chop()","chop()","chop!()","chown()","chown()","chr()","chr()","chroot()","chunk()","chunk()","chunk_while()","chunk_while()","clamp()","class()","class_eval()","class_exec()","class_variable_defined?()","class_variable_get()","class_variable_set()","class_variables()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clock_getres()","clock_gettime()","clone()","clone()","clone()","clone()","close()","close()","close()","close()","close()","close_on_exec=()","close_on_exec?()","close_read()","close_write()","closed?()","closed?()","closed?()","codepoints()","codepoints()","codepoints()","coerce()","coerce()","coerce()","collect()","collect()","collect()","collect!()","collect_concat()","collect_concat()","column()","combination()","compact()","compact()","compact()","compact!()","compact!()","compare_by_identity()","compare_by_identity?()","compatible?()","compile()","compile()","compile_file()","compile_option()","compile_option=()","concat()","concat()","conj()","conj()","conjugate()","conjugate()","const_defined?()","const_get()","const_missing()","const_missing()","const_set()","const_source_location()","constants()","constants()","convert()","convpath()","copy_stream()","coredump?()","cos()","cosh()","count()","count()","count()","count()","count()","count_objects()","cover?()","crypt()","ctime()","ctime()","ctime()","ctime()","current()","current()","curry()","curry()","cycle()","cycle()","daemon()","day()","debug_output()","debug_output=()","deconstruct()","deconstruct()","deconstruct_keys()","deconstruct_keys()","dedent_string()","dedent_string()","default()","default=()","default_external()","default_external=()","default_internal()","default_internal=()","default_proc()","default_proc=()","define_finalizer()","define_method()","define_singleton_method()","defined_class()","delete()","delete()","delete()","delete()","delete()","delete()","delete!()","delete_at()","delete_if()","delete_if()","delete_if()","delete_prefix()","delete_prefix!()","delete_suffix()","delete_suffix!()","denominator()","denominator()","denominator()","denominator()","denominator()","deprecate_constant()","deq()","deq()","destination_encoding()","destination_encoding()","destination_encoding()","destination_encoding_name()","destination_encoding_name()","detach()","detect()","dev()","dev_major()","dev_minor()","difference()","dig()","dig()","dig()","digits()","directory?()","directory?()","directory?()","dirname()","disable()","disable()","disable()","disasm()","disasm()","disassemble()","disassemble()","display()","div()","div()","divmod()","divmod()","divmod()","do_until()","do_while()","downcase()","downcase()","downcase!()","downto()","drop()","drop()","drop()","drop_while()","drop_while()","drop_while()","dst?()","dummy?()","dump()","dump()","dup()","dup()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each_builtin()","each_byte()","each_byte()","each_byte()","each_char()","each_char()","each_char()","each_child()","each_child()","each_child()","each_codepoint()","each_codepoint()","each_codepoint()","each_cons()","each_entry()","each_grapheme_cluster()","each_index()","each_key()","each_key()","each_key()","each_line()","each_line()","each_line()","each_object()","each_pair()","each_pair()","each_pair()","each_pair()","each_slice()","each_value()","each_value()","each_value()","each_with_index()","each_with_index()","each_with_object()","each_with_object()","eager()","egid()","egid=()","eid()","eid()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","enable()","enable()","enable()","enabled?()","enabled?()","enabled?()","enclose()","enclosed?()","encode()","encode!()","encoding()","encoding()","encoding()","encoding()","end()","end()","end()","end_seen?()","end_with?()","end_with?()","enq()","enq()","entries()","entries()","entries()","enum_for()","enum_for()","eof()","eof()","eof?()","eof?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","equal?()","erf()","erfc()","errno()","error?()","error_bytes()","error_char()","escape()","euid()","euid=()","eval()","eval()","eval()","eval_script()","even?()","event()","exception()","exception()","exclude_end?()","exclude_end?()","exclusive()","exec()","exec()","executable?()","executable?()","executable?()","executable_real?()","executable_real?()","executable_real?()","exist?()","exist?()","exist?()","exists?()","exists?()","exists?()","exit()","exit()","exit()","exit()","exit!()","exit!()","exit_value()","exited?()","exitstatus()","exp()","expand_path()","extend()","extend_object()","extended()","external_encoding()","external_encoding()","extname()","f()","fail()","fcntl()","fdatasync()","fdiv()","fdiv()","fdiv()","fdiv()","fdiv()","feed()","fetch()","fetch()","fetch()","fetch()","fetch_values()","file()","file?()","file?()","file?()","filename()","filename()","fileno()","fileno()","fileno()","fill()","filter()","filter()","filter()","filter()","filter()","filter()","filter!()","filter!()","filter!()","filter_map()","filter_map()","find()","find()","find_all()","find_all()","find_index()","find_index()","finish()","finite?()","finite?()","finite?()","first()","first()","first()","first()","first_column()","first_lineno()","first_lineno()","fixed_encoding?()","flat_map()","flat_map()","flatten()","flatten()","flatten!()","flock()","floor()","floor()","floor()","floor()","floor()","flush()","fnmatch()","fnmatch?()","for_fd()","force()","force_encoding()","foreach()","foreach()","fork()","fork()","fork()","format()","freeze()","freeze()","freeze()","freeze()","frexp()","friday?()","from_name()","from_name()","frozen?()","fsync()","ftype()","ftype()","full_message()","gamma()","garbage_collect()","garbage_collect()","garbage_collect()","gcd()","gcdlcm()","getbyte()","getbyte()","getbyte()","getc()","getc()","getegid()","geteuid()","getgid()","getgm()","getlocal()","getpgid()","getpgrp()","getpriority()","getrlimit()","gets()","gets()","gets()","getsid()","getuid()","getutc()","getwd()","gid()","gid()","gid=()","glob()","global_variables()","gm()","gmt?()","gmt_offset()","gmtime()","gmtoff()","grant_privilege()","grant_privilege()","grapheme_clusters()","grep()","grep()","grep_v()","grep_v()","group()","group_by()","groups()","groups=()","grpowned?()","grpowned?()","grpowned?()","gsub()","gsub()","gsub!()","h()","handle_interrupt()","has_key?()","has_key?()","has_value?()","has_value?()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hex()","home()","hour()","hypot()","i()","id2name()","identical?()","identical?()","imag()","imag()","imaginary()","imaginary()","include()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","included()","included_modules()","incomplete_input?()","index()","index()","index()","infinite?()","infinite?()","infinite?()","inherited()","initgroups()","initialize_copy()","initialize_copy()","initialize_copy()","inject()","ino()","inplace_mode()","inplace_mode=()","insert()","insert()","insert_output()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","instance_eval()","instance_exec()","instance_method()","instance_methods()","instance_of?()","instance_variable_defined?()","instance_variable_get()","instance_variable_set()","instance_variables()","instruction_sequence()","integer?()","integer?()","intern()","intern()","internal_encoding()","internal_encoding()","intersection()","invert()","invert()","ioctl()","is_a?()","isatty()","isdst()","issetugid()","iterator?()","itself()","join()","join()","join()","keep_if()","keep_if()","keep_if()","key()","key()","key()","key?()","key?()","key?()","key?()","keys()","keys()","keys()","keys()","kill()","kill()","kill()","kind_of?()","label()","label()","lambda()","lambda?()","last()","last()","last()","last_column()","last_error()","last_lineno()","last_match()","last_status()","latest_gc_info()","lazy()","lazy()","lchmod()","lchown()","lcm()","ldexp()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","lex_state_name()","lgamma()","lineno()","lineno()","lineno()","lineno()","lineno()","lineno=()","lineno=()","lines()","lines()","lines()","link()","list()","list()","list()","list()","ljust()","load()","load()","load_from_binary()","load_from_binary_extra_data()","local()","local_variable_defined?()","local_variable_get()","local_variable_set()","local_variables()","local_variables()","local_variables()","locale_charmap()","localtime()","lock()","locked?()","log()","log10()","log2()","loop()","lstat()","lstat()","lstrip()","lstrip!()","lutime()","magnitude()","magnitude()","magnitude()","magnitude()","magnitude()","main()","malloc_allocated_size()","malloc_allocations()","map()","map()","map()","map!()","match()","match()","match()","match?()","match?()","match?()","matching_methods()","max()","max()","max()","max()","max=()","max_by()","maxgroups()","maxgroups=()","mday()","member?()","member?()","member?()","member?()","member?()","members()","merge()","merge!()","merge!()","message()","method()","method_added()","method_defined?()","method_id()","method_missing()","method_missing()","method_removed()","method_undefined()","methods()","min()","min()","min()","min()","min_by()","minmax()","minmax()","minmax()","minmax_by()","mkdir()","mkfifo()","mktime()","mode()","module_eval()","module_exec()","module_function()","modulo()","modulo()","modulo()","mon()","monday?()","month()","mtime()","mtime()","mtime()","name()","name()","name()","name()","name()","name()","name=()","name_list()","named_captures()","named_captures()","names()","names()","names()","nan?()","negative?()","negative?()","negative?()","nesting()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_seed()","next()","next()","next()","next()","next!()","next_float()","next_values()","nil?()","nil?()","nlink()","nobits?()","none?()","none?()","nonzero?()","now()","nsec()","num_waiting()","num_waiting()","numerator()","numerator()","numerator()","numerator()","numerator()","object_id()","oct()","odd?()","of()","of()","offset()","old_inspect()","old_to_s()","old_to_s()","one?()","one?()","open()","open()","open()","open()","options()","ord()","ord()","original_name()","original_name()","owned?()","owned?()","owned?()","owned?()","owner()","owner()","p()","pack()","parameters()","parameters()","parameters()","parameters()","parse()","parse()","parse_file()","partition()","partition()","pass()","path()","path()","path()","path()","path()","path()","path()","pause()","peek()","peek_values()","pending_interrupt?()","pending_interrupt?()","permutation()","phase()","phase()","phase()","pid()","pid()","pid()","pipe()","pipe?()","pipe?()","pipe?()","polar()","polar()","polar()","pop()","pop()","pop()","popen()","pos()","pos()","pos()","pos=()","pos=()","pos=()","positive?()","positive?()","positive?()","post_match()","pow()","pp()","ppid()","pre_match()","pread()","pred()","prepend()","prepend()","prepend()","prepend_features()","prepended()","prev_float()","primitive_convert()","primitive_errinfo()","print()","print()","print()","printf()","printf()","printf()","priority()","priority=()","private()","private_call?()","private_class_method()","private_constant()","private_instance_methods()","private_method_defined?()","private_methods()","proc()","produce()","product()","protected()","protected_instance_methods()","protected_method_defined?()","protected_methods()","public()","public_class_method()","public_constant()","public_instance_method()","public_instance_methods()","public_method()","public_method_defined?()","public_methods()","public_send()","push()","push()","push()","putback()","putc()","putc()","putc()","puts()","puts()","puts()","pwd()","pwrite()","quo()","quo()","quo()","quo()","quote()","raise()","raise()","raise()","raised_exception()","rand()","rand()","rand()","rand()","random_number()","rassoc()","rassoc()","rassoc()","rationalize()","rationalize()","rationalize()","rationalize()","rationalize()","raw_data()","rdev()","rdev_major()","rdev_minor()","re_exchange()","re_exchange()","re_exchangeable?()","re_exchangeable?()","read()","read()","read()","read()","read_nonblock()","read_nonblock()","readable?()","readable?()","readable?()","readable_real?()","readable_real?()","readable_real?()","readagain_bytes()","readbyte()","readbyte()","readchar()","readchar()","readline()","readline()","readline()","readlines()","readlines()","readlines()","readlines()","readlink()","readpartial()","readpartial()","real()","real()","real?()","real?()","realdirpath()","realpath()","reason()","receiver()","receiver()","receiver()","receiver()","receiver()","rect()","rect()","rect()","rectangular()","rectangular()","rectangular()","reduce()","refine()","regexp()","rehash()","rehash()","reject()","reject()","reject()","reject()","reject()","reject!()","reject!()","reject!()","remainder()","remainder()","remove_class_variable()","remove_const()","remove_instance_variable()","remove_method()","remove_stress_to_class()","rename()","reopen()","repeated_combination()","repeated_permutation()","replace()","replace()","replace()","replace()","replacement()","replacement=()","replicate()","report()","report_on_exception()","report_on_exception()","report_on_exception=()","report_on_exception=()","require()","require_relative()","respond_to?()","respond_to_missing?()","restore()","result()","result()","resume()","resume()","return_value()","reverse()","reverse()","reverse!()","reverse!()","reverse_each()","reverse_each()","rewind()","rewind()","rewind()","rewind()","rewind()","rid()","rid()","rindex()","rindex()","rjust()","rmdir()","rotate()","rotate!()","round()","round()","round()","round()","round()","rpartition()","rstrip()","rstrip!()","ruby2_keywords()","ruby2_keywords()","ruby2_keywords_hash()","ruby2_keywords_hash?()","run()","safe_level()","sample()","saturday?()","scan()","scrub()","scrub!()","search_convpath()","sec()","seed()","seek()","seek()","seek()","select()","select()","select()","select()","select()","select()","select()","select()","select!()","select!()","select!()","self()","send()","set_backtrace()","set_encoding()","set_encoding()","set_encoding_by_bom()","set_trace_func()","set_trace_func()","setbyte()","setegid()","seteuid()","setgid()","setgid?()","setgid?()","setgid?()","setpgid()","setpgrp()","setpriority()","setproctitle()","setregid()","setresgid()","setresuid()","setreuid()","setrgid()","setrlimit()","setruid()","setsid()","setuid()","setuid?()","setuid?()","setuid?()","shift()","shift()","shift()","shift()","shift()","shortest_abbreviation()","shuffle()","shuffle!()","sid_available?()","sid_available?()","signal()","signaled?()","signame()","signo()","sin()","singleton_class()","singleton_class?()","singleton_method()","singleton_method_added()","singleton_method_removed()","singleton_method_undefined()","singleton_methods()","sinh()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size?()","size?()","size?()","skip()","sleep()","sleep()","slice()","slice()","slice()","slice()","slice()","slice!()","slice!()","slice_after()","slice_after()","slice_before()","slice_before()","slice_when()","slice_when()","socket?()","socket?()","socket?()","sort()","sort()","sort!()","sort_by()","sort_by!()","source()","source_encoding()","source_encoding()","source_encoding()","source_encoding_name()","source_encoding_name()","source_location()","source_location()","source_location()","source_location()","spawn()","spawn()","split()","split()","sprintf()","sqrt()","sqrt()","squeeze()","squeeze!()","srand()","srand()","start()","start()","start_with?()","start_with?()","stat()","stat()","stat()","stat()","stat()","state()","status()","status()","step()","step()","step()","sticky?()","sticky?()","sticky?()","stop()","stop?()","stopped?()","stopsig()","store()","store()","stress()","stress=()","strftime()","string()","strip()","strip!()","sub()","sub()","sub!()","subsec()","succ()","succ()","succ()","succ()","succ!()","success?()","success?()","sum()","sum()","sum()","sunday?()","super_method()","super_method()","superclass()","swapcase()","swapcase()","swapcase!()","switch()","switch()","symlink()","symlink?()","symlink?()","symlink?()","sync()","sync=()","synchronize()","syscall()","sysopen()","sysread()","sysseek()","system()","syswrite()","tag()","taint()","tainted?()","take()","take()","take()","take_while()","take_while()","take_while()","tally()","tan()","tanh()","tap()","tell()","tell()","tell()","terminate()","termsig()","test()","then()","thread_variable?()","thread_variable_get()","thread_variable_set()","thread_variables()","throw()","thursday?()","times()","times()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_ary()","to_binary()","to_c()","to_c()","to_c()","to_c()","to_enum()","to_enum()","to_f()","to_f()","to_f()","to_f()","to_f()","to_f()","to_f()","to_h()","to_h()","to_h()","to_h()","to_h()","to_h()","to_hash()","to_hash()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_int()","to_int()","to_int()","to_io()","to_io()","to_path()","to_path()","to_proc()","to_proc()","to_proc()","to_proc()","to_proc()","to_r()","to_r()","to_r()","to_r()","to_r()","to_r()","to_r()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_str()","to_sym()","to_sym()","to_tty?()","to_write_io()","token()","total_time()","tr()","tr!()","tr_s()","tr_s!()","trace()","trace_points()","trace_var()","transfer()","transform_keys()","transform_keys!()","transform_values()","transform_values!()","transpose()","trap()","trap()","truncate()","truncate()","truncate()","truncate()","truncate()","truncate()","trust()","try_convert()","try_convert()","try_convert()","try_convert()","try_convert()","try_lock()","tty?()","tuesday?()","tv_nsec()","tv_sec()","tv_usec()","type()","uid()","uid()","uid=()","umask()","unbind()","undef_method()","undefine_finalizer()","undump()","ungetbyte()","ungetc()","unicode_normalize()","unicode_normalize!()","unicode_normalized?()","union()","union()","uniq()","uniq()","uniq()","uniq!()","unlink()","unlink()","unlock()","unpack()","unpack1()","unshift()","untaint()","untrace_var()","untrust()","untrusted?()","upcase()","upcase()","upcase!()","update()","update()","upto()","upto()","urandom()","usec()","used_modules()","using()","utc()","utc()","utc?()","utc_offset()","utime()","valid_encoding?()","value()","value()","value?()","value?()","values()","values()","values()","values()","values_at()","values_at()","values_at()","values_at()","values_at()","verify_compaction_references()","verify_internal_consistency()","verify_transient_heap_internal_consistency()","wait()","wait()","wait2()","waitall()","waitpid()","waitpid2()","wakeup()","warn()","warn()","wday()","wednesday?()","with_index()","with_index()","with_object()","world_readable?()","world_readable?()","world_readable?()","world_writable?()","world_writable?()","world_writable?()","writable?()","writable?()","writable?()","writable_real?()","writable_real?()","writable_real?()","write()","write()","write()","write_nonblock()","yday()","year()","yield()","yield()","yield_self()","yydebug()","yydebug=()","zero?()","zero?()","zero?()","zero?()","zero?()","zip()","zip()","zip()","zone()","|()","|()","|()","|()","|()","~()","~()","grammar.en","test.ja","contributing","copying.ja","readme.ext","readme.ext.ja","readme.ja","readme","configure.ac","bug_triaging","contributing","contributors","dtrace_probes","extension.ja","extension","globals","keywords","maintainers","marshal","regexp","security","signals","standard_library","syntax","assignment","calling_methods","comments","control_expressions","exceptions","literals","methods","miscellaneous","modules_and_classes","precedence","refinements","lex.c.blt","readme.ja","readme"],"longSearchIndex":["argf","argumenterror","array","basicobject","binding","class","closedqueueerror","comparable","complex","conditionvariable","continuation","data","dir","env","eoferror","encoding","encoding::compatibilityerror","encoding::converter","encoding::converternotfounderror","encoding::invalidbytesequenceerror","encoding::undefinedconversionerror","encodingerror","enumerable","enumerator","enumerator::arithmeticsequence","enumerator::chain","enumerator::generator","enumerator::lazy","enumerator::producer","enumerator::yielder","errno","exception","falseclass","fiber","fibererror","file","file::constants","file::stat","filetest","float","floatdomainerror","frozenerror","gc","gc::profiler","hash","io","io::eagainwaitreadable","io::eagainwaitwritable","io::einprogresswaitreadable","io::einprogresswaitwritable","io::ewouldblockwaitreadable","io::ewouldblockwaitwritable","io::waitreadable","io::waitwritable","ioerror","indexerror","integer","interrupt","kernel","keyerror","loaderror","localjumperror","marshal","matchdata","math","math::domainerror","method","module","mutex","nameerror","nilclass","nomatchingpatternerror","nomemoryerror","nomethoderror","notimplementederror","numeric","object","objectspace","objectspace::weakmap","pool","proc","process","process::gid","process::status","process::sys","process::uid","queue","random","random::formatter","range","rangeerror","rational","regexp","regexperror","ripper","rubyvm","rubyvm::abstractsyntaxtree","rubyvm::abstractsyntaxtree::node","rubyvm::instructionsequence","rubyvm::mjit","runtimeerror","scripterror","securityerror","signal","signalexception","sizedqueue","standarderror","stopiteration","string","struct","symbol","syntaxerror","systemcallerror","systemexit","systemstackerror","thread","thread::backtrace::location","threaderror","threadgroup","time","tracepoint","trueclass","typeerror","unboundmethod","uncaughtthrowerror","unicodenormalize","warning","zerodivisionerror","fatal","unknown","basicobject#!()","basicobject#!=()","object#!~()","float#%()","integer#%()","numeric#%()","range#%()","string#%()","array#&()","falseclass#&()","integer#&()","nilclass#&()","process::status#&()","trueclass#&()","array#*()","complex#*()","float#*()","integer#*()","rational#*()","string#*()","complex#**()","float#**()","integer#**()","rational#**()","array#+()","complex#+()","enumerator#+()","float#+()","integer#+()","rational#+()","string#+()","time#+()","numeric#+@()","string#+@()","array#-()","complex#-()","float#-()","integer#-()","rational#-()","time#-()","complex#-@()","float#-@()","integer#-@()","numeric#-@()","rational#-@()","string#-@()","complex#/()","float#/()","integer#/()","rational#/()","string#/()","comparable#<()","float#<()","hash#<()","integer#<()","module#<()","array#<<()","io#<<()","integer#<<()","method#<<()","proc#<<()","queue#<<()","sizedqueue#<<()","string#<<()","comparable#<=()","float#<=()","hash#<=()","integer#<=()","module#<=()","array#<=>()","complex#<=>()","file::stat#<=>()","float#<=>()","integer#<=>()","module#<=>()","numeric#<=>()","object#<=>()","rational#<=>()","string#<=>()","symbol#<=>()","time#<=>()","array#==()","basicobject#==()","comparable#==()","complex#==()","encoding::converter#==()","enumerator::arithmeticsequence#==()","exception#==()","float#==()","hash#==()","integer#==()","matchdata#==()","method#==()","module#==()","process::status#==()","random#==()","range#==()","rational#==()","regexp#==()","string#==()","struct#==()","symbol#==()","unboundmethod#==()","enumerator::arithmeticsequence#===()","falseclass#===()","float#===()","integer#===()","method#===()","module#===()","nilclass#===()","object#===()","proc#===()","range#===()","regexp#===()","string#===()","symbol#===()","systemcallerror::===()","trueclass#===()","nilclass#=~()","object#=~()","regexp#=~()","string#=~()","symbol#=~()","comparable#>()","float#>()","hash#>()","integer#>()","module#>()","comparable#>=()","float#>=()","hash#>=()","integer#>=()","module#>=()","integer#>>()","method#>>()","proc#>>()","process::status#>>()","kernel#array()","kernel#complex()","thread::debug()","thread::debug=()","kernel#float()","kernel#hash()","kernel#integer()","kernel#rational()","kernel#string()","array::[]()","array#[]()","continuation#[]()","dir::[]()","env::[]()","hash::[]()","hash#[]()","integer#[]()","matchdata#[]()","method#[]()","objectspace::weakmap#[]()","proc#[]()","string#[]()","struct#[]()","symbol#[]()","thread#[]()","warning::[]()","array#[]=()","env::[]=()","hash#[]=()","objectspace::weakmap#[]=()","string#[]=()","struct#[]=()","thread#[]=()","warning::[]=()","falseclass#^()","integer#^()","nilclass#^()","trueclass#^()","kernel#__callee__()","kernel#__dir__()","basicobject#__id__()","kernel#__method__()","basicobject#__send__()","enumerator::lazy#_enumerable_collect()","enumerator::lazy#_enumerable_collect_concat()","enumerator::lazy#_enumerable_drop()","enumerator::lazy#_enumerable_drop_while()","enumerator::lazy#_enumerable_filter()","enumerator::lazy#_enumerable_filter_map()","enumerator::lazy#_enumerable_find_all()","enumerator::lazy#_enumerable_flat_map()","enumerator::lazy#_enumerable_grep()","enumerator::lazy#_enumerable_grep_v()","enumerator::lazy#_enumerable_map()","enumerator::lazy#_enumerable_reject()","enumerator::lazy#_enumerable_select()","enumerator::lazy#_enumerable_take()","enumerator::lazy#_enumerable_take_while()","enumerator::lazy#_enumerable_uniq()","enumerator::lazy#_enumerable_with_index()","enumerator::lazy#_enumerable_zip()","objectspace::_id2ref()","kernel#`()","kernel#abort()","process::abort()","thread::abort_on_exception()","thread#abort_on_exception()","thread::abort_on_exception=()","thread#abort_on_exception=()","complex#abs()","float#abs()","integer#abs()","numeric#abs()","rational#abs()","complex#abs2()","numeric#abs2()","file::absolute_path()","rubyvm::instructionsequence#absolute_path()","thread::backtrace::location#absolute_path()","file::absolute_path?()","math::acos()","math::acosh()","threadgroup#add()","gc::add_stress_to_class()","thread#add_trace_func()","io#advise()","module#alias_method()","encoding::aliases()","fiber#alive?()","thread#alive?()","array#all?()","enumerable#all?()","symbol::all_symbols()","integer#allbits?()","class#allocate()","module#ancestors()","complex#angle()","float#angle()","numeric#angle()","array#any?()","enumerable#any?()","hash#any?()","integer#anybits?()","array#append()","module#append_features()","complex#arg()","float#arg()","numeric#arg()","nomethoderror#args()","argf#argv()","process::argv0()","method#arity()","proc#arity()","unboundmethod#arity()","encoding#ascii_compatible?()","string#ascii_only?()","encoding::converter::asciicompat_encoding()","time#asctime()","math::asin()","math::asinh()","array#assoc()","env::assoc()","hash#assoc()","array#at()","time::at()","kernel#at_exit()","math::atan()","math::atan2()","math::atanh()","file::atime()","file#atime()","file::stat#atime()","module#attr()","module#attr_accessor()","module#attr_reader()","module#attr_writer()","io#autoclose=()","io#autoclose?()","kernel#autoload()","module#autoload()","kernel#autoload?()","module#autoload?()","string#b()","exception#backtrace()","thread#backtrace()","exception#backtrace_locations()","thread#backtrace_locations()","rubyvm::instructionsequence#base_label()","thread::backtrace::location#base_label()","file::basename()","enumerator::arithmeticsequence#begin()","matchdata#begin()","range#begin()","comparable#between?()","unboundmethod#bind()","unboundmethod#bind_call()","kernel#binding()","proc#binding()","tracepoint#binding()","argf#binmode()","io#binmode()","argf#binmode?()","io#binmode?()","io::binread()","io::binwrite()","file::birthtime()","file#birthtime()","file::stat#birthtime()","integer#bit_length()","file::stat#blksize()","kernel#block_given?()","file::blockdev?()","file::stat#blockdev?()","filetest#blockdev?()","file::stat#blocks()","conditionvariable#broadcast()","array#bsearch()","range#bsearch()","array#bsearch_index()","argf#bytes()","io#bytes()","random#bytes()","random::bytes()","string#bytes()","string#bytesize()","string#byteslice()","continuation#call()","method#call()","proc#call()","symbol#call()","object#callable_methods()","kernel#callcc()","tracepoint#callee_id()","kernel#caller()","kernel#caller_locations()","string#capitalize()","symbol#capitalize()","string#capitalize!()","matchdata#captures()","string#casecmp()","symbol#casecmp()","string#casecmp?()","symbol#casecmp?()","regexp#casefold?()","kernel#catch()","exception#cause()","math::cbrt()","float#ceil()","integer#ceil()","numeric#ceil()","rational#ceil()","time#ceil()","string#center()","enumerable#chain()","process::gid::change_privilege()","process::uid::change_privilege()","file::chardev?()","file::stat#chardev?()","filetest#chardev?()","argf#chars()","io#chars()","string#chars()","dir::chdir()","dir::children()","dir#children()","rubyvm::abstractsyntaxtree::node#children()","file::chmod()","file#chmod()","kernel#chomp()","string#chomp()","string#chomp!()","kernel#chop()","string#chop()","string#chop!()","file::chown()","file#chown()","integer#chr()","string#chr()","dir::chroot()","enumerable#chunk()","enumerator::lazy#chunk()","enumerable#chunk_while()","enumerator::lazy#chunk_while()","comparable#clamp()","object#class()","module#class_eval()","module#class_exec()","module#class_variable_defined?()","module#class_variable_get()","module#class_variable_set()","module#class_variables()","array#clear()","env::clear()","gc::profiler::clear()","hash#clear()","queue#clear()","sizedqueue#clear()","string#clear()","process::clock_getres()","process::clock_gettime()","method#clone()","numeric#clone()","object#clone()","unboundmethod#clone()","argf#close()","dir#close()","io#close()","queue#close()","sizedqueue#close()","io#close_on_exec=()","io#close_on_exec?()","io#close_read()","io#close_write()","argf#closed?()","io#closed?()","queue#closed?()","argf#codepoints()","io#codepoints()","string#codepoints()","float#coerce()","integer#coerce()","numeric#coerce()","array#collect()","enumerable#collect()","enumerator::lazy#collect()","array#collect!()","enumerable#collect_concat()","enumerator::lazy#collect_concat()","ripper#column()","array#combination()","array#compact()","gc::compact()","hash#compact()","array#compact!()","hash#compact!()","hash#compare_by_identity()","hash#compare_by_identity?()","encoding::compatible?()","regexp::compile()","rubyvm::instructionsequence::compile()","rubyvm::instructionsequence::compile_file()","rubyvm::instructionsequence::compile_option()","rubyvm::instructionsequence::compile_option=()","array#concat()","string#concat()","complex#conj()","numeric#conj()","complex#conjugate()","numeric#conjugate()","module#const_defined?()","module#const_get()","module#const_missing()","object::const_missing()","module#const_set()","module#const_source_location()","module::constants()","module#constants()","encoding::converter#convert()","encoding::converter#convpath()","io::copy_stream()","process::status#coredump?()","math::cos()","math::cosh()","array#count()","enumerable#count()","gc::count()","range#count()","string#count()","objectspace::count_objects()","range#cover?()","string#crypt()","file::ctime()","file#ctime()","file::stat#ctime()","time#ctime()","fiber::current()","thread::current()","method#curry()","proc#curry()","array#cycle()","enumerable#cycle()","process::daemon()","time#day()","ripper#debug_output()","ripper#debug_output=()","array#deconstruct()","struct#deconstruct()","hash#deconstruct_keys()","struct#deconstruct_keys()","ripper::dedent_string()","ripper#dedent_string()","hash#default()","hash#default=()","encoding::default_external()","encoding::default_external=()","encoding::default_internal()","encoding::default_internal=()","hash#default_proc()","hash#default_proc=()","objectspace::define_finalizer()","module#define_method()","object#define_singleton_method()","tracepoint#defined_class()","array#delete()","dir::delete()","env::delete()","file::delete()","hash#delete()","string#delete()","string#delete!()","array#delete_at()","array#delete_if()","env::delete_if()","hash#delete_if()","string#delete_prefix()","string#delete_prefix!()","string#delete_suffix()","string#delete_suffix!()","complex#denominator()","float#denominator()","integer#denominator()","numeric#denominator()","rational#denominator()","module#deprecate_constant()","queue#deq()","sizedqueue#deq()","encoding::converter#destination_encoding()","encoding::invalidbytesequenceerror#destination_encoding()","encoding::undefinedconversionerror#destination_encoding()","encoding::invalidbytesequenceerror#destination_encoding_name()","encoding::undefinedconversionerror#destination_encoding_name()","process::detach()","enumerable#detect()","file::stat#dev()","file::stat#dev_major()","file::stat#dev_minor()","array#difference()","array#dig()","hash#dig()","struct#dig()","integer#digits()","file::directory?()","file::stat#directory?()","filetest#directory?()","file::dirname()","gc::disable()","gc::profiler::disable()","tracepoint#disable()","rubyvm::instructionsequence#disasm()","rubyvm::instructionsequence::disasm()","rubyvm::instructionsequence#disassemble()","rubyvm::instructionsequence::disassemble()","object#display()","integer#div()","numeric#div()","float#divmod()","integer#divmod()","numeric#divmod()","object#do_until()","object#do_while()","string#downcase()","symbol#downcase()","string#downcase!()","integer#downto()","array#drop()","enumerable#drop()","enumerator::lazy#drop()","array#drop_while()","enumerable#drop_while()","enumerator::lazy#drop_while()","time#dst?()","encoding#dummy?()","marshal::dump()","string#dump()","numeric#dup()","object#dup()","argf#each()","array#each()","dir#each()","env::each()","enumerator#each()","enumerator::arithmeticsequence#each()","enumerator::chain#each()","hash#each()","io#each()","integer#each()","objectspace::weakmap#each()","range#each()","struct#each()","rubyvm::each_builtin()","argf#each_byte()","io#each_byte()","string#each_byte()","argf#each_char()","io#each_char()","string#each_char()","dir::each_child()","dir#each_child()","rubyvm::instructionsequence#each_child()","argf#each_codepoint()","io#each_codepoint()","string#each_codepoint()","enumerable#each_cons()","enumerable#each_entry()","string#each_grapheme_cluster()","array#each_index()","env::each_key()","hash#each_key()","objectspace::weakmap#each_key()","argf#each_line()","io#each_line()","string#each_line()","objectspace::each_object()","env::each_pair()","hash#each_pair()","objectspace::weakmap#each_pair()","struct#each_pair()","enumerable#each_slice()","env::each_value()","hash#each_value()","objectspace::weakmap#each_value()","enumerable#each_with_index()","enumerator#each_with_index()","enumerable#each_with_object()","enumerator#each_with_object()","enumerator::lazy#eager()","process::egid()","process::egid=()","process::gid::eid()","process::uid::eid()","array#empty?()","dir::empty?()","env::empty?()","file::empty?()","filetest#empty?()","hash#empty?()","queue#empty?()","sizedqueue#empty?()","string#empty?()","symbol#empty?()","gc::enable()","gc::profiler::enable()","tracepoint#enable()","gc::profiler::enabled?()","rubyvm::mjit::enabled?()","tracepoint#enabled?()","threadgroup#enclose()","threadgroup#enclosed?()","string#encode()","string#encode!()","regexp#encoding()","ripper#encoding()","string#encoding()","symbol#encoding()","enumerator::arithmeticsequence#end()","matchdata#end()","range#end()","ripper#end_seen?()","string#end_with?()","symbol#end_with?()","queue#enq()","sizedqueue#enq()","dir::entries()","enumerable#entries()","range#entries()","enumerator::lazy#enum_for()","object#enum_for()","argf#eof()","io#eof()","argf#eof?()","io#eof?()","array#eql?()","enumerator::arithmeticsequence#eql?()","float#eql?()","hash#eql?()","matchdata#eql?()","method#eql?()","numeric#eql?()","object#eql?()","range#eql?()","regexp#eql?()","string#eql?()","struct#eql?()","time#eql?()","unboundmethod#eql?()","basicobject#equal?()","math::erf()","math::erfc()","systemcallerror#errno()","ripper#error?()","encoding::invalidbytesequenceerror#error_bytes()","encoding::undefinedconversionerror#error_char()","regexp::escape()","process::euid()","process::euid=()","binding#eval()","kernel#eval()","rubyvm::instructionsequence#eval()","tracepoint#eval_script()","integer#even?()","tracepoint#event()","exception::exception()","exception#exception()","enumerator::arithmeticsequence#exclude_end?()","range#exclude_end?()","thread::exclusive()","kernel#exec()","process::exec()","file::executable?()","file::stat#executable?()","filetest#executable?()","file::executable_real?()","file::stat#executable_real?()","filetest#executable_real?()","dir::exist?()","file::exist?()","filetest#exist?()","dir::exists?()","file::exists?()","filetest#exists?()","kernel#exit()","process::exit()","thread::exit()","thread#exit()","kernel#exit!()","process::exit!()","localjumperror#exit_value()","process::status#exited?()","process::status#exitstatus()","math::exp()","file::expand_path()","object#extend()","module#extend_object()","module#extended()","argf#external_encoding()","io#external_encoding()","file::extname()","object#f()","kernel#fail()","io#fcntl()","io#fdatasync()","complex#fdiv()","float#fdiv()","integer#fdiv()","numeric#fdiv()","rational#fdiv()","enumerator#feed()","array#fetch()","env::fetch()","hash#fetch()","thread#fetch()","hash#fetch_values()","argf#file()","file::file?()","file::stat#file?()","filetest#file?()","argf#filename()","ripper#filename()","argf#fileno()","dir#fileno()","io#fileno()","array#fill()","array#filter()","env::filter()","enumerable#filter()","enumerator::lazy#filter()","hash#filter()","struct#filter()","array#filter!()","env::filter!()","hash#filter!()","enumerable#filter_map()","enumerator::lazy#filter_map()","encoding::find()","enumerable#find()","enumerable#find_all()","enumerator::lazy#find_all()","array#find_index()","enumerable#find_index()","encoding::converter#finish()","complex#finite?()","float#finite?()","numeric#finite?()","array#first()","enumerable#first()","enumerator::arithmeticsequence#first()","range#first()","rubyvm::abstractsyntaxtree::node#first_column()","rubyvm::abstractsyntaxtree::node#first_lineno()","rubyvm::instructionsequence#first_lineno()","regexp#fixed_encoding?()","enumerable#flat_map()","enumerator::lazy#flat_map()","array#flatten()","hash#flatten()","array#flatten!()","file#flock()","float#floor()","integer#floor()","numeric#floor()","rational#floor()","time#floor()","io#flush()","file::fnmatch()","file::fnmatch?()","io::for_fd()","enumerator::lazy#force()","string#force_encoding()","dir::foreach()","io::foreach()","kernel#fork()","process::fork()","thread::fork()","kernel#format()","env::freeze()","module#freeze()","object#freeze()","string#freeze()","math::frexp()","time#friday?()","process::gid::from_name()","process::uid::from_name()","object#frozen?()","io#fsync()","file::ftype()","file::stat#ftype()","exception#full_message()","math::gamma()","gc#garbage_collect()","objectspace#garbage_collect()","objectspace::garbage_collect()","integer#gcd()","integer#gcdlcm()","argf#getbyte()","io#getbyte()","string#getbyte()","argf#getc()","io#getc()","process::sys::getegid()","process::sys::geteuid()","process::sys::getgid()","time#getgm()","time#getlocal()","process::getpgid()","process::getpgrp()","process::getpriority()","process::getrlimit()","argf#gets()","io#gets()","kernel#gets()","process::getsid()","process::sys::getuid()","time#getutc()","dir::getwd()","file::stat#gid()","process::gid()","process::gid=()","dir::glob()","kernel#global_variables()","time::gm()","time#gmt?()","time#gmt_offset()","time#gmtime()","time#gmtoff()","process::gid::grant_privilege()","process::uid::grant_privilege()","string#grapheme_clusters()","enumerable#grep()","enumerator::lazy#grep()","enumerable#grep_v()","enumerator::lazy#grep_v()","thread#group()","enumerable#group_by()","process::groups()","process::groups=()","file::grpowned?()","file::stat#grpowned?()","filetest#grpowned?()","kernel#gsub()","string#gsub()","string#gsub!()","object#h()","thread::handle_interrupt()","env::has_key?()","hash#has_key?()","env::has_value?()","hash#has_value?()","array#hash()","enumerator::arithmeticsequence#hash()","float#hash()","hash#hash()","matchdata#hash()","method#hash()","object#hash()","proc#hash()","range#hash()","regexp#hash()","string#hash()","struct#hash()","time#hash()","unboundmethod#hash()","string#hex()","dir::home()","time#hour()","math::hypot()","numeric#i()","symbol#id2name()","file::identical?()","filetest#identical?()","complex#imag()","numeric#imag()","complex#imaginary()","numeric#imaginary()","module#include()","array#include?()","env::include?()","enumerable#include?()","hash#include?()","module#include?()","objectspace::weakmap#include?()","range#include?()","string#include?()","module#included()","module#included_modules()","encoding::invalidbytesequenceerror#incomplete_input?()","array#index()","env::index()","string#index()","complex#infinite?()","float#infinite?()","numeric#infinite?()","class#inherited()","process::initgroups()","array#initialize_copy()","hash#initialize_copy()","string#initialize_copy()","enumerable#inject()","file::stat#ino()","argf#inplace_mode()","argf#inplace_mode=()","array#insert()","string#insert()","encoding::converter#insert_output()","argf#inspect()","array#inspect()","complex#inspect()","dir#inspect()","env::inspect()","encoding#inspect()","encoding::converter#inspect()","enumerator#inspect()","enumerator::arithmeticsequence#inspect()","enumerator::chain#inspect()","exception#inspect()","falseclass#inspect()","fiber#inspect()","file::stat#inspect()","float#inspect()","hash#inspect()","io#inspect()","integer#inspect()","matchdata#inspect()","method#inspect()","module#inspect()","nilclass#inspect()","object#inspect()","objectspace::weakmap#inspect()","proc#inspect()","process::status#inspect()","range#inspect()","rational#inspect()","regexp#inspect()","rubyvm::abstractsyntaxtree::node#inspect()","rubyvm::instructionsequence#inspect()","string#inspect()","struct#inspect()","symbol#inspect()","thread#inspect()","thread::backtrace::location#inspect()","time#inspect()","tracepoint#inspect()","trueclass#inspect()","unboundmethod#inspect()","basicobject#instance_eval()","basicobject#instance_exec()","module#instance_method()","module#instance_methods()","object#instance_of?()","object#instance_variable_defined?()","object#instance_variable_get()","object#instance_variable_set()","object#instance_variables()","tracepoint#instruction_sequence()","integer#integer?()","numeric#integer?()","string#intern()","symbol#intern()","argf#internal_encoding()","io#internal_encoding()","array#intersection()","env::invert()","hash#invert()","io#ioctl()","object#is_a?()","io#isatty()","time#isdst()","process::sys::issetugid()","kernel#iterator?()","object#itself()","array#join()","file::join()","thread#join()","array#keep_if()","env::keep_if()","hash#keep_if()","env::key()","hash#key()","keyerror#key()","env::key?()","hash#key?()","objectspace::weakmap#key?()","thread#key?()","env::keys()","hash#keys()","objectspace::weakmap#keys()","thread#keys()","process::kill()","thread::kill()","thread#kill()","object#kind_of?()","rubyvm::instructionsequence#label()","thread::backtrace::location#label()","kernel#lambda()","proc#lambda?()","array#last()","enumerator::arithmeticsequence#last()","range#last()","rubyvm::abstractsyntaxtree::node#last_column()","encoding::converter#last_error()","rubyvm::abstractsyntaxtree::node#last_lineno()","regexp::last_match()","process::last_status()","gc::latest_gc_info()","enumerable#lazy()","enumerator::lazy#lazy()","file::lchmod()","file::lchown()","integer#lcm()","math::ldexp()","array#length()","env::length()","hash#length()","matchdata#length()","objectspace::weakmap#length()","queue#length()","sizedqueue#length()","string#length()","struct#length()","symbol#length()","ripper::lex_state_name()","math::lgamma()","argf#lineno()","io#lineno()","ripper#lineno()","thread::backtrace::location#lineno()","tracepoint#lineno()","argf#lineno=()","io#lineno=()","argf#lines()","io#lines()","string#lines()","file::link()","encoding::list()","signal::list()","thread::list()","threadgroup#list()","string#ljust()","kernel#load()","marshal::load()","rubyvm::instructionsequence::load_from_binary()","rubyvm::instructionsequence::load_from_binary_extra_data()","time::local()","binding#local_variable_defined?()","binding#local_variable_get()","binding#local_variable_set()","binding#local_variables()","kernel#local_variables()","nameerror#local_variables()","encoding::locale_charmap()","time#localtime()","mutex#lock()","mutex#locked?()","math::log()","math::log10()","math::log2()","kernel#loop()","file::lstat()","file#lstat()","string#lstrip()","string#lstrip!()","file::lutime()","complex#magnitude()","float#magnitude()","integer#magnitude()","numeric#magnitude()","rational#magnitude()","thread::main()","gc::malloc_allocated_size()","gc::malloc_allocations()","array#map()","enumerable#map()","enumerator::lazy#map()","array#map!()","regexp#match()","string#match()","symbol#match()","regexp#match?()","string#match?()","symbol#match?()","object#matching_methods()","array#max()","enumerable#max()","range#max()","sizedqueue#max()","sizedqueue#max=()","enumerable#max_by()","process::maxgroups()","process::maxgroups=()","time#mday()","env::member?()","enumerable#member?()","hash#member?()","objectspace::weakmap#member?()","range#member?()","struct#members()","hash#merge()","env::merge!()","hash#merge!()","exception#message()","object#method()","module#method_added()","module#method_defined?()","tracepoint#method_id()","basicobject#method_missing()","object#method_missing()","module#method_removed()","module#method_undefined()","object#methods()","array#min()","enumerable#min()","range#min()","time#min()","enumerable#min_by()","array#minmax()","enumerable#minmax()","range#minmax()","enumerable#minmax_by()","dir::mkdir()","file::mkfifo()","time::mktime()","file::stat#mode()","module#module_eval()","module#module_exec()","module#module_function()","float#modulo()","integer#modulo()","numeric#modulo()","time#mon()","time#monday?()","time#month()","file::mtime()","file#mtime()","file::stat#mtime()","encoding#name()","method#name()","module#name()","nameerror#name()","thread#name()","unboundmethod#name()","thread#name=()","encoding::name_list()","matchdata#named_captures()","regexp#named_captures()","encoding#names()","matchdata#names()","regexp#names()","float#nan?()","float#negative?()","numeric#negative?()","rational#negative?()","module::nesting()","array::new()","basicobject::new()","class#new()","class::new()","conditionvariable::new()","dir::new()","encoding::converter::new()","enumerator::new()","enumerator::chain::new()","enumerator::lazy::new()","exception::new()","file::new()","file::stat::new()","frozenerror::new()","hash::new()","io::new()","keyerror::new()","module::new()","mutex::new()","nameerror::new()","nomethoderror::new()","pool::new()","proc::new()","queue::new()","random::new()","range::new()","regexp::new()","ripper::new()","rubyvm::instructionsequence::new()","signalexception::new()","sizedqueue::new()","string::new()","struct::new()","syntaxerror::new()","systemcallerror::new()","systemexit::new()","thread::new()","time::new()","tracepoint::new()","uncaughtthrowerror::new()","random::new_seed()","enumerator#next()","integer#next()","string#next()","symbol#next()","string#next!()","float#next_float()","enumerator#next_values()","nilclass#nil?()","object#nil?()","file::stat#nlink()","integer#nobits?()","array#none?()","enumerable#none?()","numeric#nonzero?()","time::now()","time#nsec()","queue#num_waiting()","sizedqueue#num_waiting()","complex#numerator()","float#numerator()","integer#numerator()","numeric#numerator()","rational#numerator()","object#object_id()","string#oct()","integer#odd?()","rubyvm::abstractsyntaxtree::of()","rubyvm::instructionsequence::of()","matchdata#offset()","enumerator#old_inspect()","array#old_to_s()","falseclass#old_to_s()","array#one?()","enumerable#one?()","dir::open()","file::open()","io::open()","kernel#open()","regexp#options()","integer#ord()","string#ord()","method#original_name()","unboundmethod#original_name()","file::owned?()","file::stat#owned?()","filetest#owned?()","mutex#owned?()","method#owner()","unboundmethod#owner()","kernel#p()","array#pack()","method#parameters()","proc#parameters()","tracepoint#parameters()","unboundmethod#parameters()","ripper#parse()","rubyvm::abstractsyntaxtree::parse()","rubyvm::abstractsyntaxtree::parse_file()","enumerable#partition()","string#partition()","thread::pass()","argf#path()","dir#path()","file::path()","file#path()","rubyvm::instructionsequence#path()","thread::backtrace::location#path()","tracepoint#path()","rubyvm::mjit::pause()","enumerator#peek()","enumerator#peek_values()","thread::pending_interrupt?()","thread#pending_interrupt?()","array#permutation()","complex#phase()","float#phase()","numeric#phase()","io#pid()","process::pid()","process::status#pid()","io::pipe()","file::pipe?()","file::stat#pipe?()","filetest#pipe?()","complex::polar()","complex#polar()","numeric#polar()","array#pop()","queue#pop()","sizedqueue#pop()","io::popen()","argf#pos()","dir#pos()","io#pos()","argf#pos=()","dir#pos=()","io#pos=()","float#positive?()","numeric#positive?()","rational#positive?()","matchdata#post_match()","integer#pow()","kernel#pp()","process::ppid()","matchdata#pre_match()","io#pread()","integer#pred()","array#prepend()","module#prepend()","string#prepend()","module#prepend_features()","module#prepended()","float#prev_float()","encoding::converter#primitive_convert()","encoding::converter#primitive_errinfo()","argf#print()","io#print()","kernel#print()","argf#printf()","io#printf()","kernel#printf()","thread#priority()","thread#priority=()","module#private()","nomethoderror#private_call?()","module#private_class_method()","module#private_constant()","module#private_instance_methods()","module#private_method_defined?()","object#private_methods()","kernel#proc()","enumerator::produce()","array#product()","module#protected()","module#protected_instance_methods()","module#protected_method_defined?()","object#protected_methods()","module#public()","module#public_class_method()","module#public_constant()","module#public_instance_method()","module#public_instance_methods()","object#public_method()","module#public_method_defined?()","object#public_methods()","object#public_send()","array#push()","queue#push()","sizedqueue#push()","encoding::converter#putback()","argf#putc()","io#putc()","kernel#putc()","argf#puts()","io#puts()","kernel#puts()","dir::pwd()","io#pwrite()","complex#quo()","float#quo()","numeric#quo()","rational#quo()","regexp::quote()","fiber#raise()","kernel#raise()","thread#raise()","tracepoint#raised_exception()","kernel#rand()","random#rand()","random::rand()","random::formatter#rand()","random::formatter#random_number()","array#rassoc()","env::rassoc()","hash#rassoc()","complex#rationalize()","float#rationalize()","integer#rationalize()","nilclass#rationalize()","rational#rationalize()","gc::profiler::raw_data()","file::stat#rdev()","file::stat#rdev_major()","file::stat#rdev_minor()","process::gid::re_exchange()","process::uid::re_exchange()","process::gid::re_exchangeable?()","process::uid::re_exchangeable?()","argf#read()","dir#read()","io::read()","io#read()","argf#read_nonblock()","io#read_nonblock()","file::readable?()","file::stat#readable?()","filetest#readable?()","file::readable_real?()","file::stat#readable_real?()","filetest#readable_real?()","encoding::invalidbytesequenceerror#readagain_bytes()","argf#readbyte()","io#readbyte()","argf#readchar()","io#readchar()","argf#readline()","io#readline()","kernel#readline()","argf#readlines()","io::readlines()","io#readlines()","kernel#readlines()","file::readlink()","argf#readpartial()","io#readpartial()","complex#real()","numeric#real()","complex#real?()","numeric#real?()","file::realdirpath()","file::realpath()","localjumperror#reason()","binding#receiver()","frozenerror#receiver()","keyerror#receiver()","method#receiver()","nameerror#receiver()","complex::rect()","complex#rect()","numeric#rect()","complex::rectangular()","complex#rectangular()","numeric#rectangular()","enumerable#reduce()","module#refine()","matchdata#regexp()","env::rehash()","hash#rehash()","array#reject()","env::reject()","enumerable#reject()","enumerator::lazy#reject()","hash#reject()","array#reject!()","env::reject!()","hash#reject!()","integer#remainder()","numeric#remainder()","module#remove_class_variable()","module#remove_const()","object#remove_instance_variable()","module#remove_method()","gc::remove_stress_to_class()","file::rename()","io#reopen()","array#repeated_combination()","array#repeated_permutation()","array#replace()","env::replace()","hash#replace()","string#replace()","encoding::converter#replacement()","encoding::converter#replacement=()","encoding#replicate()","gc::profiler::report()","thread::report_on_exception()","thread#report_on_exception()","thread::report_on_exception=()","thread#report_on_exception=()","kernel#require()","kernel#require_relative()","object#respond_to?()","object#respond_to_missing?()","marshal::restore()","gc::profiler::result()","stopiteration#result()","fiber#resume()","rubyvm::mjit::resume()","tracepoint#return_value()","array#reverse()","string#reverse()","array#reverse!()","string#reverse!()","array#reverse_each()","enumerable#reverse_each()","argf#rewind()","dir#rewind()","enumerator#rewind()","enumerator::chain#rewind()","io#rewind()","process::gid::rid()","process::uid::rid()","array#rindex()","string#rindex()","string#rjust()","dir::rmdir()","array#rotate()","array#rotate!()","float#round()","integer#round()","numeric#round()","rational#round()","time#round()","string#rpartition()","string#rstrip()","string#rstrip!()","module#ruby2_keywords()","proc#ruby2_keywords()","hash::ruby2_keywords_hash()","hash::ruby2_keywords_hash?()","thread#run()","thread#safe_level()","array#sample()","time#saturday?()","string#scan()","string#scrub()","string#scrub!()","encoding::converter::search_convpath()","time#sec()","random#seed()","argf#seek()","dir#seek()","io#seek()","array#select()","env::select()","enumerable#select()","enumerator::lazy#select()","hash#select()","io::select()","kernel#select()","struct#select()","array#select!()","env::select!()","hash#select!()","tracepoint#self()","object#send()","exception#set_backtrace()","argf#set_encoding()","io#set_encoding()","io#set_encoding_by_bom()","kernel#set_trace_func()","thread#set_trace_func()","string#setbyte()","process::sys::setegid()","process::sys::seteuid()","process::sys::setgid()","file::setgid?()","file::stat#setgid?()","filetest#setgid?()","process::setpgid()","process::setpgrp()","process::setpriority()","process::setproctitle()","process::sys::setregid()","process::sys::setresgid()","process::sys::setresuid()","process::sys::setreuid()","process::sys::setrgid()","process::setrlimit()","process::sys::setruid()","process::setsid()","process::sys::setuid()","file::setuid?()","file::stat#setuid?()","filetest#setuid?()","array#shift()","env::shift()","hash#shift()","queue#shift()","sizedqueue#shift()","object#shortest_abbreviation()","array#shuffle()","array#shuffle!()","process::gid::sid_available?()","process::uid::sid_available?()","conditionvariable#signal()","process::status#signaled?()","signal::signame()","signalexception#signo()","math::sin()","object#singleton_class()","module#singleton_class?()","object#singleton_method()","basicobject#singleton_method_added()","basicobject#singleton_method_removed()","basicobject#singleton_method_undefined()","object#singleton_methods()","math::sinh()","array#size()","env::size()","enumerator#size()","enumerator::arithmeticsequence#size()","enumerator::chain#size()","file#size()","file::size()","file::stat#size()","filetest#size()","hash#size()","integer#size()","matchdata#size()","objectspace::weakmap#size()","queue#size()","range#size()","sizedqueue#size()","string#size()","struct#size()","symbol#size()","file::size?()","file::stat#size?()","filetest#size?()","argf#skip()","kernel#sleep()","mutex#sleep()","array#slice()","env::slice()","hash#slice()","string#slice()","symbol#slice()","array#slice!()","string#slice!()","enumerable#slice_after()","enumerator::lazy#slice_after()","enumerable#slice_before()","enumerator::lazy#slice_before()","enumerable#slice_when()","enumerator::lazy#slice_when()","file::socket?()","file::stat#socket?()","filetest#socket?()","array#sort()","enumerable#sort()","array#sort!()","enumerable#sort_by()","array#sort_by!()","regexp#source()","encoding::converter#source_encoding()","encoding::invalidbytesequenceerror#source_encoding()","encoding::undefinedconversionerror#source_encoding()","encoding::invalidbytesequenceerror#source_encoding_name()","encoding::undefinedconversionerror#source_encoding_name()","binding#source_location()","method#source_location()","proc#source_location()","unboundmethod#source_location()","kernel#spawn()","process::spawn()","file::split()","string#split()","kernel#sprintf()","integer::sqrt()","math::sqrt()","string#squeeze()","string#squeeze!()","kernel#srand()","random::srand()","gc::start()","thread::start()","string#start_with?()","symbol#start_with?()","file::stat()","gc::stat()","io#stat()","rubyvm::stat()","tracepoint::stat()","ripper#state()","systemexit#status()","thread#status()","enumerator::arithmeticsequence#step()","numeric#step()","range#step()","file::sticky?()","file::stat#sticky?()","filetest#sticky?()","thread::stop()","thread#stop?()","process::status#stopped?()","process::status#stopsig()","env::store()","hash#store()","gc::stress()","gc::stress=()","time#strftime()","matchdata#string()","string#strip()","string#strip!()","kernel#sub()","string#sub()","string#sub!()","time#subsec()","integer#succ()","string#succ()","symbol#succ()","time#succ()","string#succ!()","process::status#success?()","systemexit#success?()","array#sum()","enumerable#sum()","string#sum()","time#sunday?()","method#super_method()","unboundmethod#super_method()","class#superclass()","string#swapcase()","symbol#swapcase()","string#swapcase!()","process::gid::switch()","process::uid::switch()","file::symlink()","file::symlink?()","file::stat#symlink?()","filetest#symlink?()","io#sync()","io#sync=()","mutex#synchronize()","kernel#syscall()","io::sysopen()","io#sysread()","io#sysseek()","kernel#system()","io#syswrite()","uncaughtthrowerror#tag()","object#taint()","object#tainted?()","array#take()","enumerable#take()","enumerator::lazy#take()","array#take_while()","enumerable#take_while()","enumerator::lazy#take_while()","enumerable#tally()","math::tan()","math::tanh()","object#tap()","argf#tell()","dir#tell()","io#tell()","thread#terminate()","process::status#termsig()","kernel#test()","object#then()","thread#thread_variable?()","thread#thread_variable_get()","thread#thread_variable_set()","thread#thread_variables()","kernel#throw()","time#thursday?()","integer#times()","process::times()","argf#to_a()","array#to_a()","env::to_a()","enumerable#to_a()","enumerator::lazy#to_a()","hash#to_a()","matchdata#to_a()","nilclass#to_a()","range#to_a()","rubyvm::instructionsequence#to_a()","string#to_a()","struct#to_a()","time#to_a()","array#to_ary()","rubyvm::instructionsequence#to_binary()","complex#to_c()","nilclass#to_c()","numeric#to_c()","string#to_c()","enumerator::lazy#to_enum()","object#to_enum()","complex#to_f()","float#to_f()","integer#to_f()","nilclass#to_f()","rational#to_f()","string#to_f()","time#to_f()","array#to_h()","env::to_h()","enumerable#to_h()","hash#to_h()","nilclass#to_h()","struct#to_h()","env::to_hash()","hash#to_hash()","argf#to_i()","complex#to_i()","float#to_i()","io#to_i()","integer#to_i()","nilclass#to_i()","process::status#to_i()","rational#to_i()","string#to_i()","time#to_i()","float#to_int()","integer#to_int()","numeric#to_int()","argf#to_io()","io#to_io()","dir#to_path()","file#to_path()","enumerator::yielder#to_proc()","hash#to_proc()","method#to_proc()","proc#to_proc()","symbol#to_proc()","complex#to_r()","float#to_r()","integer#to_r()","nilclass#to_r()","rational#to_r()","string#to_r()","time#to_r()","argf#to_s()","array#to_s()","complex#to_s()","env::to_s()","encoding#to_s()","exception#to_s()","falseclass#to_s()","fiber#to_s()","float#to_s()","hash#to_s()","integer#to_s()","matchdata#to_s()","method#to_s()","module#to_s()","nilclass#to_s()","object#to_s()","proc#to_s()","process::status#to_s()","range#to_s()","rational#to_s()","regexp#to_s()","string#to_s()","struct#to_s()","symbol#to_s()","thread#to_s()","thread::backtrace::location#to_s()","time#to_s()","trueclass#to_s()","unboundmethod#to_s()","uncaughtthrowerror#to_s()","string#to_str()","string#to_sym()","symbol#to_sym()","exception::to_tty?()","argf#to_write_io()","ripper#token()","gc::profiler::total_time()","string#tr()","string#tr!()","string#tr_s()","string#tr_s!()","tracepoint::trace()","rubyvm::instructionsequence#trace_points()","kernel#trace_var()","fiber#transfer()","hash#transform_keys()","hash#transform_keys!()","hash#transform_values()","hash#transform_values!()","array#transpose()","kernel#trap()","signal::trap()","file::truncate()","file#truncate()","float#truncate()","integer#truncate()","numeric#truncate()","rational#truncate()","object#trust()","array::try_convert()","hash::try_convert()","io::try_convert()","regexp::try_convert()","string::try_convert()","mutex#try_lock()","io#tty?()","time#tuesday?()","time#tv_nsec()","time#tv_sec()","time#tv_usec()","rubyvm::abstractsyntaxtree::node#type()","file::stat#uid()","process::uid()","process::uid=()","file::umask()","method#unbind()","module#undef_method()","objectspace::undefine_finalizer()","string#undump()","io#ungetbyte()","io#ungetc()","string#unicode_normalize()","string#unicode_normalize!()","string#unicode_normalized?()","array#union()","regexp::union()","array#uniq()","enumerable#uniq()","enumerator::lazy#uniq()","array#uniq!()","dir::unlink()","file::unlink()","mutex#unlock()","string#unpack()","string#unpack1()","array#unshift()","object#untaint()","kernel#untrace_var()","object#untrust()","object#untrusted?()","string#upcase()","symbol#upcase()","string#upcase!()","env::update()","hash#update()","integer#upto()","string#upto()","random::urandom()","time#usec()","module::used_modules()","module#using()","time::utc()","time#utc()","time#utc?()","time#utc_offset()","file::utime()","string#valid_encoding?()","thread#value()","uncaughtthrowerror#value()","env::value?()","hash#value?()","env::values()","hash#values()","objectspace::weakmap#values()","struct#values()","array#values_at()","env::values_at()","hash#values_at()","matchdata#values_at()","struct#values_at()","gc::verify_compaction_references()","gc::verify_internal_consistency()","gc::verify_transient_heap_internal_consistency()","conditionvariable#wait()","process::wait()","process::wait2()","process::waitall()","process::waitpid()","process::waitpid2()","thread#wakeup()","kernel#warn()","warning#warn()","time#wday()","time#wednesday?()","enumerator#with_index()","enumerator::lazy#with_index()","enumerator#with_object()","file::world_readable?()","file::stat#world_readable?()","filetest#world_readable?()","file::world_writable?()","file::stat#world_writable?()","filetest#world_writable?()","file::writable?()","file::stat#writable?()","filetest#writable?()","file::writable_real?()","file::stat#writable_real?()","filetest#writable_real?()","argf#write()","io::write()","io#write()","io#write_nonblock()","time#yday()","time#year()","fiber::yield()","proc#yield()","object#yield_self()","ripper#yydebug()","ripper#yydebug=()","file::zero?()","file::stat#zero?()","filetest#zero?()","float#zero?()","numeric#zero?()","array#zip()","enumerable#zip()","enumerator::lazy#zip()","time#zone()","array#|()","falseclass#|()","integer#|()","nilclass#|()","trueclass#|()","integer#~()","regexp#~()","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"info":[["ARGF","","ARGF.html","","<p><code>ARGF</code> is a stream designed for use in scripts that process\nfiles given as command-line arguments or passed …\n"],["ArgumentError","","ArgumentError.html","","<p>Raised when the arguments are wrong and there isn&#39;t a more specific\nException class.\n<p>Ex: passing the …\n"],["Array","","Array.html","","<p>Arrays are ordered, integer-indexed collections of any object.\n<p>Array indexing starts at 0, as in C or …\n"],["BasicObject","","BasicObject.html","","<p>BasicObject is the parent class of all classes in Ruby.  It&#39;s an\nexplicit blank class.\n<p>BasicObject …\n"],["Binding","","Binding.html","","<p>Objects of class Binding encapsulate the execution context at some\nparticular place in the code and retain …\n"],["Class","","Class.html","","<p>Classes in Ruby are first-class objects—each is an instance of class Class.\n<p>Typically, you create a …\n"],["ClosedQueueError","","ClosedQueueError.html","","<p>The exception class which will be raised when pushing into a closed Queue. \nSee Queue#close and SizedQueue#close …\n"],["Comparable","","Comparable.html","","<p>The Comparable mixin is used by classes whose objects may be ordered. The\nclass must define the <code>&lt;=&gt;</code> …\n"],["Complex","","Complex.html","","<p>A complex number can be represented as a paired real number with imaginary\nunit; a+bi.  Where a is real …\n"],["ConditionVariable","","ConditionVariable.html","","<p>ConditionVariable objects augment class Mutex. Using condition variables,\nit is possible to suspend while …\n"],["Continuation","","Continuation.html","","<p>Continuation objects are generated by Kernel#callcc, after having\n+require+d <em>continuation</em>. They hold …\n"],["Data","","Data.html","","<p>This is a deprecated class, base class for C extensions using\nData_Make_Struct or Data_Wrap_Struct.\n"],["Dir","","Dir.html","","<p>Objects of class Dir are directory streams representing directories in the\nunderlying file system. They …\n"],["ENV","","ENV.html","","<p>ENV is a hash-like accessor for environment variables.\n<p>Interaction with the Operating System\n<p>The ENV object …\n"],["EOFError","","EOFError.html","","<p>Raised by some IO operations when reaching the end of file. Many IO methods\nexist in two forms,\n<p>one that …\n"],["Encoding","","Encoding.html","","<p>An Encoding instance represents a character encoding usable in Ruby. It is\ndefined as a constant under …\n"],["Encoding::CompatibilityError","","Encoding/CompatibilityError.html","","<p>Raised by Encoding and String methods when the source encoding is\nincompatible with the target encoding. …\n"],["Encoding::Converter","","Encoding/Converter.html","","<p>Encoding conversion class.\n"],["Encoding::ConverterNotFoundError","","Encoding/ConverterNotFoundError.html","","<p>Raised by transcoding methods when a named encoding does not correspond\nwith a known converter.\n"],["Encoding::InvalidByteSequenceError","","Encoding/InvalidByteSequenceError.html","","<p>Raised by Encoding and String methods when the string being transcoded\ncontains a byte invalid for the …\n"],["Encoding::UndefinedConversionError","","Encoding/UndefinedConversionError.html","","<p>Raised by Encoding and String methods when a transcoding operation fails.\n"],["EncodingError","","EncodingError.html","","<p>EncodingError is the base class for encoding errors.\n"],["Enumerable","","Enumerable.html","","<p>The Enumerable mixin provides collection classes with several traversal and\nsearching methods, and with …\n"],["Enumerator","","Enumerator.html","","<p>A class which allows both internal and external iteration.\n<p>An Enumerator can be created by the following …\n"],["Enumerator::ArithmeticSequence","","Enumerator/ArithmeticSequence.html","","<p>Enumerator::ArithmeticSequence is a subclass of Enumerator, that is a\nrepresentation of sequences of …\n"],["Enumerator::Chain","","Enumerator/Chain.html","","<p>Enumerator::Chain is a subclass of Enumerator, which represents a chain of\nenumerables that works as …\n"],["Enumerator::Generator","","Enumerator/Generator.html","","<p>Generator\n"],["Enumerator::Lazy","","Enumerator/Lazy.html","","<p>Enumerator::Lazy is a special type of Enumerator, that allows constructing\nchains of operations without …\n"],["Enumerator::Producer","","Enumerator/Producer.html","","<p>Producer\n"],["Enumerator::Yielder","","Enumerator/Yielder.html","","<p>Yielder\n"],["Errno","","Errno.html","","<p>Ruby exception objects are subclasses of Exception.  However, operating\nsystems typically report errors …\n"],["Exception","","Exception.html","","<p>Class Exception and its subclasses are used to communicate between\nKernel#raise and <code>rescue</code> statements …\n"],["FalseClass","","FalseClass.html","","<p>The global value <code>false</code> is the only instance of class\nFalseClass and represents a logically false value …\n"],["Fiber","","Fiber.html","","<p>Fibers are primitives for implementing light weight cooperative concurrency\nin Ruby. Basically they are …\n"],["FiberError","","FiberError.html","","<p>Raised when an invalid operation is attempted on a Fiber, in particular\nwhen attempting to call/resume …\n"],["File","","File.html","","<p>A File is an abstraction of any file object accessible by the program and\nis closely associated with …\n"],["File::Constants","","File/Constants.html","","<p>File::Constants provides file-related constants.  All possible file\nconstants are listed in the documentation …\n"],["File::Stat","","File/Stat.html","","<p>Objects of class File::Stat encapsulate common status information for File\nobjects. The information is …\n"],["FileTest","","FileTest.html","","<p>FileTest implements file test operations similar to those used in\nFile::Stat. It exists as a standalone …\n"],["Float","","Float.html","","<p>Float objects represent inexact real numbers using the native\narchitecture&#39;s double-precision floating …\n"],["FloatDomainError","","FloatDomainError.html","","<p>Raised when attempting to convert special float values (in particular\n<code>Infinity</code> or <code>NaN</code>) to numerical classes …\n"],["FrozenError","","FrozenError.html","","<p>Raised when there is an attempt to modify a frozen object.\n\n<pre class=\"ruby\">[<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>].<span class=\"ruby-identifier\">freeze</span> <span class=\"ruby-operator\">&lt;&lt;</span> <span class=\"ruby-value\">4</span>\n</pre>\n<p><em>raises the exception:</em> …\n"],["GC","","GC.html","","<p>The GC module provides an interface to Ruby&#39;s mark and sweep garbage\ncollection mechanism.\n<p>Some of …\n"],["GC::Profiler","","GC/Profiler.html","","<p>The GC profiler provides access to information on GC runs including time,\nlength and object space size. …\n"],["Hash","","Hash.html","","<p>A Hash is a dictionary-like collection of unique keys and their values.\nAlso called associative arrays, …\n"],["IO","","IO.html","","<p>The IO class is the basis for all input and output in Ruby. An I/O stream\nmay be <em>duplexed</em> (that is, bidirectional), …\n"],["IO::EAGAINWaitReadable","","IO/EAGAINWaitReadable.html","","<p>exception to wait for reading by EAGAIN. see IO.select.\n"],["IO::EAGAINWaitWritable","","IO/EAGAINWaitWritable.html","","<p>exception to wait for writing by EAGAIN. see IO.select.\n"],["IO::EINPROGRESSWaitReadable","","IO/EINPROGRESSWaitReadable.html","","<p>exception to wait for reading by EINPROGRESS. see IO.select.\n"],["IO::EINPROGRESSWaitWritable","","IO/EINPROGRESSWaitWritable.html","","<p>exception to wait for writing by EINPROGRESS. see IO.select.\n"],["IO::EWOULDBLOCKWaitReadable","","IO/EWOULDBLOCKWaitReadable.html","","<p>exception to wait for reading by EWOULDBLOCK. see IO.select.\n"],["IO::EWOULDBLOCKWaitWritable","","IO/EWOULDBLOCKWaitWritable.html","","<p>exception to wait for writing by EWOULDBLOCK. see IO.select.\n"],["IO::WaitReadable","","IO/WaitReadable.html","","<p>exception to wait for reading. see IO.select.\n"],["IO::WaitWritable","","IO/WaitWritable.html","","<p>exception to wait for writing. see IO.select.\n"],["IOError","","IOError.html","","<p>Raised when an IO operation fails.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">open</span>(<span class=\"ruby-string\">&quot;/etc/hosts&quot;</span>) {<span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">f</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">f</span> <span class=\"ruby-operator\">&lt;&lt;</span> <span class=\"ruby-string\">&quot;example&quot;</span>}\n  <span class=\"ruby-comment\">#=&gt; IOError: not opened ...</span>\n</pre>\n"],["IndexError","","IndexError.html","","<p>Raised when the given index is invalid.\n\n<pre>a = [:foo, :bar]\na.fetch(0)   #=&gt; :foo\na[4]         #=&gt; nil\na.fetch(4) ...</pre>\n"],["Integer","","Integer.html","","<p>Holds Integer values.  You cannot add a singleton method to an Integer\nobject, any attempt to do so will …\n"],["Interrupt","","Interrupt.html","","<p>Raised when the interrupt signal is received, typically because the user\nhas pressed Control-C (on most …\n"],["Kernel","","Kernel.html","","<p>The Kernel module is included by class Object, so its methods are available\nin every Ruby object.\n<p>The …\n"],["KeyError","","KeyError.html","","<p>Raised when the specified key is not found. It is a subclass of IndexError.\n\n<pre>h = {&quot;foo&quot; =&gt; :bar}\nh.fetch(&quot;foo&quot;) ...</pre>\n"],["LoadError","","LoadError.html","","<p>Raised when a file required (a Ruby script, extension library, …) fails to\nload.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;this/file/does/not/exist&#39;</span>\n</pre>\n"],["LocalJumpError","","LocalJumpError.html","","<p>Raised when Ruby can&#39;t yield as requested.\n<p>A typical scenario is attempting to yield when no block …\n"],["Marshal","","Marshal.html","","<p>The marshaling library converts collections of Ruby objects into a byte\nstream, allowing them to be stored …\n"],["MatchData","","MatchData.html","","<p>MatchData encapsulates the result of matching a Regexp against string. It\nis returned by Regexp#match …\n"],["Math","","Math.html","","<p>The Math module contains module functions for basic trigonometric and\ntranscendental functions. See class …\n"],["Math::DomainError","","Math/DomainError.html","","<p>Raised when a mathematical function is evaluated outside of its domain of\ndefinition.\n<p>For example, since …\n"],["Method","","Method.html","","<p>Method objects are created by Object#method, and are associated with a\nparticular object (not just with …\n"],["Module","","Module.html","","<p>A Module is a collection of methods and constants. The methods in a module\nmay be instance methods or …\n"],["Mutex","","Mutex.html","","<p>Mutex implements a simple semaphore that can be used to coordinate access\nto shared data from multiple …\n"],["NameError","","NameError.html","","<p>Raised when a given name is invalid or undefined.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">puts</span> <span class=\"ruby-identifier\">foo</span>\n</pre>\n<p><em>raises the exception:</em>\n"],["NilClass","","NilClass.html","","<p>The class of the singleton object <code>nil</code>.\n"],["NoMatchingPatternError","","NoMatchingPatternError.html","",""],["NoMemoryError","","NoMemoryError.html","","<p>Raised when memory allocation fails.\n"],["NoMethodError","","NoMethodError.html","","<p>Raised when a method is called on a receiver which doesn&#39;t have it\ndefined and also fails to respond …\n"],["NotImplementedError","","NotImplementedError.html","","<p>Raised when a feature is not implemented on the current platform. For\nexample, methods depending on the …\n"],["Numeric","","Numeric.html","","<p>Numeric is the class from which all higher-level numeric classes should\ninherit.\n<p>Numeric allows instantiation …\n"],["Object","","Object.html","","<p>Object is the default root of all Ruby objects.  Object inherits from\nBasicObject which allows creating …\n"],["ObjectSpace","","ObjectSpace.html","","<p>The ObjectSpace module contains a number of routines that interact with the\ngarbage collection facility …\n"],["ObjectSpace::WeakMap","","ObjectSpace/WeakMap.html","","<p>An ObjectSpace::WeakMap object holds references to any objects, but those\nobjects can get garbage collected. …\n"],["Pool","","Pool.html","",""],["Proc","","Proc.html","","<p>A <code>Proc</code> object is an encapsulation of a block of code, which\ncan be stored in a local variable, passed …\n"],["Process","","Process.html","","<p>The module contains several groups of functionality for handling OS\nprocesses:\n<p>Low-level property introspection …\n"],["Process::GID","","Process/GID.html","","<p>The Process::GID module contains a collection of module functions which can\nbe used to portably get, …\n"],["Process::Status","","Process/Status.html","","<p>Process::Status encapsulates the information on the status of a running or\nterminated system process. …\n"],["Process::Sys","","Process/Sys.html","","<p>The Process::Sys module contains UID and GID functions which provide direct\nbindings to the system calls …\n"],["Process::UID","","Process/UID.html","","<p>The Process::UID module contains a collection of module functions which can\nbe used to portably get, …\n"],["Queue","","Queue.html","","<p>The Queue class implements multi-producer, multi-consumer queues. It is\nespecially useful in threaded …\n"],["Random","","Random.html","","<p>Random provides an interface to Ruby&#39;s pseudo-random number generator,\nor PRNG.  The PRNG produces …\n"],["Random::Formatter","","Random/Formatter.html","","<p>Format raw random number as Random does\n"],["Range","","Range.html","","<p>A Range represents an interval—a set of values with a beginning and an end.\nRanges may be constructed …\n"],["RangeError","","RangeError.html","","<p>Raised when a given numerical value is out of range.\n\n<pre class=\"ruby\">[<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>].<span class=\"ruby-identifier\">drop</span>(<span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">&lt;&lt;</span> <span class=\"ruby-value\">100</span>)\n</pre>\n<p><em>raises the exception:</em>\n"],["Rational","","Rational.html","","<p>A rational number can be represented as a pair of integer numbers: a/b\n(b&gt;0), where a is the numerator …\n"],["Regexp","","Regexp.html","","<p>A Regexp holds a regular expression, used to match a pattern against\nstrings. Regexps are created using …\n"],["RegexpError","","RegexpError.html","","<p>Raised when given an invalid regexp expression.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Regexp</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;?&quot;</span>)\n</pre>\n<p><em>raises the exception:</em>\n"],["Ripper","","Ripper.html","",""],["RubyVM","","RubyVM.html","","<p>for ast.c\n<p>The RubyVM module only exists on MRI. <code>RubyVM</code> is not defined in\nother Ruby implementations such …\n"],["RubyVM::AbstractSyntaxTree","","RubyVM/AbstractSyntaxTree.html","","<p>AbstractSyntaxTree provides methods to parse Ruby code into abstract syntax\ntrees. The nodes in the tree …\n"],["RubyVM::AbstractSyntaxTree::Node","","RubyVM/AbstractSyntaxTree/Node.html","","<p>RubyVM::AbstractSyntaxTree::Node instances are created by parse methods in\nRubyVM::AbstractSyntaxTree …\n"],["RubyVM::InstructionSequence","","RubyVM/InstructionSequence.html","","<p>The InstructionSequence class represents a compiled sequence of\ninstructions for the Virtual Machine …\n"],["RubyVM::MJIT","","RubyVM/MJIT.html","","<p>::RubyVM::MJIT\n\n<pre>Provides access to the Method JIT compiler of MRI.\nOf course, this module is MRI specific.</pre>\n"],["RuntimeError","","RuntimeError.html","","<p>A generic error class raised when an invalid operation is attempted.\nKernel#raise will raise a RuntimeError …\n"],["ScriptError","","ScriptError.html","","<p>ScriptError is the superclass for errors raised when a script can not be\nexecuted because of a <code>LoadError</code> …\n"],["SecurityError","","SecurityError.html","","<p>No longer used by internal code.\n"],["Signal","","Signal.html","","<p>Many operating systems allow signals to be sent to running processes. Some\nsignals have a defined effect …\n"],["SignalException","","SignalException.html","","<p>Raised when a signal is received.\n\n<pre>begin\n  Process.kill(&#39;HUP&#39;,Process.pid)\n  sleep # wait for receiver ...</pre>\n"],["SizedQueue","","SizedQueue.html","","<p>This class represents queues of specified size capacity.  The push\noperation may be blocked if the capacity …\n"],["StandardError","","StandardError.html","","<p>The most standard error types are subclasses of StandardError. A rescue\nclause without an explicit Exception …\n"],["StopIteration","","StopIteration.html","","<p>Raised to stop the iteration, in particular by Enumerator#next. It is\nrescued by Kernel#loop.\n\n<pre>loop do ...</pre>\n"],["String","","String.html","","<p>A String object holds and manipulates an arbitrary sequence of bytes,\ntypically representing characters. …\n"],["Struct","","Struct.html","","<p>A Struct is a convenient way to bundle a number of attributes together,\nusing accessor methods, without …\n"],["Symbol","","Symbol.html","","<p>Symbol objects represent names inside the Ruby interpreter. They are\ngenerated using the <code>:name</code> and <code>:&quot;string&quot;</code>\n…\n"],["SyntaxError","","SyntaxError.html","","<p>Raised when encountering Ruby code with an invalid syntax.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">eval</span>(<span class=\"ruby-string\">&quot;1+1=2&quot;</span>)\n</pre>\n<p><em>raises the exception:</em>\n"],["SystemCallError","","SystemCallError.html","","<p>SystemCallError is the base class for all low-level platform-dependent\nerrors.\n<p>The errors available on …\n"],["SystemExit","","SystemExit.html","","<p>Raised by <code>exit</code> to initiate the termination of the script.\n"],["SystemStackError","","SystemStackError.html","","<p>Raised in case of a stack overflow.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">me_myself_and_i</span>\n  <span class=\"ruby-identifier\">me_myself_and_i</span>\n<span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-identifier\">me_myself_and_i</span>\n</pre>\n<p><em>raises the</em> …\n"],["Thread","","Thread.html","","<p>Threads are the Ruby implementation for a concurrent programming model.\n<p>Programs that require multiple …\n"],["Thread::Backtrace::Location","","Thread/Backtrace/Location.html","","<p>An object representation of a stack frame, initialized by\nKernel#caller_locations.\n<p>For example:\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># caller_locations.rb ...</span>\n</pre>\n"],["ThreadError","","ThreadError.html","","<p>Raised when an invalid operation is attempted on a thread.\n<p>For example, when no other thread has been …\n"],["ThreadGroup","","ThreadGroup.html","","<p>ThreadGroup provides a means of keeping track of a number of threads as a\ngroup.\n<p>A given Thread object …\n"],["Time","","Time.html","","<p>Time is an abstraction of dates and times. Time is stored internally as the\nnumber of seconds with fraction …\n"],["TracePoint","","TracePoint.html","","<p>Document-class: TracePoint\n<p>A class that provides the functionality of Kernel#set_trace_func in a nice\n…\n"],["TrueClass","","TrueClass.html","","<p>The global value <code>true</code> is the only instance of class TrueClass\nand represents a logically true value in …\n"],["TypeError","","TypeError.html","","<p>Raised when encountering an object that is not of the expected type.\n\n<pre class=\"ruby\">[<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>].<span class=\"ruby-identifier\">first</span>(<span class=\"ruby-string\">&quot;two&quot;</span>)\n</pre>\n<p><em>raises the</em> …\n"],["UnboundMethod","","UnboundMethod.html","","<p>Ruby supports two forms of objectified methods. Class Method is used to\nrepresent methods that are associated …\n"],["UncaughtThrowError","","UncaughtThrowError.html","","<p>Raised when <code>throw</code> is called with a <em>tag</em> which does not\nhave corresponding <code>catch</code> block.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">throw</span> <span class=\"ruby-string\">&quot;foo&quot;</span>, <span class=\"ruby-string\">&quot;bar&quot;</span>\n</pre>\n"],["UnicodeNormalize","","UnicodeNormalize.html","","<p>define UnicodeNormalize module here so that we don&#39;t have to look it up\n"],["Warning","","Warning.html","","<p>The Warning module contains a single method named #warn, and the module\nextends itself, making Warning.warn …\n"],["ZeroDivisionError","","ZeroDivisionError.html","","<p>Raised when attempting to divide an integer by 0.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">42</span> <span class=\"ruby-operator\">/</span> <span class=\"ruby-value\">0</span>   <span class=\"ruby-comment\">#=&gt; ZeroDivisionError: divided by 0</span>\n</pre>\n<p>Note that …\n"],["fatal","","fatal.html","","<p>fatal is an Exception that is raised when Ruby has encountered a fatal\nerror and must exit.\n"],["unknown","","unknown.html","",""],["!","BasicObject","BasicObject.html#method-i-21","()","<p>Boolean negate.\n"],["!=","BasicObject","BasicObject.html#method-i-21-3D","(p1)","<p>Returns true if two objects are not-equal, otherwise false.\n"],["!~","Object","Object.html#method-i-21-7E","(p1)","<p>Returns true if two objects do not match (using the <em>=~</em> method),\notherwise false.\n"],["%","Float","Float.html#method-i-25","(p1)","<p>Returns the modulo after division of <code>float</code> by\n<code>other</code>.\n\n<pre>6543.21.modulo(137)      #=&gt; 104.21000000000004\n6543.21.modulo(137.24) ...</pre>\n"],["%","Integer","Integer.html#method-i-25","(p1)","<p>Returns <code>int</code> modulo <code>other</code>.\n<p>See Numeric#divmod for more information.\n"],["%","Numeric","Numeric.html#method-i-25","(p1)","<p><code>x.modulo(y)</code> means <code>x-y*(x/y).floor</code>.\n<p>Equivalent to <code>num.divmod(numeric)[1]</code>.\n<p>See Numeric#divmod.\n"],["%","Range","Range.html#method-i-25","(p1)","<p>Iterates over the range, passing each <code>n</code>th element to the\nblock. If begin and end are numeric, <code>n</code> is added …\n"],["%","String","String.html#method-i-25","(p1)","<p>Format—Uses <em>str</em> as a format specification, and returns the result\nof applying it to <em>arg</em>. If the format …\n"],["&","Array","Array.html#method-i-26","(p1)","<p>Set Intersection — Returns a new array containing unique elements common to\nthe two arrays. The order …\n"],["&","FalseClass","FalseClass.html#method-i-26","(p1)","<p>And—Returns <code>false</code>. <em>obj</em> is always evaluated as it is\nthe argument to a method call—there is no short-circuit …\n"],["&","Integer","Integer.html#method-i-26","(p1)","<p>Bitwise AND.\n"],["&","NilClass","NilClass.html#method-i-26","(p1)","<p>And—Returns <code>false</code>. <em>obj</em> is always evaluated as it is\nthe argument to a method call—there is no short-circuit …\n"],["&","Process::Status","Process/Status.html#method-i-26","(p1)","<p>Logical AND of the bits in <em>stat</em> with <em>num</em>.\n\n<pre>fork { exit 0x37 }\nProcess.wait\nsprintf(&#39;%04x&#39;, $?.to_i)    ...</pre>\n"],["&","TrueClass","TrueClass.html#method-i-26","(p1)","<p>And—Returns <code>false</code> if <em>obj</em> is <code>nil</code> or\n<code>false</code>, <code>true</code> otherwise.\n"],["*","Array","Array.html#method-i-2A","(p1)","<p>Repetition — With a String argument, equivalent to\n<code>ary.join(str)</code>.\n<p>Otherwise, returns a new array built …\n"],["*","Complex","Complex.html#method-i-2A","(p1)","<p>Performs multiplication.\n\n<pre>Complex(2, 3)  * Complex(2, 3)   #=&gt; (-5+12i)\nComplex(900)   * Complex(1)    ...</pre>\n"],["*","Float","Float.html#method-i-2A","(p1)","<p>Returns a new Float which is the product of <code>float</code> and\n<code>other</code>.\n"],["*","Integer","Integer.html#method-i-2A","(p1)","<p>Performs multiplication: the class of the resulting object depends on the\nclass of <code>numeric</code>.\n"],["*","Rational","Rational.html#method-i-2A","(p1)","<p>Performs multiplication.\n\n<pre>Rational(2, 3)  * Rational(2, 3)   #=&gt; (4/9)\nRational(900)   * Rational(1)   ...</pre>\n"],["*","String","String.html#method-i-2A","(p1)","<p>Copy — Returns a new String containing <code>integer</code> copies of the\nreceiver. <code>integer</code> must be greater than …\n"],["**","Complex","Complex.html#method-i-2A-2A","(p1)","<p>Performs exponentiation.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-string\">&#39;i&#39;</span>) <span class=\"ruby-operator\">**</span> <span class=\"ruby-value\">2</span>              <span class=\"ruby-comment\">#=&gt; (-1+0i)</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">-8</span>) <span class=\"ruby-operator\">**</span> <span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">3</span>)  <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["**","Float","Float.html#method-i-2A-2A","(p1)","<p>Raises <code>float</code> to the power of <code>other</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">2.0</span><span class=\"ruby-operator\">**</span><span class=\"ruby-value\">3</span>   <span class=\"ruby-comment\">#=&gt; 8.0</span>\n</pre>\n"],["**","Integer","Integer.html#method-i-2A-2A","(p1)","<p>Raises <code>int</code> to the power of <code>numeric</code>, which may be\nnegative or fractional. The result may be an Integer …\n"],["**","Rational","Rational.html#method-i-2A-2A","(p1)","<p>Performs exponentiation.\n\n<pre>Rational(2)    ** Rational(3)     #=&gt; (8/1)\nRational(10)   ** -2             ...</pre>\n"],["+","Array","Array.html#method-i-2B","(p1)","<p>Concatenation — Returns a new array built by concatenating the two arrays\ntogether to produce a third …\n"],["+","Complex","Complex.html#method-i-2B","(p1)","<p>Performs addition.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)  <span class=\"ruby-operator\">+</span> <span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)   <span class=\"ruby-comment\">#=&gt; (4+6i)</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">900</span>)   <span class=\"ruby-operator\">+</span> <span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>)      <span class=\"ruby-comment\">#=&gt; (901+0i) ...</span>\n</pre>\n"],["+","Enumerator","Enumerator.html#method-i-2B","(p1)","<p>Returns an enumerator object generated from this enumerator and a given\nenumerable.\n\n<pre>e = (1..3).each + ...</pre>\n"],["+","Float","Float.html#method-i-2B","(p1)","<p>Returns a new Float which is the sum of <code>float</code> and\n<code>other</code>.\n"],["+","Integer","Integer.html#method-i-2B","(p1)","<p>Performs addition: the class of the resulting object depends on the class\nof <code>numeric</code>.\n"],["+","Rational","Rational.html#method-i-2B","(p1)","<p>Performs addition.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)  <span class=\"ruby-operator\">+</span> <span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)   <span class=\"ruby-comment\">#=&gt; (4/3)</span>\n<span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">900</span>)   <span class=\"ruby-operator\">+</span> <span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">1</span>)      <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["+","String","String.html#method-i-2B","(p1)","<p>Concatenation—Returns a new String containing <em>other_str</em>\nconcatenated to <em>str</em>.\n\n<pre>&quot;Hello from &quot; + self.to_s ...</pre>\n"],["+","Time","Time.html#method-i-2B","(p1)","<p>Addition — Adds some number of seconds (possibly fractional) to\n<em>time</em> and returns that value as a new …\n"],["+@","Numeric","Numeric.html#method-i-2B-40","()","<p>Unary Plus—Returns the receiver.\n"],["+@","String","String.html#method-i-2B-40","()","<p>If the string is frozen, then return duplicated mutable string.\n<p>If the string is not frozen, then return …\n"],["-","Array","Array.html#method-i-2D","(p1)","<p>Array Difference\n<p>Returns a new array that is a copy of the original array, removing all\noccurrences of …\n"],["-","Complex","Complex.html#method-i-2D","(p1)","<p>Performs subtraction.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)  <span class=\"ruby-operator\">-</span> <span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)   <span class=\"ruby-comment\">#=&gt; (0+0i)</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">900</span>)   <span class=\"ruby-operator\">-</span> <span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>)      <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["-","Float","Float.html#method-i-2D","(p1)","<p>Returns a new Float which is the difference of <code>float</code> and\n<code>other</code>.\n"],["-","Integer","Integer.html#method-i-2D","(p1)","<p>Performs subtraction: the class of the resulting object depends on the\nclass of <code>numeric</code>.\n"],["-","Rational","Rational.html#method-i-2D","(p1)","<p>Performs subtraction.\n\n<pre>Rational(2, 3)  - Rational(2, 3)   #=&gt; (0/1)\nRational(900)   - Rational(1)      ...</pre>\n"],["-","Time","Time.html#method-i-2D","(p1)","<p>Difference — Returns a difference in seconds as a Float between\n<em>time</em> and <code>other_time</code>, or subtracts the …\n"],["-@","Complex","Complex.html#method-i-2D-40","()","<p>Returns negation of the value.\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">-</span><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>)  <span class=\"ruby-comment\">#=&gt; (-1-2i)</span>\n</pre>\n"],["-@","Float","Float.html#method-i-2D-40","()","<p>Returns <code>float</code>, negated.\n"],["-@","Integer","Integer.html#method-i-2D-40","()","<p>Returns <code>int</code>, negated.\n"],["-@","Numeric","Numeric.html#method-i-2D-40","()","<p>Unary Minus—Returns the receiver, negated.\n"],["-@","Rational","Rational.html#method-i-2D-40","()","<p>Negates <code>rat</code>.\n"],["-@","String","String.html#method-i-2D-40","()","<p>Returns a frozen, possibly pre-existing copy of the string.\n<p>The string will be deduplicated as long as …\n"],["/","Complex","Complex.html#method-i-2F","(p1)","<p>Performs division.\n\n<pre>Complex(2, 3)  / Complex(2, 3)   #=&gt; ((1/1)+(0/1)*i)\nComplex(900)   / Complex(1)   ...</pre>\n"],["/","Float","Float.html#method-i-2F","(p1)","<p>Returns a new Float which is the result of dividing <code>float</code> by\n<code>other</code>.\n"],["/","Integer","Integer.html#method-i-2F","(p1)","<p>Performs division: the class of the resulting object depends on the class\nof <code>numeric</code>.\n"],["/","Rational","Rational.html#method-i-2F","(p1)","<p>Performs division.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)  <span class=\"ruby-operator\">/</span> <span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)   <span class=\"ruby-comment\">#=&gt; (1/1)</span>\n<span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">900</span>)   <span class=\"ruby-operator\">/</span> <span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">1</span>)      <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["/","String","String.html#method-i-2F","(p1 = v1, p2 = v2)",""],["<","Comparable","Comparable.html#method-i-3C","(p1)","<p>Compares two objects based on the receiver&#39;s <code>&lt;=&gt;</code>\nmethod, returning true if it returns a value …\n"],["<","Float","Float.html#method-i-3C","(p1)","<p>Returns <code>true</code> if <code>float</code> is less than\n<code>real</code>.\n<p>The result of <code>NaN &lt; NaN</code> is undefined, so an\nimplementation-dependent …\n"],["<","Hash","Hash.html#method-i-3C","(p1)","<p>Returns <code>true</code> if <em>hash</em> is subset of <em>other</em>.\n\n<pre>h1 = {a:1, b:2}\nh2 = {a:1, b:2, c:3}\nh1 &lt; h2    #=&gt; true\nh2 &lt; ...</pre>\n"],["<","Integer","Integer.html#method-i-3C","(p1)","<p>Returns <code>true</code> if the value of <code>int</code> is less than\nthat of <code>real</code>.\n"],["<","Module","Module.html#method-i-3C","(p1)","<p>Returns true if <em>mod</em> is a subclass of <em>other</em>. Returns\n<code>nil</code> if there&#39;s no relationship between the two. …\n"],["<<","Array","Array.html#method-i-3C-3C","(p1)","<p>Append—Pushes the given object on to the end of this array. This expression\nreturns the array itself, …\n"],["<<","IO","IO.html#method-i-3C-3C","(p1)","<p>String Output—Writes <em>obj</em> to <em>ios</em>. <em>obj</em> will be\nconverted to a string using <code>to_s</code>.\n\n<pre>$stdout &lt;&lt; &quot;Hello &quot; &lt;&lt; ...</pre>\n"],["<<","Integer","Integer.html#method-i-3C-3C","(p1)","<p>Returns <code>int</code> shifted left <code>count</code> positions, or\nright if <code>count</code> is negative.\n"],["<<","Method","Method.html#method-i-3C-3C","(p1)","<p>Returns a proc that is the composition of this method and the given\n<em>g</em>. The returned proc takes a variable …\n"],["<<","Proc","Proc.html#method-i-3C-3C","(p1)","<p>Returns a proc that is the composition of this proc and the given\n<em>g</em>. The returned proc takes a variable …\n"],["<<","Queue","Queue.html#method-i-3C-3C","(p1)",""],["<<","SizedQueue","SizedQueue.html#method-i-3C-3C","(*args)",""],["<<","String","String.html#method-i-3C-3C","(p1)","<p>Appends the given object to <em>str</em>. If the object is an Integer, it\nis considered a codepoint and converted …\n"],["<=","Comparable","Comparable.html#method-i-3C-3D","(p1)","<p>Compares two objects based on the receiver&#39;s <code>&lt;=&gt;</code>\nmethod, returning true if it returns a value …\n"],["<=","Float","Float.html#method-i-3C-3D","(p1)","<p>Returns <code>true</code> if <code>float</code> is less than or equal to\n<code>real</code>.\n<p>The result of <code>NaN &lt;= NaN</code> is undefined, so an\nimplementation-dependent …\n"],["<=","Hash","Hash.html#method-i-3C-3D","(p1)","<p>Returns <code>true</code> if <em>hash</em> is subset of <em>other</em> or\nequals to <em>other</em>.\n\n<pre>h1 = {a:1, b:2}\nh2 = {a:1, b:2, c:3}\nh1 &lt;= ...</pre>\n"],["<=","Integer","Integer.html#method-i-3C-3D","(p1)","<p>Returns <code>true</code> if the value of <code>int</code> is less than or\nequal to that of <code>real</code>.\n"],["<=","Module","Module.html#method-i-3C-3D","(p1)","<p>Returns true if <em>mod</em> is a subclass of <em>other</em> or is the same\nas <em>other</em>. Returns <code>nil</code> if there&#39;s no relationship\n…\n"],["<=>","Array","Array.html#method-i-3C-3D-3E","(p1)","<p>Comparison — Returns an integer (<code>-1</code>, <code>0</code>, or\n<code>+1</code>) if this array is less than, equal to, or greater than …\n"],["<=>","Complex","Complex.html#method-i-3C-3D-3E","(p1)","<p>If <code>cmp</code>&#39;s imaginary part is zero, and <code>object</code>\nis also a real number (or a Complex number where the …\n"],["<=>","File::Stat","File/Stat.html#method-i-3C-3D-3E","(p1)","<p>Compares File::Stat objects by comparing their respective modification\ntimes.\n<p><code>nil</code> is returned if <code>other_stat</code> …\n"],["<=>","Float","Float.html#method-i-3C-3D-3E","(p1)","<p>Returns -1, 0, or +1 depending on whether <code>float</code> is less than,\nequal to, or greater than <code>real</code>. This is …\n"],["<=>","Integer","Integer.html#method-i-3C-3D-3E","(p1)","<p>Comparison—Returns -1, 0, or +1 depending on whether <code>int</code> is\nless than, equal to, or greater than <code>numeric</code> …\n"],["<=>","Module","Module.html#method-i-3C-3D-3E","(p1)","<p>Comparison—Returns -1, 0, +1 or nil depending on whether\n<code>module</code> includes <code>other_module</code>, they are the …\n"],["<=>","Numeric","Numeric.html#method-i-3C-3D-3E","(p1)","<p>Returns zero if <code>number</code> equals <code>other</code>, otherwise\nreturns <code>nil</code>.\n"],["<=>","Object","Object.html#method-i-3C-3D-3E","(p1)","<p>Returns 0 if <code>obj</code> and <code>other</code> are the same object or\n<code>obj == other</code>, otherwise nil.\n<p>The #&lt;=&gt; is used …\n"],["<=>","Rational","Rational.html#method-i-3C-3D-3E","(p1)","<p>Returns -1, 0, or +1 depending on whether <code>rational</code> is less\nthan, equal to, or greater than <code>numeric</code>.\n<p><code>nil</code> …\n"],["<=>","String","String.html#method-i-3C-3D-3E","(p1)","<p>Comparison—Returns -1, 0, +1, or <code>nil</code> depending on whether\n<code>string</code> is less than, equal to, or greater …\n"],["<=>","Symbol","Symbol.html#method-i-3C-3D-3E","(p1)","<p>Compares <code>symbol</code> with <code>other_symbol</code> after calling\n#to_s on each of the symbols. Returns -1, 0, +1, or  …\n"],["<=>","Time","Time.html#method-i-3C-3D-3E","(p1)","<p>Comparison—Compares <code>time</code> with <code>other_time</code>.\n<p>-1, 0, +1 or nil depending on whether <code>time</code> is less  than, …\n"],["==","Array","Array.html#method-i-3D-3D","(p1)","<p>Equality — Two arrays are equal if they contain the same number of elements\nand if each element is …\n"],["==","BasicObject","BasicObject.html#method-i-3D-3D","(p1)","<p>Equality — At the Object level, #== returns <code>true</code> only if\n<code>obj</code> and <code>other</code> are the same object.  Typically …\n"],["==","Comparable","Comparable.html#method-i-3D-3D","(p1)","<p>Compares two objects based on the receiver&#39;s <code>&lt;=&gt;</code>\nmethod, returning true if it returns 0. Also …\n"],["==","Complex","Complex.html#method-i-3D-3D","(p1)","<p>Returns true if cmp equals object numerically.\n\n<pre>Complex(2, 3)  == Complex(2, 3)   #=&gt; true\nComplex(5)  ...</pre>\n"],["==","Encoding::Converter","Encoding/Converter.html#method-i-3D-3D","(p1)",""],["==","Enumerator::ArithmeticSequence","Enumerator/ArithmeticSequence.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> only if <code>obj</code> is an\nEnumerator::ArithmeticSequence, has equivalent begin, end, step, and  …\n"],["==","Exception","Exception.html#method-i-3D-3D","(p1)","<p>Equality—If <em>obj</em> is not an Exception, returns <code>false</code>.\nOtherwise, returns <code>true</code> if <em>exc</em> and <em>obj</em> share\nsame …\n"],["==","Float","Float.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> only if <code>obj</code> has the same value as\n<code>float</code>. Contrast this with Float#eql?, which requires  …\n"],["==","Hash","Hash.html#method-i-3D-3D","(p1)","<p>Equality—Two hashes are equal if they each contain the same number of keys\nand if each key-value pair …\n"],["==","Integer","Integer.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> if <code>int</code> equals <code>other</code>\nnumerically. Contrast this with Integer#eql?, which requires\n<code>other</code> to …\n"],["==","MatchData","MatchData.html#method-i-3D-3D","(p1)","<p>Equality—Two matchdata are equal if their target strings, patterns, and\nmatched positions are identical. …\n"],["==","Method","Method.html#method-i-3D-3D","(p1)","<p>Two method objects are equal if they are bound to the same object and refer\nto the same method definition …\n"],["==","Module","Module.html#method-i-3D-3D","(p1)","<p>Equality — At the Object level, #== returns <code>true</code> only if\n<code>obj</code> and <code>other</code> are the same object.  Typically …\n"],["==","Process::Status","Process/Status.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> if the integer value of <em>stat</em> equals\n<em>other</em>.\n"],["==","Random","Random.html#method-i-3D-3D","(p1)","<p>Returns true if the two generators have the same internal state, otherwise\nfalse.  Equivalent generators …\n"],["==","Range","Range.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> only if <code>obj</code> is a Range, has\nequivalent begin and end items (by comparing them with <code>==</code>), …\n"],["==","Rational","Rational.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> if <code>rat</code> equals <code>object</code>\nnumerically.\n\n<pre>Rational(2, 3)  == Rational(2, 3)   #=&gt; true\nRational(5) ...</pre>\n"],["==","Regexp","Regexp.html#method-i-3D-3D","(p1)","<p>Equality—Two regexps are equal if their patterns are identical, they have\nthe same character set code, …\n"],["==","String","String.html#method-i-3D-3D","(p1)","<p>Equality—Returns whether <code>str</code> == <code>obj</code>, similar to\nObject#==.\n<p>If <code>obj</code> is not an instance of String but responds …\n"],["==","Struct","Struct.html#method-i-3D-3D","(p1)","<p>Equality—Returns <code>true</code> if <code>other</code> has the same\nstruct subclass and has equal member values (according …\n"],["==","Symbol","Symbol.html#method-i-3D-3D","(p1)","<p>Equality—If <em>sym</em> and <em>obj</em> are exactly the same symbol,\nreturns <code>true</code>.\n"],["==","UnboundMethod","UnboundMethod.html#method-i-3D-3D","(p1)","<p>Two method objects are equal if they are bound to the same object and refer\nto the same method definition …\n"],["===","Enumerator::ArithmeticSequence","Enumerator/ArithmeticSequence.html#method-i-3D-3D-3D","(p1)","<p>Returns <code>true</code> only if <code>obj</code> is an\nEnumerator::ArithmeticSequence, has equivalent begin, end, step, and  …\n"],["===","FalseClass","FalseClass.html#method-i-3D-3D-3D","(p1)","<p>Case Equality – For class Object, effectively the same as calling\n<code>#==</code>, but typically overridden by descendants …\n"],["===","Float","Float.html#method-i-3D-3D-3D","(p1)","<p>Returns <code>true</code> only if <code>obj</code> has the same value as\n<code>float</code>. Contrast this with Float#eql?, which requires  …\n"],["===","Integer","Integer.html#method-i-3D-3D-3D","(p1)","<p>Returns <code>true</code> if <code>int</code> equals <code>other</code>\nnumerically. Contrast this with Integer#eql?, which requires\n<code>other</code> to …\n"],["===","Method","Method.html#method-i-3D-3D-3D","(*args)","<p>Invokes the method with <code>obj</code> as the parameter like #call. This\nallows a method object to be the target …\n"],["===","Module","Module.html#method-i-3D-3D-3D","(p1)","<p>Case Equality—Returns <code>true</code> if <em>obj</em> is an instance of\n<em>mod</em> or an instance of one of <em>mod</em>&#39;s descendants. …\n"],["===","NilClass","NilClass.html#method-i-3D-3D-3D","(p1)","<p>Case Equality – For class Object, effectively the same as calling\n<code>#==</code>, but typically overridden by descendants …\n"],["===","Object","Object.html#method-i-3D-3D-3D","(p1)","<p>Case Equality – For class Object, effectively the same as calling\n<code>#==</code>, but typically overridden by descendants …\n"],["===","Proc","Proc.html#method-i-3D-3D-3D","(*args)","<p>Invokes the block with <code>obj</code> as the proc&#39;s parameter like\nProc#call. This allows a proc object to be …\n"],["===","Range","Range.html#method-i-3D-3D-3D","(p1)","<p>Returns <code>true</code> if <code>obj</code> is between begin and end of\nrange, <code>false</code> otherwise (same as #cover?). Conveniently …\n"],["===","Regexp","Regexp.html#method-i-3D-3D-3D","(p1)","<p>Case Equality—Used in case statements.\n\n<pre>a = &quot;HELLO&quot;\ncase a\nwhen /\\A[a-z]*\\z/; print &quot;Lower case\\n&quot;\nwhen ...</pre>\n"],["===","String","String.html#method-i-3D-3D-3D","(p1)","<p>Equality—Returns whether <code>str</code> == <code>obj</code>, similar to\nObject#==.\n<p>If <code>obj</code> is not an instance of String but responds …\n"],["===","Symbol","Symbol.html#method-i-3D-3D-3D","(p1)","<p>Equality—If <em>sym</em> and <em>obj</em> are exactly the same symbol,\nreturns <code>true</code>.\n"],["===","SystemCallError","SystemCallError.html#method-c-3D-3D-3D","(p1)","<p>Return <code>true</code> if the receiver is a generic\n<code>SystemCallError</code>, or if the error numbers <code>self</code> and\n<em>other</em> are …\n"],["===","TrueClass","TrueClass.html#method-i-3D-3D-3D","(p1)","<p>Case Equality – For class Object, effectively the same as calling\n<code>#==</code>, but typically overridden by descendants …\n"],["=~","NilClass","NilClass.html#method-i-3D-7E","(p1)","<p>Dummy pattern matching – always returns nil.\n"],["=~","Object","Object.html#method-i-3D-7E","(p1)","<p>This method is deprecated.\n<p>This is not only unuseful but also troublesome because it may hide a type\nerror. …\n"],["=~","Regexp","Regexp.html#method-i-3D-7E","(p1)","<p>Match—Matches <em>rxp</em> against <em>str</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-regexp\">/at/</span> <span class=\"ruby-operator\">=~</span> <span class=\"ruby-string\">&quot;input data&quot;</span>   <span class=\"ruby-comment\">#=&gt; 7</span>\n<span class=\"ruby-regexp\">/ax/</span> <span class=\"ruby-operator\">=~</span> <span class=\"ruby-string\">&quot;input data&quot;</span>   <span class=\"ruby-comment\">#=&gt; nil</span>\n</pre>\n<p>If <code>=~</code> is used …\n"],["=~","String","String.html#method-i-3D-7E","(p1)","<p>Match—If <em>obj</em> is a Regexp, use it as a pattern to match against\n<em>str</em>,and returns the position the match …\n"],["=~","Symbol","Symbol.html#method-i-3D-7E","(p1)","<p>Returns <code>sym.to_s =~ obj</code>.\n"],[">","Comparable","Comparable.html#method-i-3E","(p1)","<p>Compares two objects based on the receiver&#39;s <code>&lt;=&gt;</code>\nmethod, returning true if it returns a value …\n"],[">","Float","Float.html#method-i-3E","(p1)","<p>Returns <code>true</code> if <code>float</code> is greater than\n<code>real</code>.\n<p>The result of <code>NaN &gt; NaN</code> is undefined, so an\nimplementation-dependent …\n"],[">","Hash","Hash.html#method-i-3E","(p1)","<p>Returns <code>true</code> if <em>other</em> is subset of <em>hash</em>.\n\n<pre>h1 = {a:1, b:2}\nh2 = {a:1, b:2, c:3}\nh1 &gt; h2    #=&gt; false\nh2 ...</pre>\n"],[">","Integer","Integer.html#method-i-3E","(p1)","<p>Returns <code>true</code> if the value of <code>int</code> is greater than\nthat of <code>real</code>.\n"],[">","Module","Module.html#method-i-3E","(p1)","<p>Returns true if <em>mod</em> is an ancestor of <em>other</em>. Returns\n<code>nil</code> if there&#39;s no relationship between the two. …\n"],[">=","Comparable","Comparable.html#method-i-3E-3D","(p1)","<p>Compares two objects based on the receiver&#39;s <code>&lt;=&gt;</code>\nmethod, returning true if it returns a value …\n"],[">=","Float","Float.html#method-i-3E-3D","(p1)","<p>Returns <code>true</code> if <code>float</code> is greater than or equal to\n<code>real</code>.\n<p>The result of <code>NaN &gt;= NaN</code> is undefined, so an …\n"],[">=","Hash","Hash.html#method-i-3E-3D","(p1)","<p>Returns <code>true</code> if <em>other</em> is subset of <em>hash</em> or\nequals to <em>hash</em>.\n\n<pre>h1 = {a:1, b:2}\nh2 = {a:1, b:2, c:3}\nh1 &gt;= ...</pre>\n"],[">=","Integer","Integer.html#method-i-3E-3D","(p1)","<p>Returns <code>true</code> if the value of <code>int</code> is greater than\nor equal to that of <code>real</code>.\n"],[">=","Module","Module.html#method-i-3E-3D","(p1)","<p>Returns true if <em>mod</em> is an ancestor of <em>other</em>, or the two\nmodules are the same. Returns <code>nil</code> if there&#39;s …\n"],[">>","Integer","Integer.html#method-i-3E-3E","(p1)","<p>Returns <code>int</code> shifted right <code>count</code> positions, or\nleft if <code>count</code> is negative.\n"],[">>","Method","Method.html#method-i-3E-3E","(p1)","<p>Returns a proc that is the composition of this method and the given\n<em>g</em>. The returned proc takes a variable …\n"],[">>","Proc","Proc.html#method-i-3E-3E","(p1)","<p>Returns a proc that is the composition of this proc and the given\n<em>g</em>. The returned proc takes a variable …\n"],[">>","Process::Status","Process/Status.html#method-i-3E-3E","(p1)","<p>Shift the bits in <em>stat</em> right <em>num</em> places.\n\n<pre>fork { exit 99 }   #=&gt; 26563\nProcess.wait       #=&gt; 26563\n$?.to_i ...</pre>\n"],["Array","Kernel","Kernel.html#method-i-Array","(p1)","<p>Returns <code>arg</code> as an Array.\n<p>First tries to call <code>to_ary</code> on <code>arg</code>, then\n<code>to_a</code>. If <code>arg</code> does not respond to\n<code>to_ary</code> …\n"],["Complex","Kernel","Kernel.html#method-i-Complex","(p1, p2 = v2, p3 = {})","<p>Returns x+i*y;\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>)    <span class=\"ruby-comment\">#=&gt; (1+2i)</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-string\">&#39;1+2i&#39;</span>)  <span class=\"ruby-comment\">#=&gt; (1+2i)</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-keyword\">nil</span>)     <span class=\"ruby-comment\">#=&gt; TypeError ...</span>\n</pre>\n"],["DEBUG","Thread","Thread.html#method-c-DEBUG","()","<p>Returns the thread debug level.  Available only if compiled with\nTHREAD_DEBUG=-1.\n"],["DEBUG=","Thread","Thread.html#method-c-DEBUG-3D","(p1)","<p>Sets the thread debug level.  Available only if compiled with\nTHREAD_DEBUG=-1.\n"],["Float","Kernel","Kernel.html#method-i-Float","(p1, p2 = {})","<p>Returns <em>arg</em> converted to a float. Numeric types are converted\ndirectly, and with exception to String …\n"],["Hash","Kernel","Kernel.html#method-i-Hash","(p1)","<p>Converts <em>arg</em> to a Hash by calling\n<em>arg</em><code>.to_hash</code>. Returns an empty Hash when <em>arg</em>\nis <code>nil</code> or <code>[]</code>.\n\n<pre>Hash([])  ...</pre>\n"],["Integer","Kernel","Kernel.html#method-i-Integer","(*args)","<p>Converts <em>arg</em> to an Integer. Numeric types are converted directly\n(with floating point numbers being truncated). …\n"],["Rational","Kernel","Kernel.html#method-i-Rational","(p1, p2 = v2, p3 = {})","<p>Returns <code>x/y</code> or <code>arg</code> as a Rational.\n\n<pre>Rational(2, 3)   #=&gt; (2/3)\nRational(5)      #=&gt; (5/1)\nRational(0.5) ...</pre>\n"],["String","Kernel","Kernel.html#method-i-String","(p1)","<p>Returns <em>arg</em> as a String.\n<p>First tries to call its <code>to_str</code> method, then its\n<code>to_s</code> method.\n\n<pre>String(self)     ...</pre>\n"],["[]","Array","Array.html#method-c-5B-5D","(*args)","<p>Returns a new array populated with the given objects.\n\n<pre>Array.[]( 1, &#39;a&#39;, /^A/)  # =&gt; [1, &quot;a&quot;, /^A/]\nArray[ ...</pre>\n"],["[]","Array","Array.html#method-i-5B-5D","(*args)","<p>Element Reference — Returns the element at <code>index</code>, or returns a\nsubarray starting at the <code>start</code> index …\n"],["[]","Continuation","Continuation.html#method-i-5B-5D","(*args)","<p>Invokes the continuation. The program continues from the end of the #callcc\nblock. If no arguments are …\n"],["[]","Dir","Dir.html#method-c-5B-5D","(*args, p2 = {})","<p>Equivalent to calling <code>Dir.glob([string,...], 0)</code>.\n"],["[]","ENV","ENV.html#method-c-5B-5D","(p1)","<p>Returns the value for the environment variable <code>name</code> if it\nexists:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ENV</span>[<span class=\"ruby-string\">&#39;foo&#39;</span>] = <span class=\"ruby-string\">&#39;0&#39;</span>\n<span class=\"ruby-constant\">ENV</span>[<span class=\"ruby-string\">&#39;foo&#39;</span>] <span class=\"ruby-comment\"># =&gt; &quot;0&quot;</span>\n</pre>\n"],["[]","Hash","Hash.html#method-c-5B-5D","(*args)","<p>Creates a new hash populated with the given objects.\n<p>Similar to the literal <code>{ <em>key</em> =&gt; <em>value</em>, ...\n}</code>. …\n"],["[]","Hash","Hash.html#method-i-5B-5D","(p1)","<p>Element Reference—Retrieves the <em>value</em> object corresponding to the\n<em>key</em> object. If not found, returns …\n"],["[]","Integer","Integer.html#method-i-5B-5D","(*args)","<p>Bit Reference—Returns the <code>n</code>th bit in the binary representation\nof <code>int</code>, where <code>int[0]</code> is the least significant …\n"],["[]","MatchData","MatchData.html#method-i-5B-5D","(p1, p2 = v2)","<p>Match Reference – MatchData acts as an array, and may be accessed using the\nnormal array indexing techniques. …\n"],["[]","Method","Method.html#method-i-5B-5D","(*args)","<p>Invokes the <em>meth</em> with the specified arguments, returning the\nmethod&#39;s return value.\n\n<pre>m = 12.method(&quot;+&quot;) ...</pre>\n"],["[]","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-5B-5D","(p1)","<p>Retrieves a weakly referenced object with the given key\n"],["[]","Proc","Proc.html#method-i-5B-5D","(*args)","<p>Invokes the block, setting the block&#39;s parameters to the values in\n<em>params</em> using something close to …\n"],["[]","String","String.html#method-i-5B-5D","(*args)","<p>Element Reference — If passed a single <code>index</code>, returns a\nsubstring of one character at that index.  …\n"],["[]","Struct","Struct.html#method-i-5B-5D","(p1)","<p>Attribute Reference—Returns the value of the given struct\n<code>member</code> or the member at the given <code>index</code>. …\n"],["[]","Symbol","Symbol.html#method-i-5B-5D","(*args)","<p>Returns <code>sym.to_s[]</code>.\n"],["[]","Thread","Thread.html#method-i-5B-5D","(p1)","<p>Attribute Reference—Returns the value of a fiber-local variable (current\nthread&#39;s root fiber if …\n"],["[]","Warning","Warning.html#method-c-5B-5D","(p1)","<p>call-seq\n\n<pre>Warning[category]  -&gt; true or false</pre>\n<p>Returns the flag to show the warning messages for <code>category</code> …\n"],["[]=","Array","Array.html#method-i-5B-5D-3D","(*args)","<p>Element Assignment — Sets the element at <code>index</code>, or replaces a\nsubarray from the <code>start</code> index for <code>length</code> …\n"],["[]=","ENV","ENV.html#method-c-5B-5D-3D","(p1, p2)","<p>ENV.store is an alias for ENV.[]=.\n<p>Creates, updates, or deletes the named environment variable, returning …\n"],["[]=","Hash","Hash.html#method-i-5B-5D-3D","(p1, p2)","<p>Element Assignment\n<p>Associates the value given by <code>value</code> with the key given by\n<code>key</code>.\n\n<pre>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; ...</pre>\n"],["[]=","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-5B-5D-3D","(p1, p2)","<p>Creates a weak reference from the given key to the given value\n"],["[]=","String","String.html#method-i-5B-5D-3D","(*args)","<p>Element Assignment—Replaces some or all of the content of <em>str</em>. The\nportion of the string affected is …\n"],["[]=","Struct","Struct.html#method-i-5B-5D-3D","(p1, p2)","<p>Attribute Assignment—Sets the value of the given struct <code>member</code>\nor the member at the given <code>index</code>.   …\n"],["[]=","Thread","Thread.html#method-i-5B-5D-3D","(p1, p2)","<p>Attribute Assignment—Sets or creates the value of a fiber-local variable,\nusing either a symbol or …\n"],["[]=","Warning","Warning.html#method-c-5B-5D-3D","(p1, p2)","<p>call-seq\n\n<pre>Warning[category] = flag -&gt; flag</pre>\n<p>Sets the warning flags for <code>category</code>. See Warning.[] for the\ncategories. …\n"],["^","FalseClass","FalseClass.html#method-i-5E","(p1)","<p>Exclusive Or—If <em>obj</em> is <code>nil</code> or <code>false</code>,\nreturns <code>false</code>; otherwise, returns <code>true</code>.\n"],["^","Integer","Integer.html#method-i-5E","(p1)","<p>Bitwise EXCLUSIVE OR.\n"],["^","NilClass","NilClass.html#method-i-5E","(p1)","<p>Exclusive Or—If <em>obj</em> is <code>nil</code> or <code>false</code>,\nreturns <code>false</code>; otherwise, returns <code>true</code>.\n"],["^","TrueClass","TrueClass.html#method-i-5E","(p1)","<p>Exclusive Or—Returns <code>true</code> if <em>obj</em> is <code>nil</code>\nor <code>false</code>, <code>false</code> otherwise.\n"],["__callee__","Kernel","Kernel.html#method-i-__callee__","()","<p>Returns the called name of the current method as a Symbol. If called\noutside of a method, it returns …\n"],["__dir__","Kernel","Kernel.html#method-i-__dir__","()","<p>Returns the canonicalized absolute path of the directory of the file from\nwhich this method is called. …\n"],["__id__","BasicObject","BasicObject.html#method-i-__id__","()","<p>Returns an integer identifier for <code>obj</code>.\n<p>The same number will be returned on all calls to <code>object_id</code> for\n…\n"],["__method__","Kernel","Kernel.html#method-i-__method__","()","<p>Returns the name at the definition of the current method as a Symbol. If\ncalled outside of a method, …\n"],["__send__","BasicObject","BasicObject.html#method-i-__send__","(*args)","<p>Invokes the method identified by <em>symbol</em>, passing it any arguments\nspecified. You can use <code>__send__</code> if …\n"],["_enumerable_collect","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_collect","()",""],["_enumerable_collect_concat","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_collect_concat","()",""],["_enumerable_drop","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_drop","(p1)",""],["_enumerable_drop_while","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_drop_while","()",""],["_enumerable_filter","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_filter","()",""],["_enumerable_filter_map","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_filter_map","()",""],["_enumerable_find_all","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_find_all","()",""],["_enumerable_flat_map","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_flat_map","()",""],["_enumerable_grep","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_grep","(p1)",""],["_enumerable_grep_v","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_grep_v","(p1)",""],["_enumerable_map","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_map","()",""],["_enumerable_reject","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_reject","()",""],["_enumerable_select","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_select","()",""],["_enumerable_take","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_take","(p1)",""],["_enumerable_take_while","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_take_while","()",""],["_enumerable_uniq","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_uniq","()",""],["_enumerable_with_index","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_with_index","(*args)","<p>Iterates the given block for each element with an index, which starts from\n<code>offset</code>.  If no block is given, …\n"],["_enumerable_zip","Enumerator::Lazy","Enumerator/Lazy.html#method-i-_enumerable_zip","(*args)",""],["_id2ref","ObjectSpace","ObjectSpace.html#method-c-_id2ref","(p1)",""],["`","Kernel","Kernel.html#method-i-60","(p1)","<p>Returns the standard output of running <em>cmd</em> in a subshell. The\nbuilt-in syntax <code>%x{...}</code> uses this method. …\n"],["abort","Kernel","Kernel.html#method-i-abort","(*args)",""],["abort","Process","Process.html#method-c-abort","(*args)",""],["abort_on_exception","Thread","Thread.html#method-c-abort_on_exception","()","<p>Returns the status of the global “abort on exception&#39;&#39; condition.\n<p>The default is <code>false</code>.\n<p>When set …\n"],["abort_on_exception","Thread","Thread.html#method-i-abort_on_exception","()","<p>Returns the status of the thread-local “abort on exception&#39;&#39;\ncondition for this <code>thr</code>.\n<p>The default …\n"],["abort_on_exception=","Thread","Thread.html#method-c-abort_on_exception-3D","(p1)","<p>When set to <code>true</code>, if any thread is aborted by an exception,\nthe raised exception will be re-raised in …\n"],["abort_on_exception=","Thread","Thread.html#method-i-abort_on_exception-3D","(p1)","<p>When set to <code>true</code>, if this <code>thr</code> is aborted by an\nexception, the raised exception will be re-raised in the …\n"],["abs","Complex","Complex.html#method-i-abs","()","<p>Returns the absolute part of its polar form.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">-1</span>).<span class=\"ruby-identifier\">abs</span>         <span class=\"ruby-comment\">#=&gt; 1</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">3.0</span>, <span class=\"ruby-value\">-4.0</span>).<span class=\"ruby-identifier\">abs</span>  <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["abs","Float","Float.html#method-i-abs","()","<p>Returns the absolute value of <code>float</code>.\n\n<pre>(-34.56).abs   #=&gt; 34.56\n-34.56.abs     #=&gt; 34.56\n34.56.abs      ...</pre>\n"],["abs","Integer","Integer.html#method-i-abs","()","<p>Returns the absolute value of <code>int</code>.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">-12345</span>).<span class=\"ruby-identifier\">abs</span>   <span class=\"ruby-comment\">#=&gt; 12345</span>\n<span class=\"ruby-value\">-12345</span>.<span class=\"ruby-identifier\">abs</span>     <span class=\"ruby-comment\">#=&gt; 12345</span>\n<span class=\"ruby-value\">12345</span>.<span class=\"ruby-identifier\">abs</span>      <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["abs","Numeric","Numeric.html#method-i-abs","()","<p>Returns the absolute value of <code>num</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">12</span>.<span class=\"ruby-identifier\">abs</span>         <span class=\"ruby-comment\">#=&gt; 12</span>\n(<span class=\"ruby-value\">-34.56</span>).<span class=\"ruby-identifier\">abs</span>   <span class=\"ruby-comment\">#=&gt; 34.56</span>\n<span class=\"ruby-value\">-34.56</span>.<span class=\"ruby-identifier\">abs</span>     <span class=\"ruby-comment\">#=&gt; 34.56</span>\n</pre>\n"],["abs","Rational","Rational.html#method-i-abs","()","<p>Returns the absolute value of <code>rat</code>.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">/</span><span class=\"ruby-value\">2</span><span class=\"ruby-identifier\">r</span>).<span class=\"ruby-identifier\">abs</span>    <span class=\"ruby-comment\">#=&gt; (1/2)</span>\n(<span class=\"ruby-value\">-1</span><span class=\"ruby-operator\">/</span><span class=\"ruby-value\">2</span><span class=\"ruby-identifier\">r</span>).<span class=\"ruby-identifier\">abs</span>   <span class=\"ruby-comment\">#=&gt; (1/2)</span>\n</pre>\n<p>Rational#magnitude is …\n"],["abs2","Complex","Complex.html#method-i-abs2","()","<p>Returns square of the absolute value.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">-1</span>).<span class=\"ruby-identifier\">abs2</span>         <span class=\"ruby-comment\">#=&gt; 1</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">3.0</span>, <span class=\"ruby-value\">-4.0</span>).<span class=\"ruby-identifier\">abs2</span>  <span class=\"ruby-comment\">#=&gt; 25.0</span>\n</pre>\n"],["abs2","Numeric","Numeric.html#method-i-abs2","()","<p>Returns square of self.\n"],["absolute_path","File","File.html#method-c-absolute_path","(*args)","<p>Converts a pathname to an absolute pathname. Relative paths are referenced\nfrom the current working directory …\n"],["absolute_path","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-absolute_path","()","<p>Returns the absolute path of this instruction sequence.\n<p><code>nil</code> if the iseq was evaluated from a string.\n<p>For …\n"],["absolute_path","Thread::Backtrace::Location","Thread/Backtrace/Location.html#method-i-absolute_path","()","<p>Returns the full file path of this frame.\n<p>Same as #path, but includes the absolute path.\n"],["absolute_path?","File","File.html#method-c-absolute_path-3F","(p1)","<p>Returns <code>true</code> if <code>file_name</code> is an absolute path,\nand <code>false</code> otherwise.\n\n<pre>File.absolute_path?(&quot;c:/foo&quot;)     ...</pre>\n"],["acos","Math","Math.html#method-c-acos","(p1)","<p>Computes the arc cosine of <code>x</code>. Returns 0..PI.\n<p>Domain: [-1, 1]\n<p>Codomain: [0, PI]\n"],["acosh","Math","Math.html#method-c-acosh","(p1)","<p>Computes the inverse hyperbolic cosine of <code>x</code>.\n<p>Domain: [1, INFINITY)\n<p>Codomain: [0, INFINITY)\n"],["add","ThreadGroup","ThreadGroup.html#method-i-add","(p1)","<p>Adds the given <code>thread</code> to this group, removing it from any\nother group to which it may have previously …\n"],["add_stress_to_class","GC","GC.html#method-c-add_stress_to_class","(*args)","<p>Raises NoMemoryError when allocating an instance of the given classes.\n"],["add_trace_func","Thread","Thread.html#method-i-add_trace_func","(p1)","<p>Adds <em>proc</em> as a handler for tracing.\n<p>See Thread#set_trace_func and Kernel#set_trace_func.\n"],["advise","IO","IO.html#method-i-advise","(p1, p2 = v2, p3 = v3)","<p>Announce an intention to access data from the current file in a specific\npattern. On platforms that do …\n"],["alias_method","Module","Module.html#method-i-alias_method","(p1, p2)","<p>Makes <em>new_name</em> a new copy of the method <em>old_name</em>. This\ncan be used to retain access to methods that are …\n"],["aliases","Encoding","Encoding.html#method-c-aliases","()","<p>Returns the hash of available encoding alias and original encoding name.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Encoding</span>.<span class=\"ruby-identifier\">aliases</span>\n<span class=\"ruby-comment\">#=&gt; {&quot;BINARY&quot;=&gt;&quot;ASCII-8BIT&quot;, ...</span>\n</pre>\n"],["alive?","Fiber","Fiber.html#method-i-alive-3F","()","<p>Returns true if the fiber can still be resumed (or transferred to). After\nfinishing execution of the …\n"],["alive?","Thread","Thread.html#method-i-alive-3F","()","<p>Returns <code>true</code> if <code>thr</code> is running or sleeping.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">thr</span> = <span class=\"ruby-constant\">Thread</span>.<span class=\"ruby-identifier\">new</span> { }\n<span class=\"ruby-identifier\">thr</span>.<span class=\"ruby-identifier\">join</span>                <span class=\"ruby-comment\">#=&gt; #&lt;Thread:0x401b3fb0 ...</span>\n</pre>\n"],["all?","Array","Array.html#method-i-all-3F","(*args)","<p>See also Enumerable#all?\n"],["all?","Enumerable","Enumerable.html#method-i-all-3F","(*args)","<p>Passes each element of the collection to the given block. The method\nreturns <code>true</code> if the block never …\n"],["all_symbols","Symbol","Symbol.html#method-c-all_symbols","()","<p>Returns an array of all the symbols currently in Ruby&#39;s symbol table.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Symbol</span>.<span class=\"ruby-identifier\">all_symbols</span>.<span class=\"ruby-identifier\">size</span>    <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["allbits?","Integer","Integer.html#method-i-allbits-3F","(p1)","<p>Returns <code>true</code> if all bits of <code>int &amp; mask</code> are 1.\n"],["allocate","Class","Class.html#method-i-allocate","()","<p>Allocates space for a new object of <em>class</em>&#39;s class and does not\ncall initialize on the new instance. …\n"],["ancestors","Module","Module.html#method-i-ancestors","()","<p>Returns a list of modules included/prepended in <em>mod</em> (including\n<em>mod</em> itself).\n\n<pre>module Mod\n  include Math ...</pre>\n"],["angle","Complex","Complex.html#method-i-angle","()","<p>Returns the angle part of its polar form.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>.<span class=\"ruby-identifier\">polar</span>(<span class=\"ruby-value\">3</span>, <span class=\"ruby-constant\">Math</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">PI</span><span class=\"ruby-operator\">/</span><span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">arg</span>  <span class=\"ruby-comment\">#=&gt; 1.5707963267948966</span>\n</pre>\n"],["angle","Float","Float.html#method-i-angle","()","<p>Returns 0 if the value is positive, pi otherwise.\n"],["angle","Numeric","Numeric.html#method-i-angle","()","<p>Returns 0 if the value is positive, pi otherwise.\n"],["any?","Array","Array.html#method-i-any-3F","(*args)","<p>See also Enumerable#any?\n"],["any?","Enumerable","Enumerable.html#method-i-any-3F","(*args)","<p>Passes each element of the collection to the given block. The method\nreturns <code>true</code> if the block ever returns …\n"],["any?","Hash","Hash.html#method-i-any-3F","(*args)","<p>See also Enumerable#any?\n"],["anybits?","Integer","Integer.html#method-i-anybits-3F","(p1)","<p>Returns <code>true</code> if any bits of <code>int &amp; mask</code> are 1.\n"],["append","Array","Array.html#method-i-append","(*args)",""],["append_features","Module","Module.html#method-i-append_features","(p1)","<p>When this module is included in another, Ruby calls #append_features in\nthis module, passing it the receiving …\n"],["arg","Complex","Complex.html#method-i-arg","()","<p>Returns the angle part of its polar form.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>.<span class=\"ruby-identifier\">polar</span>(<span class=\"ruby-value\">3</span>, <span class=\"ruby-constant\">Math</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">PI</span><span class=\"ruby-operator\">/</span><span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">arg</span>  <span class=\"ruby-comment\">#=&gt; 1.5707963267948966</span>\n</pre>\n"],["arg","Float","Float.html#method-i-arg","()","<p>Returns 0 if the value is positive, pi otherwise.\n"],["arg","Numeric","Numeric.html#method-i-arg","()","<p>Returns 0 if the value is positive, pi otherwise.\n"],["args","NoMethodError","NoMethodError.html#method-i-args","()","<p>Return the arguments passed in as the third parameter to the constructor.\n"],["argv","ARGF","ARGF.html#method-i-argv","()","<p>Returns the <code>ARGV</code> array, which contains the arguments passed to\nyour script, one per element.\n<p>For example: …\n"],["argv0","Process","Process.html#method-c-argv0","()","<p>Returns the name of the script being executed.  The value is not affected\nby assigning a new value to …\n"],["arity","Method","Method.html#method-i-arity","()","<p>Returns an indication of the number of arguments accepted by a method.\nReturns a nonnegative integer …\n"],["arity","Proc","Proc.html#method-i-arity","()","<p>Returns the number of mandatory arguments. If the block is declared to take\nno arguments, returns 0. …\n"],["arity","UnboundMethod","UnboundMethod.html#method-i-arity","()","<p>Returns an indication of the number of arguments accepted by a method.\nReturns a nonnegative integer …\n"],["ascii_compatible?","Encoding","Encoding.html#method-i-ascii_compatible-3F","()","<p>Returns whether ASCII-compatible or not.\n\n<pre>Encoding::UTF_8.ascii_compatible?     #=&gt; true\nEncoding::UTF_16BE.ascii_compatible? ...</pre>\n"],["ascii_only?","String","String.html#method-i-ascii_only-3F","()","<p>Returns true for a string which has only ASCII characters.\n\n<pre>&quot;abc&quot;.force_encoding(&quot;UTF-8&quot;).ascii_only?  ...</pre>\n"],["asciicompat_encoding","Encoding::Converter","Encoding/Converter.html#method-c-asciicompat_encoding","(p1)","<p>Returns the corresponding ASCII compatible encoding.\n<p>Returns nil if the argument is an ASCII compatible …\n"],["asctime","Time","Time.html#method-i-asctime","()","<p>Returns a canonical string representation of <em>time</em>.\n\n<pre>Time.now.asctime   #=&gt; &quot;Wed Apr  9 08:56:03 2003&quot;\nTime.now.ctime ...</pre>\n"],["asin","Math","Math.html#method-c-asin","(p1)","<p>Computes the arc sine of <code>x</code>. Returns -PI/2..PI/2.\n<p>Domain: [-1, -1]\n<p>Codomain: [-PI/2, PI/2]\n"],["asinh","Math","Math.html#method-c-asinh","(p1)","<p>Computes the inverse hyperbolic sine of <code>x</code>.\n<p>Domain: (-INFINITY, INFINITY)\n<p>Codomain: (-INFINITY, INFINITY …\n"],["assoc","Array","Array.html#method-i-assoc","(p1)","<p>Searches through an array whose elements are also arrays comparing\n<code>obj</code> with the first element of each …\n"],["assoc","ENV","ENV.html#method-c-assoc","(p1)","<p>Returns a 2-element Array containing the name and value of the environment\nvariable for <code>name</code> if it exists: …\n"],["assoc","Hash","Hash.html#method-i-assoc","(p1)","<p>Searches through the hash comparing <em>obj</em> with the key using\n<code>==</code>. Returns the key-value pair (two elements …\n"],["at","Array","Array.html#method-i-at","(p1)","<p>Returns the element at <code>index</code>. A negative index counts from the\nend of <code>self</code>. Returns <code>nil</code> if the index …\n"],["at","Time","Time.html#method-c-at","(p1, p2 = v2, p3 = v3, p4 = {})","<p>Creates a new Time object with the value given by <code>time</code>, the\ngiven number of <code>seconds_with_frac</code>, or <code>seconds</code> …\n"],["at_exit","Kernel","Kernel.html#method-i-at_exit","()","<p>Converts <em>block</em> to a <code>Proc</code> object (and therefore binds\nit at the point of call) and registers it for execution …\n"],["atan","Math","Math.html#method-c-atan","(p1)","<p>Computes the arc tangent of <code>x</code>. Returns -PI/2..PI/2.\n<p>Domain: (-INFINITY, INFINITY)\n<p>Codomain: (-PI/2, PI/2 …\n"],["atan2","Math","Math.html#method-c-atan2","(p1, p2)","<p>Computes the arc tangent given <code>y</code> and <code>x</code>. Returns a\nFloat in the range -PI..PI. Return value is a angle …\n"],["atanh","Math","Math.html#method-c-atanh","(p1)","<p>Computes the inverse hyperbolic tangent of <code>x</code>.\n<p>Domain: (-1, 1)\n<p>Codomain: (-INFINITY, INFINITY)\n"],["atime","File","File.html#method-c-atime","(p1)","<p>Returns the last access time for the named file as a Time object.\n<p><em>file_name</em> can be an IO object.\n\n<pre>File.atime(&quot;testfile&quot;) ...</pre>\n"],["atime","File","File.html#method-i-atime","()","<p>Returns the last access time (a Time object) for <em>file</em>, or epoch if\n<em>file</em> has not been accessed.\n\n<pre>File.new(&quot;testfile&quot;).atime ...</pre>\n"],["atime","File::Stat","File/Stat.html#method-i-atime","()","<p>Returns the last access time for this file as an object of class Time.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">atime</span>   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["attr","Module","Module.html#method-i-attr","(*args)","<p>The first form is equivalent to #attr_reader. The second form is equivalent\nto <code>attr_accessor(name)</code> but …\n"],["attr_accessor","Module","Module.html#method-i-attr_accessor","(*args)","<p>Defines a named attribute for this module, where the name is\n<em>symbol.</em><code>id2name</code>, creating an instance variable …\n"],["attr_reader","Module","Module.html#method-i-attr_reader","(*args)","<p>Creates instance variables and corresponding methods that return the value\nof each instance variable. …\n"],["attr_writer","Module","Module.html#method-i-attr_writer","(*args)","<p>Creates an accessor method to allow assignment to the attribute\n<em>symbol</em><code>.id2name</code>. String arguments are …\n"],["autoclose=","IO","IO.html#method-i-autoclose-3D","(p1)","<p>Sets auto-close flag.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-identifier\">open</span>(<span class=\"ruby-string\">&quot;/dev/null&quot;</span>)\n<span class=\"ruby-constant\">IO</span>.<span class=\"ruby-identifier\">for_fd</span>(<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">fileno</span>)\n<span class=\"ruby-comment\"># ...</span>\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">gets</span> <span class=\"ruby-comment\"># may cause Errno::EBADF ...</span>\n</pre>\n"],["autoclose?","IO","IO.html#method-i-autoclose-3F","()","<p>Returns <code>true</code> if the underlying file descriptor of <em>ios</em>\nwill be closed automatically at its finalization, …\n"],["autoload","Kernel","Kernel.html#method-i-autoload","(p1, p2)","<p>Registers <em>filename</em> to be loaded (using Kernel::require) the first\ntime that <em>module</em> (which may be a String …\n"],["autoload","Module","Module.html#method-i-autoload","(p1, p2)","<p>Registers <em>filename</em> to be loaded (using Kernel::require) the first\ntime that <em>module</em> (which may be a String …\n"],["autoload?","Kernel","Kernel.html#method-i-autoload-3F","(*args)","<p>Returns <em>filename</em> to be loaded if <em>name</em> is registered as\n<code>autoload</code>.\n\n<pre>autoload(:B, &quot;b&quot;)\nautoload?(:B)      ...</pre>\n"],["autoload?","Module","Module.html#method-i-autoload-3F","(*args)","<p>Returns <em>filename</em> to be loaded if <em>name</em> is registered as\n<code>autoload</code> in the namespace of <em>mod</em> or one of its …\n"],["b","String","String.html#method-i-b","()","<p>Returns a copied string whose encoding is ASCII-8BIT.\n"],["backtrace","Exception","Exception.html#method-i-backtrace","()","<p>Returns any backtrace associated with the exception. The backtrace is an\narray of strings, each containing …\n"],["backtrace","Thread","Thread.html#method-i-backtrace","(*args)","<p>Returns the current backtrace of the target thread.\n"],["backtrace_locations","Exception","Exception.html#method-i-backtrace_locations","()","<p>Returns any backtrace associated with the exception. This method is similar\nto Exception#backtrace, but …\n"],["backtrace_locations","Thread","Thread.html#method-i-backtrace_locations","(*args)","<p>Returns the execution stack for the target thread—an array containing\nbacktrace location objects.\n<p>See …\n"],["base_label","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-base_label","()","<p>Returns the base label of this instruction sequence.\n<p>For example, using irb:\n\n<pre>iseq = RubyVM::InstructionSequence.compile(&#39;num ...</pre>\n"],["base_label","Thread::Backtrace::Location","Thread/Backtrace/Location.html#method-i-base_label","()","<p>Returns the base label of this frame.\n<p>Usually same as #label, without decoration.\n"],["basename","File","File.html#method-c-basename","(*args)","<p>Returns the last component of the filename given in <em>file_name</em>\n(after first stripping trailing separators), …\n"],["begin","Enumerator::ArithmeticSequence","Enumerator/ArithmeticSequence.html#method-i-begin","()",""],["begin","MatchData","MatchData.html#method-i-begin","(p1)","<p>Returns the offset of the start of the <em>n</em>th element of the match\narray in the string. <em>n</em> can be a string …\n"],["begin","Range","Range.html#method-i-begin","()","<p>Returns the object that defines the beginning of the range.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">10</span>).<span class=\"ruby-identifier\">begin</span>   <span class=\"ruby-comment\">#=&gt; 1</span>\n</pre>\n"],["between?","Comparable","Comparable.html#method-i-between-3F","(p1, p2)","<p>Returns <code>false</code> if <em>obj</em> <code>&lt;=&gt;</code>\n<em>min</em> is less than zero or if <em>obj</em> <code>&lt;=&gt;</code>\n<em>max</em> is greater than zero, <code>true</code> …\n"],["bind","UnboundMethod","UnboundMethod.html#method-i-bind","(p1)","<p>Bind <em>umeth</em> to <em>obj</em>. If Klass was the class from which\n<em>umeth</em> was obtained, <code>obj.kind_of?(Klass)</code> must be …\n"],["bind_call","UnboundMethod","UnboundMethod.html#method-i-bind_call","(*args)","<p>Bind <em>umeth</em> to <em>recv</em> and then invokes the method with the\nspecified arguments. This is semantically equivalent …\n"],["binding","Kernel","Kernel.html#method-i-binding","()","<p>Returns a <code>Binding</code> object, describing the variable and method\nbindings at the point of call. This object …\n"],["binding","Proc","Proc.html#method-i-binding","()","<p>Returns the binding associated with <em>prc</em>.\n\n<pre>def fred(param)\n  proc {}\nend\n\nb = fred(99)\neval(&quot;param&quot;, b.binding) ...</pre>\n"],["binding","TracePoint","TracePoint.html#method-i-binding","()","<p>Return the generated binding object from event\n"],["binmode","ARGF","ARGF.html#method-i-binmode","()","<p>Puts <code>ARGF</code> into binary mode. Once a stream is in binary mode,\nit cannot be reset to non-binary mode.  …\n"],["binmode","IO","IO.html#method-i-binmode","()","<p>Puts <em>ios</em> into binary mode. Once a stream is in binary mode, it\ncannot be reset to nonbinary mode.\n<p>newline …\n"],["binmode?","ARGF","ARGF.html#method-i-binmode-3F","()","<p>Returns true if <code>ARGF</code> is being read in binary mode; false\notherwise. To enable binary mode use <code>ARGF.binmode</code> …\n"],["binmode?","IO","IO.html#method-i-binmode-3F","()","<p>Returns <code>true</code> if <em>ios</em> is binmode.\n"],["binread","IO","IO.html#method-c-binread","(p1, p2 = v2, p3 = v3)","<p>Opens the file, optionally seeks to the given <em>offset</em>, then returns\n<em>length</em> bytes (defaulting to the rest …\n"],["binwrite","IO","IO.html#method-c-binwrite","(*args)","<p>Same as IO.write except opening the file in binary mode and ASCII-8BIT\nencoding (<code>&quot;wb:ASCII-8BIT&quot;</code> …\n"],["birthtime","File","File.html#method-c-birthtime","(p1)",""],["birthtime","File","File.html#method-i-birthtime","()","<p>Returns the birth time for <em>file</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">birthtime</span>   <span class=\"ruby-comment\">#=&gt; Wed Apr 09 08:53:14 CDT 2003</span>\n</pre>\n<p>If the …\n"],["birthtime","File::Stat","File/Stat.html#method-i-birthtime","()","<p>Returns the birth time for <em>stat</em>.\n<p>If the platform doesn&#39;t have birthtime, raises NotImplementedError …\n"],["bit_length","Integer","Integer.html#method-i-bit_length","()","<p>Returns the number of bits of the value of <code>int</code>.\n<p>“Number of bits” means the bit position of the …\n"],["blksize","File::Stat","File/Stat.html#method-i-blksize","()","<p>Returns the native file system&#39;s block size. Will return\n<code>nil</code> on platforms that don&#39;t support …\n"],["block_given?","Kernel","Kernel.html#method-i-block_given-3F","()","<p>Returns <code>true</code> if <code>yield</code> would execute a block in\nthe current context. The <code>iterator?</code> form is mildly deprecated.\n…\n"],["blockdev?","File","File.html#method-c-blockdev-3F","(p1)","<p>Returns <code>true</code> if the named file is a block device.\n<p><em>file_name</em> can be an IO object.\n"],["blockdev?","File::Stat","File/Stat.html#method-i-blockdev-3F","()","<p>Returns <code>true</code> if the file is a block device, <code>false</code>\nif it isn&#39;t or if the operating system doesn&#39;t …\n"],["blockdev?","FileTest","FileTest.html#method-i-blockdev-3F","(p1)","<p>Returns <code>true</code> if the named file is a block device.\n<p><em>file_name</em> can be an IO object.\n"],["blocks","File::Stat","File/Stat.html#method-i-blocks","()","<p>Returns the number of native file system blocks allocated for this file, or\n<code>nil</code> if the operating system …\n"],["broadcast","ConditionVariable","ConditionVariable.html#method-i-broadcast","()","<p>Wakes up all threads waiting for this lock.\n"],["bsearch","Array","Array.html#method-i-bsearch","()","<p>By using binary search, finds a value from this array which meets the given\ncondition in O(log n) where …\n"],["bsearch","Range","Range.html#method-i-bsearch","()","<p>By using binary search, finds a value in range which meets the given\ncondition in O(log n) where n is …\n"],["bsearch_index","Array","Array.html#method-i-bsearch_index","()","<p>By using binary search, finds an index of a value from this array which\nmeets the given condition in …\n"],["bytes","ARGF","ARGF.html#method-i-bytes","()","<p>This is a deprecated alias for #each_byte.\n"],["bytes","IO","IO.html#method-i-bytes","()","<p>This is a deprecated alias for #each_byte.\n"],["bytes","Random","Random.html#method-i-bytes","(p1)","<p>Returns a random binary string containing <code>size</code> bytes.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">random_string</span> = <span class=\"ruby-constant\">Random</span>.<span class=\"ruby-identifier\">new</span>.<span class=\"ruby-identifier\">bytes</span>(<span class=\"ruby-value\">10</span>) <span class=\"ruby-comment\"># =&gt; &quot;\\xD7:R\\xAB?\\x83\\xCE\\xFAkO&quot; ...</span>\n</pre>\n"],["bytes","Random","Random.html#method-c-bytes","(p1)","<p>Returns a random binary string. The argument <code>size</code> specifies\nthe length of the returned string.\n"],["bytes","String","String.html#method-i-bytes","()","<p>Returns an array of bytes in <em>str</em>.  This is a shorthand for\n<code>str.each_byte.to_a</code>.\n<p>If a block is given, which …\n"],["bytesize","String","String.html#method-i-bytesize","()","<p>Returns the length of <code>str</code> in bytes.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;\\x80\\u3042&quot;</span>.<span class=\"ruby-identifier\">bytesize</span>  <span class=\"ruby-comment\">#=&gt; 4</span>\n<span class=\"ruby-string\">&quot;hello&quot;</span>.<span class=\"ruby-identifier\">bytesize</span>       <span class=\"ruby-comment\">#=&gt; 5</span>\n</pre>\n"],["byteslice","String","String.html#method-i-byteslice","(*args)","<p>Byte Reference—If passed a single Integer, returns a substring of one byte\nat that position. If passed …\n"],["call","Continuation","Continuation.html#method-i-call","(*args)","<p>Invokes the continuation. The program continues from the end of the #callcc\nblock. If no arguments are …\n"],["call","Method","Method.html#method-i-call","(*args)","<p>Invokes the <em>meth</em> with the specified arguments, returning the\nmethod&#39;s return value.\n\n<pre>m = 12.method(&quot;+&quot;) ...</pre>\n"],["call","Proc","Proc.html#method-i-call","(*args)","<p>Invokes the block, setting the block&#39;s parameters to the values in\n<em>params</em> using something close to …\n"],["call","Symbol","Symbol.html#method-i-call","(*args, &block)",""],["callable_methods","Object","Object.html#method-i-callable_methods","()",""],["callcc","Kernel","Kernel.html#method-i-callcc","()","<p>Generates a Continuation object, which it passes to the associated block.\nYou need to <code>require &#39;continuation&#39;</code> …\n"],["callee_id","TracePoint","TracePoint.html#method-i-callee_id","()","<p>Return the called name of the method being called\n"],["caller","Kernel","Kernel.html#method-i-caller","(*args)","<p>Returns the current execution stack—an array containing strings in the form\n<code>file:line</code> or <code>file:line:</code> …\n"],["caller_locations","Kernel","Kernel.html#method-i-caller_locations","(*args)","<p>Returns the current execution stack—an array containing backtrace location\nobjects.\n<p>See Thread::Backtrace::Location …\n"],["capitalize","String","String.html#method-i-capitalize","(*args)","<p>Returns a copy of <em>str</em> with the first character converted to\nuppercase and the remainder to lowercase. …\n"],["capitalize","Symbol","Symbol.html#method-i-capitalize","(*args)","<p>Same as <code>sym.to_s.capitalize.intern</code>.\n"],["capitalize!","String","String.html#method-i-capitalize-21","(*args)","<p>Modifies <em>str</em> by converting the first character to uppercase and\nthe remainder to lowercase. Returns  …\n"],["captures","MatchData","MatchData.html#method-i-captures","()","<p>Returns the array of captures; equivalent to <code>mtch.to_a[1..-1]</code>.\n\n<pre>f1,f2,f3,f4 = /(.)(.)(\\d+)(\\d)/.match(&quot;THX1138.&quot;).captures ...</pre>\n"],["casecmp","String","String.html#method-i-casecmp","(p1)","<p>Case-insensitive version of String#&lt;=&gt;. Currently, case-insensitivity\nonly works on characters …\n"],["casecmp","Symbol","Symbol.html#method-i-casecmp","(p1)","<p>Case-insensitive version of Symbol#&lt;=&gt;. Currently, case-insensitivity\nonly works on characters …\n"],["casecmp?","String","String.html#method-i-casecmp-3F","(p1)","<p>Returns <code>true</code> if <code>str</code> and <code>other_str</code>\nare equal after Unicode case folding, <code>false</code> if they are not\nequal. …\n"],["casecmp?","Symbol","Symbol.html#method-i-casecmp-3F","(p1)","<p>Returns <code>true</code> if <code>sym</code> and <code>other_symbol</code>\nare equal after Unicode case folding, <code>false</code> if they are not\nequal. …\n"],["casefold?","Regexp","Regexp.html#method-i-casefold-3F","()","<p>Returns the value of the case-insensitive flag.\n\n<pre>/a/.casefold?           #=&gt; false\n/a/i.casefold?      ...</pre>\n"],["catch","Kernel","Kernel.html#method-i-catch","(*args)","<p><code>catch</code> executes its block. If <code>throw</code> is not called,\nthe block executes normally, and <code>catch</code> returns the …\n"],["cause","Exception","Exception.html#method-i-cause","()","<p>Returns the previous exception ($!) at the time this exception was raised.\nThis is useful for wrapping …\n"],["cbrt","Math","Math.html#method-c-cbrt","(p1)","<p>Returns the cube root of <code>x</code>.\n<p>Domain: (-INFINITY, INFINITY)\n<p>Codomain: (-INFINITY, INFINITY)\n"],["ceil","Float","Float.html#method-i-ceil","(*args)","<p>Returns the smallest number greater than or equal to <code>float</code>\nwith a precision of <code>ndigits</code> decimal digits …\n"],["ceil","Integer","Integer.html#method-i-ceil","(*args)","<p>Returns the smallest number greater than or equal to <code>int</code> with\na precision of <code>ndigits</code> decimal digits (default: …\n"],["ceil","Numeric","Numeric.html#method-i-ceil","(*args)","<p>Returns the smallest number greater than or equal to <code>num</code> with\na precision of <code>ndigits</code> decimal digits (default: …\n"],["ceil","Rational","Rational.html#method-i-ceil","(*args)","<p>Returns the smallest number greater than or equal to <code>rat</code> with\na precision of <code>ndigits</code> decimal digits (default: …\n"],["ceil","Time","Time.html#method-i-ceil","(*args)","<p>Ceils sub seconds to a given precision in decimal digits (0 digits by\ndefault). It returns a new Time …\n"],["center","String","String.html#method-i-center","(*args)","<p>Centers <code>str</code> in <code>width</code>.  If <code>width</code> is\ngreater than the length of <code>str</code>, returns a new String of length\n<code>width</code> …\n"],["chain","Enumerable","Enumerable.html#method-i-chain","(*args)","<p>Returns an enumerator object generated from this enumerator and given\nenumerables.\n\n<pre>e = (1..3).chain([4, ...</pre>\n"],["change_privilege","Process::GID","Process/GID.html#method-c-change_privilege","(p1)","<p>Change the current process&#39;s real and effective group ID to that\nspecified by <em>group</em>. Returns the …\n"],["change_privilege","Process::UID","Process/UID.html#method-c-change_privilege","(p1)","<p>Change the current process&#39;s real and effective user ID to that\nspecified by <em>user</em>. Returns the new …\n"],["chardev?","File","File.html#method-c-chardev-3F","(p1)","<p>Returns <code>true</code> if the named file is a character device.\n<p><em>file_name</em> can be an IO object.\n"],["chardev?","File::Stat","File/Stat.html#method-i-chardev-3F","()","<p>Returns <code>true</code> if the file is a character device,\n<code>false</code> if it isn&#39;t or if the operating system doesn&#39;t …\n"],["chardev?","FileTest","FileTest.html#method-i-chardev-3F","(p1)","<p>Returns <code>true</code> if the named file is a character device.\n<p><em>file_name</em> can be an IO object.\n"],["chars","ARGF","ARGF.html#method-i-chars","()","<p>This is a deprecated alias for #each_char.\n"],["chars","IO","IO.html#method-i-chars","()","<p>This is a deprecated alias for #each_char.\n"],["chars","String","String.html#method-i-chars","()","<p>Returns an array of characters in <em>str</em>.  This is a shorthand for\n<code>str.each_char.to_a</code>.\n<p>If a block is given, …\n"],["chdir","Dir","Dir.html#method-c-chdir","(*args)","<p>Changes the current working directory of the process to the given string.\nWhen called without an argument, …\n"],["children","Dir","Dir.html#method-c-children","(*args)","<p>Returns an array containing all of the filenames except for “.” and “..” in\nthe given …\n"],["children","Dir","Dir.html#method-i-children","()","<p>Returns an array containing all of the filenames except for “.” and “..” in\nthis …\n"],["children","RubyVM::AbstractSyntaxTree::Node","RubyVM/AbstractSyntaxTree/Node.html#method-i-children","()","<p>Returns AST nodes under this one.  Each kind of node has different\nchildren, depending on what kind of …\n"],["chmod","File","File.html#method-c-chmod","(*args)","<p>Changes permission bits on the named file(s) to the bit pattern represented\nby <em>mode_int</em>. Actual effects …\n"],["chmod","File","File.html#method-i-chmod","(p1)","<p>Changes permission bits on <em>file</em> to the bit pattern represented by\n<em>mode_int</em>. Actual effects are platform …\n"],["chomp","Kernel","Kernel.html#method-i-chomp","(*args)","<p>Equivalent to <code>$_ = $_.chomp(<em>string</em>)</code>. See\nString#chomp. Available only when -p/-n command line option …\n"],["chomp","String","String.html#method-i-chomp","(*args)","<p>Returns a new String with the given record separator removed from the end\nof <em>str</em> (if present). If <code>$/</code> …\n"],["chomp!","String","String.html#method-i-chomp-21","(*args)","<p>Modifies <em>str</em> in place as described for String#chomp, returning\n<em>str</em>, or <code>nil</code> if no modifications were made. …\n"],["chop","Kernel","Kernel.html#method-i-chop","()","<p>Equivalent to <code>($_.dup).chop!</code>, except <code>nil</code> is never\nreturned. See String#chop!. Available only when -p/-n …\n"],["chop","String","String.html#method-i-chop","()","<p>Returns a new String with the last character removed.  If the string ends\nwith <code>\\r\\n</code>, both characters …\n"],["chop!","String","String.html#method-i-chop-21","()","<p>Processes <em>str</em> as for String#chop, returning <em>str</em>, or\n<code>nil</code> if <em>str</em> is the empty string.  See also\nString#chomp! …\n"],["chown","File","File.html#method-c-chown","(*args)","<p>Changes the owner and group of the named file(s) to the given numeric owner\nand group id&#39;s. Only …\n"],["chown","File","File.html#method-i-chown","(p1, p2)","<p>Changes the owner and group of <em>file</em> to the given numeric owner and\ngroup id&#39;s. Only a process with …\n"],["chr","Integer","Integer.html#method-i-chr","(*args)","<p>Returns a string containing the character represented by the\n<code>int</code>&#39;s value according to <code>encoding</code>.\n\n<pre>65.chr ...</pre>\n"],["chr","String","String.html#method-i-chr","()","<p>Returns a one-character string at the beginning of the string.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = <span class=\"ruby-string\">&quot;abcde&quot;</span>\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">chr</span>    <span class=\"ruby-comment\">#=&gt; &quot;a&quot;</span>\n</pre>\n"],["chroot","Dir","Dir.html#method-c-chroot","(p1)","<p>Changes this process&#39;s idea of the file system root. Only a privileged\nprocess may make this call. …\n"],["chunk","Enumerable","Enumerable.html#method-i-chunk","()","<p>Enumerates over the items, chunking them together based on the return value\nof the block.\n<p>Consecutive …\n"],["chunk","Enumerator::Lazy","Enumerator/Lazy.html#method-i-chunk","(*args)","<p>Like Enumerable#chunk, but chains operation to be lazy-evaluated.\n"],["chunk_while","Enumerable","Enumerable.html#method-i-chunk_while","()","<p>Creates an enumerator for each chunked elements. The beginnings of chunks\nare defined by the block.\n<p>This …\n"],["chunk_while","Enumerator::Lazy","Enumerator/Lazy.html#method-i-chunk_while","(*args)","<p>Like Enumerable#chunk_while, but chains operation to be lazy-evaluated.\n"],["clamp","Comparable","Comparable.html#method-i-clamp","(p1, p2 = v2)","<p>In <code>(min, max)</code> form, returns <em>min</em> if <em>obj</em>\n<code>&lt;=&gt;</code> <em>min</em> is less than zero, <em>max</em> if\n<em>obj</em> <code>&lt;=&gt;</code> <em>max</em> is greater …\n"],["class","Object","Object.html#method-i-class","()","<p>Returns the class of <em>obj</em>. This method must always be called with\nan explicit receiver, as #class is also …\n"],["class_eval","Module","Module.html#method-i-class_eval","(*args)","<p>Evaluates the string or block in the context of <em>mod</em>, except that\nwhen a block is given, constant/class …\n"],["class_exec","Module","Module.html#method-i-class_exec","(*args)","<p>Evaluates the given block in the context of the class/module. The method\ndefined in the block will belong …\n"],["class_variable_defined?","Module","Module.html#method-i-class_variable_defined-3F","(p1)","<p>Returns <code>true</code> if the given class variable is defined in\n<em>obj</em>. String arguments are converted to symbols. …\n"],["class_variable_get","Module","Module.html#method-i-class_variable_get","(p1)","<p>Returns the value of the given class variable (or throws a NameError\nexception). The <code>@@</code> part of the variable …\n"],["class_variable_set","Module","Module.html#method-i-class_variable_set","(p1, p2)","<p>Sets the class variable named by <em>symbol</em> to the given object. If\nthe class variable name is passed as …\n"],["class_variables","Module","Module.html#method-i-class_variables","(*args)","<p>Returns an array of the names of class variables in <em>mod</em>. This\nincludes the names of class variables in …\n"],["clear","Array","Array.html#method-i-clear","()","<p>Removes all elements from <code>self</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [ <span class=\"ruby-string\">&quot;a&quot;</span>, <span class=\"ruby-string\">&quot;b&quot;</span>, <span class=\"ruby-string\">&quot;c&quot;</span>, <span class=\"ruby-string\">&quot;d&quot;</span>, <span class=\"ruby-string\">&quot;e&quot;</span> ]\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">clear</span>    <span class=\"ruby-comment\">#=&gt; [ ]</span>\n</pre>\n"],["clear","ENV","ENV.html#method-c-clear","()","<p>Removes every environment variable; returns ENV:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">replace</span>(<span class=\"ruby-string\">&#39;foo&#39;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&#39;0&#39;</span>, <span class=\"ruby-string\">&#39;bar&#39;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&#39;1&#39;</span>)\n<span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">size</span> <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["clear","GC::Profiler","GC/Profiler.html#method-c-clear","()","<p>Clears the GC profiler data.\n"],["clear","Hash","Hash.html#method-i-clear","()","<p>Removes all key-value pairs from <em>hsh</em>.\n\n<pre>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; =&gt; 200 }   #=&gt; {&quot;a&quot;=&gt;100, &quot;b&quot;=&gt;200}\nh.clear ...</pre>\n"],["clear","Queue","Queue.html#method-i-clear","()","<p>Removes all objects from the queue.\n"],["clear","SizedQueue","SizedQueue.html#method-i-clear","()","<p>Removes all objects from the queue.\n"],["clear","String","String.html#method-i-clear","()","<p>Makes string empty.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = <span class=\"ruby-string\">&quot;abcde&quot;</span>\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">clear</span>    <span class=\"ruby-comment\">#=&gt; &quot;&quot;</span>\n</pre>\n"],["clock_getres","Process","Process.html#method-c-clock_getres","(*args)","<p>Returns the time resolution returned by POSIX clock_getres() function.\n<p><code>clock_id</code> specifies a kind of clock. …\n"],["clock_gettime","Process","Process.html#method-c-clock_gettime","(*args)","<p>Returns a time returned by POSIX clock_gettime() function.\n\n<pre>p Process.clock_gettime(Process::CLOCK_MONOTONIC) ...</pre>\n"],["clone","Method","Method.html#method-i-clone","()","<p>Returns a clone of this method.\n\n<pre>class A\n  def foo\n    return &quot;bar&quot;\n  end\nend\n\nm = A.new.method(:foo)\nm.call ...</pre>\n"],["clone","Numeric","Numeric.html#method-i-clone","(*args)","<p>Returns the receiver.  <code>freeze</code> cannot be <code>false</code>.\n"],["clone","Object","Object.html#method-i-clone","(*args)","<p>Produces a shallow copy of <em>obj</em>—the instance variables of\n<em>obj</em> are copied, but not the objects they reference. …\n"],["clone","UnboundMethod","UnboundMethod.html#method-i-clone","()","<p>Returns a clone of this method.\n\n<pre>class A\n  def foo\n    return &quot;bar&quot;\n  end\nend\n\nm = A.new.method(:foo)\nm.call ...</pre>\n"],["close","ARGF","ARGF.html#method-i-close","()","<p>Closes the current file and skips to the next file in ARGV. If there are no\nmore files to open, just …\n"],["close","Dir","Dir.html#method-i-close","()","<p>Closes the directory stream. Calling this method on closed Dir object is\nignored since Ruby 2.3.\n\n<pre>d = Dir.new(&quot;testdir&quot;) ...</pre>\n"],["close","IO","IO.html#method-i-close","()","<p>Closes <em>ios</em> and flushes any pending writes to the operating system.\nThe stream is unavailable for any …\n"],["close","Queue","Queue.html#method-i-close","()","<p>Closes the queue. A closed queue cannot be re-opened.\n<p>After the call to close completes, the following …\n"],["close","SizedQueue","SizedQueue.html#method-i-close","()","<p>Similar to Queue#close.\n<p>The difference is behavior with waiting enqueuing threads.\n<p>If there are waiting …\n"],["close_on_exec=","IO","IO.html#method-i-close_on_exec-3D","(p1)","<p>Sets a close-on-exec flag.\n\n<pre>f = open(&quot;/dev/null&quot;)\nf.close_on_exec = true\nsystem(&quot;cat&quot;, &quot;/proc/self/fd/#{f.fileno}&quot;) ...</pre>\n"],["close_on_exec?","IO","IO.html#method-i-close_on_exec-3F","()","<p>Returns <code>true</code> if <em>ios</em> will be closed on exec.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-identifier\">open</span>(<span class=\"ruby-string\">&quot;/dev/null&quot;</span>)\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">close_on_exec?</span>                 <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["close_read","IO","IO.html#method-i-close_read","()","<p>Closes the read end of a duplex I/O stream (i.e., one that contains both a\nread and a write stream, such …\n"],["close_write","IO","IO.html#method-i-close_write","()","<p>Closes the write end of a duplex I/O stream (i.e., one that contains both a\nread and a write stream, …\n"],["closed?","ARGF","ARGF.html#method-i-closed-3F","()","<p>Returns <em>true</em> if the current file has been closed; <em>false</em>\notherwise. Use <code>ARGF.close</code> to actually close the …\n"],["closed?","IO","IO.html#method-i-closed-3F","()","<p>Returns <code>true</code> if <em>ios</em> is completely closed (for duplex\nstreams, both reader and writer), <code>false</code> otherwise. …\n"],["closed?","Queue","Queue.html#method-i-closed-3F","()","<p>Returns <code>true</code> if the queue is closed.\n"],["codepoints","ARGF","ARGF.html#method-i-codepoints","()","<p>This is a deprecated alias for #each_codepoint.\n"],["codepoints","IO","IO.html#method-i-codepoints","()","<p>This is a deprecated alias for #each_codepoint.\n"],["codepoints","String","String.html#method-i-codepoints","()","<p>Returns an array of the Integer ordinals of the characters in <em>str</em>.\nThis is a shorthand for <code>str.each_codepoint.to_a</code> …\n"],["coerce","Float","Float.html#method-i-coerce","(p1)","<p>Returns an array with both <code>numeric</code> and <code>float</code>\nrepresented as Float objects.\n<p>This is achieved by converting …\n"],["coerce","Integer","Integer.html#method-i-coerce","(p1)","<p>Returns an array with both a <code>numeric</code> and a <code>big</code>\nrepresented as Bignum objects.\n<p>This is achieved by converting …\n"],["coerce","Numeric","Numeric.html#method-i-coerce","(p1)","<p>If <code>numeric</code> is the same type as <code>num</code>, returns an\narray <code>[numeric, num]</code>. Otherwise, returns an array with …\n"],["collect","Array","Array.html#method-i-collect","()","<p>Invokes the given block once for each element of <code>self</code>.\n<p>Creates a new array containing the values returned …\n"],["collect","Enumerable","Enumerable.html#method-i-collect","()","<p>Returns a new array with the results of running <em>block</em> once for\nevery element in <em>enum</em>.\n<p>If no block is given, …\n"],["collect","Enumerator::Lazy","Enumerator/Lazy.html#method-i-collect","()","<p>Like Enumerable#map, but chains operation to be lazy-evaluated.\n\n<pre>(1..Float::INFINITY).lazy.map {|i| i**2 ...</pre>\n"],["collect!","Array","Array.html#method-i-collect-21","()","<p>Invokes the given block once for each element of <code>self</code>,\nreplacing the element with the value returned …\n"],["collect_concat","Enumerable","Enumerable.html#method-i-collect_concat","()","<p>Returns a new array with the concatenated results of running <em>block</em>\nonce for every element in <em>enum</em>.\n<p>If …\n"],["collect_concat","Enumerator::Lazy","Enumerator/Lazy.html#method-i-collect_concat","()","<p>Returns a new lazy enumerator with the concatenated results of running\n<code>block</code> once for every element in …\n"],["column","Ripper","Ripper.html#method-i-column","()","<p>Return column number of current parsing line. This number starts from 0.\n"],["combination","Array","Array.html#method-i-combination","(p1)","<p>When invoked with a block, yields all combinations of length <code>n</code>\nof elements from the array and then returns …\n"],["compact","Array","Array.html#method-i-compact","()","<p>Returns a copy of <code>self</code> with all <code>nil</code> elements\nremoved.\n\n<pre>[ &quot;a&quot;, nil, &quot;b&quot;, nil, &quot;c&quot;, nil ].compact\n       ...</pre>\n"],["compact","GC","GC.html#method-c-compact","()",""],["compact","Hash","Hash.html#method-i-compact","()","<p>Returns a new hash with the nil values/key pairs removed\n\n<pre>h = { a: 1, b: false, c: nil }\nh.compact     ...</pre>\n"],["compact!","Array","Array.html#method-i-compact-21","()","<p>Removes <code>nil</code> elements from the array.\n<p>Returns <code>nil</code> if no changes were made, otherwise returns the\narray. …\n"],["compact!","Hash","Hash.html#method-i-compact-21","()","<p>Removes all nil values from the hash. Returns nil if no changes were made,\notherwise returns the hash. …\n"],["compare_by_identity","Hash","Hash.html#method-i-compare_by_identity","()","<p>Makes <em>hsh</em> compare its keys by their identity, i.e. it will\nconsider exact same objects as same keys. …\n"],["compare_by_identity?","Hash","Hash.html#method-i-compare_by_identity-3F","()","<p>Returns <code>true</code> if <em>hsh</em> will compare its keys by their\nidentity.  Also see Hash#compare_by_identity.\n"],["compatible?","Encoding","Encoding.html#method-c-compatible-3F","(p1, p2)","<p>Checks the compatibility of two objects.\n<p>If the objects are both strings they are compatible when they …\n"],["compile","Regexp","Regexp.html#method-c-compile","(*args)","<p>Alias for Regexp.new\n"],["compile","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-c-compile","(p1, *args, p3 = {})","<p>Takes <code>source</code>, a String of Ruby code and compiles it to an\nInstructionSequence.\n<p>Optionally takes <code>file</code>, …\n"],["compile_file","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-c-compile_file","(p1, *args, p3 = {})","<p>Takes <code>file</code>, a String with the location of a Ruby source file,\nreads, parses and compiles the file, and …\n"],["compile_option","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-c-compile_option","()","<p>Returns a hash of default options used by the Ruby iseq compiler.\n<p>For details, see InstructionSequence.compile_option= …\n"],["compile_option=","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-c-compile_option-3D","(p1)","<p>Sets the default values for various optimizations in the Ruby iseq\ncompiler.\n<p>Possible values for <code>options</code> …\n"],["concat","Array","Array.html#method-i-concat","(*args)","<p>Appends the elements of <code>other_ary</code>s to <code>self</code>.\n\n<pre class=\"ruby\">[ <span class=\"ruby-string\">&quot;a&quot;</span>, <span class=\"ruby-string\">&quot;b&quot;</span> ].<span class=\"ruby-identifier\">concat</span>( [<span class=\"ruby-string\">&quot;c&quot;</span>, <span class=\"ruby-string\">&quot;d&quot;</span>])   <span class=\"ruby-comment\">#=&gt; [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot; ...</span>\n</pre>\n"],["concat","String","String.html#method-i-concat","(*args)","<p>Concatenates the given object(s) to <em>str</em>. If an object is an\nInteger, it is considered a codepoint and …\n"],["conj","Complex","Complex.html#method-i-conj","()","<p>Returns the complex conjugate.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">conjugate</span>  <span class=\"ruby-comment\">#=&gt; (1-2i)</span>\n</pre>\n"],["conj","Numeric","Numeric.html#method-i-conj","()","<p>Returns self.\n"],["conjugate","Complex","Complex.html#method-i-conjugate","()","<p>Returns the complex conjugate.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">conjugate</span>  <span class=\"ruby-comment\">#=&gt; (1-2i)</span>\n</pre>\n"],["conjugate","Numeric","Numeric.html#method-i-conjugate","()","<p>Returns self.\n"],["const_defined?","Module","Module.html#method-i-const_defined-3F","(*args)","<p>Says whether <em>mod</em> or its ancestors have a constant with the given\nname:\n\n<pre>Float.const_defined?(:EPSILON) ...</pre>\n"],["const_get","Module","Module.html#method-i-const_get","(*args)","<p>Checks for a constant with the given name in <em>mod</em>. If\n<code>inherit</code> is set, the lookup will also search the …\n"],["const_missing","Module","Module.html#method-i-const_missing","(p1)","<p>Invoked when a reference is made to an undefined constant in <em>mod</em>.\nIt is passed a symbol for the undefined …\n"],["const_missing","Object","Object.html#method-c-const_missing","(c)",""],["const_set","Module","Module.html#method-i-const_set","(p1, p2)","<p>Sets the named constant to the given object, returning that object. Creates\na new constant if no constant …\n"],["const_source_location","Module","Module.html#method-i-const_source_location","(*args)","<p>Returns the Ruby source filename and line number containing first\ndefinition of constant specified.  …\n"],["constants","Module","Module.html#method-c-constants","(*args)","<p>In the first form, returns an array of the names of all constants\naccessible from the point of call. …\n"],["constants","Module","Module.html#method-i-constants","(*args)","<p>Returns an array of the names of the constants accessible in <em>mod</em>.\nThis includes the names of constants …\n"],["convert","Encoding::Converter","Encoding/Converter.html#method-i-convert","(p1)","<p>Convert source_string and return destination_string.\n<p>source_string is assumed as a part of source. i.e. …\n"],["convpath","Encoding::Converter","Encoding/Converter.html#method-i-convpath","()","<p>Returns the conversion path of ec.\n<p>The result is an array of conversions.\n\n<pre>ec = Encoding::Converter.new(&quot;ISO-8859-1&quot;, ...</pre>\n"],["copy_stream","IO","IO.html#method-c-copy_stream","(p1, p2, p3 = v3, p4 = v4)","<p>IO.copy_stream copies <em>src</em> to <em>dst</em>. <em>src</em> and\n<em>dst</em> is either a filename or an IO-like object. IO-like object …\n"],["coredump?","Process::Status","Process/Status.html#method-i-coredump-3F","()","<p>Returns <code>true</code> if <em>stat</em> generated a coredump when it\nterminated. Not available on all platforms.\n"],["cos","Math","Math.html#method-c-cos","(p1)","<p>Computes the cosine of <code>x</code> (expressed in radians). Returns a\nFloat in the range -1.0..1.0.\n<p>Domain: (-INFINITY, …\n"],["cosh","Math","Math.html#method-c-cosh","(p1)","<p>Computes the hyperbolic cosine of <code>x</code> (expressed in radians).\n<p>Domain: (-INFINITY, INFINITY)\n<p>Codomain: [1, …\n"],["count","Array","Array.html#method-i-count","(*args)","<p>Returns the number of elements.\n<p>If an argument is given, counts the number of elements which equal\n<code>obj</code> …\n"],["count","Enumerable","Enumerable.html#method-i-count","(p1)","<p>Returns the number of items in <code>enum</code> through enumeration. If an\nargument is given, the number of items …\n"],["count","GC","GC.html#method-c-count","()","<p>The number of times GC occurred.\n<p>It returns the number of times GC occurred since the process started. …\n"],["count","Range","Range.html#method-i-count","(*args)","<p>Identical to Enumerable#count, except it returns Infinity for endless\nranges.\n"],["count","String","String.html#method-i-count","(*args)","<p>Each <code>other_str</code> parameter defines a set of characters to count.\nThe intersection of these sets defines …\n"],["count_objects","ObjectSpace","ObjectSpace.html#method-c-count_objects","(*args)","<p>Counts all objects grouped by type.\n<p>It returns a hash, such as:\n\n<pre>{\n  :TOTAL=&gt;10000,\n  :FREE=&gt;3011,\n  :T_OBJECT=&gt;6, ...</pre>\n"],["cover?","Range","Range.html#method-i-cover-3F","(p1)","<p>Returns <code>true</code> if <code>obj</code> is between the begin and end\nof the range.\n<p>This tests <code>begin &lt;= obj &lt;= end</code> when …\n"],["crypt","String","String.html#method-i-crypt","(p1)","<p>Returns the string generated by calling <code>crypt(3)</code> standard\nlibrary function with <code>str</code> and <code>salt_str</code>, in …\n"],["ctime","File","File.html#method-c-ctime","(p1)","<p>Returns the change time for the named file (the time at which directory\ninformation about the file was …\n"],["ctime","File","File.html#method-i-ctime","()","<p>Returns the change time for <em>file</em> (that is, the time directory\ninformation about the file was changed, …\n"],["ctime","File::Stat","File/Stat.html#method-i-ctime","()","<p>Returns the change time for <em>stat</em> (that is, the time directory\ninformation about the file was changed, …\n"],["ctime","Time","Time.html#method-i-ctime","()","<p>Returns a canonical string representation of <em>time</em>.\n\n<pre>Time.now.asctime   #=&gt; &quot;Wed Apr  9 08:56:03 2003&quot;\nTime.now.ctime ...</pre>\n"],["current","Fiber","Fiber.html#method-c-current","()","<p>Returns the current fiber. You need to <code>require &#39;fiber&#39;</code>\nbefore using this method. If you are not …\n"],["current","Thread","Thread.html#method-c-current","()","<p>Returns the currently executing thread.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Thread</span>.<span class=\"ruby-identifier\">current</span>   <span class=\"ruby-comment\">#=&gt; #&lt;Thread:0x401bdf4c run&gt;</span>\n</pre>\n"],["curry","Method","Method.html#method-i-curry","(*args)","<p>Returns a curried proc based on the method. When the proc is called with a\nnumber of arguments that is …\n"],["curry","Proc","Proc.html#method-i-curry","(*args)","<p>Returns a curried proc. If the optional <em>arity</em> argument is given,\nit determines the number of arguments. …\n"],["cycle","Array","Array.html#method-i-cycle","(*args)","<p>Calls the given block for each element <code>n</code> times or forever if\n<code>nil</code> is given.\n<p>Does nothing if a non-positive …\n"],["cycle","Enumerable","Enumerable.html#method-i-cycle","(*args)","<p>Calls <em>block</em> for each element of <em>enum</em> repeatedly\n<em>n</em> times or forever if none or <code>nil</code> is given.  If a\nnon-positive …\n"],["daemon","Process","Process.html#method-c-daemon","(*args)","<p>Detach the process from controlling terminal and run in the background as\nsystem daemon.  Unless the …\n"],["day","Time","Time.html#method-i-day","()","<p>Returns the day of the month (1..n) for <em>time</em>.\n\n<pre>t = Time.now   #=&gt; 2007-11-19 08:27:03 -0600\nt.day      ...</pre>\n"],["debug_output","Ripper","Ripper.html#method-i-debug_output","()","<p>Get debug output.\n"],["debug_output=","Ripper","Ripper.html#method-i-debug_output-3D","(p1)","<p>Set debug output.\n"],["deconstruct","Array","Array.html#method-i-deconstruct","()",""],["deconstruct","Struct","Struct.html#method-i-deconstruct","()","<p>Returns the values for this struct as an Array.\n\n<pre>Customer = Struct.new(:name, :address, :zip)\njoe = Customer.new(&quot;Joe ...</pre>\n"],["deconstruct_keys","Hash","Hash.html#method-i-deconstruct_keys","(p1)",""],["deconstruct_keys","Struct","Struct.html#method-i-deconstruct_keys","(p1)",""],["dedent_string","Ripper","Ripper.html#method-c-dedent_string","(p1, p2)","<p>USE OF RIPPER LIBRARY ONLY.\n<p>Strips up to <code>width</code> leading whitespaces from\n<code>input</code>, and returns the stripped …\n"],["dedent_string","Ripper","Ripper.html#method-i-dedent_string","(p1, p2)","<p>USE OF RIPPER LIBRARY ONLY.\n<p>Strips up to <code>width</code> leading whitespaces from\n<code>input</code>, and returns the stripped …\n"],["default","Hash","Hash.html#method-i-default","(*args)","<p>Returns the default value, the value that would be returned by <em>hsh</em>\nif <em>key</em> did not exist in <em>hsh</em>. See also …\n"],["default=","Hash","Hash.html#method-i-default-3D","(p1)","<p>Sets the default value, the value returned for a key that does not exist in\nthe hash. It is not possible …\n"],["default_external","Encoding","Encoding.html#method-c-default_external","()","<p>Returns default external encoding.\n<p>The default external encoding is used by default for strings created …\n"],["default_external=","Encoding","Encoding.html#method-c-default_external-3D","(p1)","<p>Sets default external encoding.  You should not set\nEncoding::default_external in ruby code as strings …\n"],["default_internal","Encoding","Encoding.html#method-c-default_internal","()","<p>Returns default internal encoding.  Strings will be transcoded to the\ndefault internal encoding in the …\n"],["default_internal=","Encoding","Encoding.html#method-c-default_internal-3D","(p1)","<p>Sets default internal encoding or removes default internal encoding when\npassed nil.  You should not …\n"],["default_proc","Hash","Hash.html#method-i-default_proc","()","<p>If Hash::new was invoked with a block, return that block, otherwise return\n<code>nil</code>.\n\n<pre>h = Hash.new {|h,k| h[k] ...</pre>\n"],["default_proc=","Hash","Hash.html#method-i-default_proc-3D","(p1)","<p>Sets the default proc to be executed on each failed key lookup.\n\n<pre>h.default_proc = proc do |hash, key|\n ...</pre>\n"],["define_finalizer","ObjectSpace","ObjectSpace.html#method-c-define_finalizer","(p1, p2 = v2)","<p>Adds <em>aProc</em> as a finalizer, to be called after <em>obj</em> was\ndestroyed. The object ID of the <em>obj</em> will be passed …\n"],["define_method","Module","Module.html#method-i-define_method","(*args)","<p>Defines an instance method in the receiver. The <em>method</em> parameter\ncan be a <code>Proc</code>, a <code>Method</code> or an\n<code>UnboundMethod</code> …\n"],["define_singleton_method","Object","Object.html#method-i-define_singleton_method","(*args)","<p>Defines a singleton method in the receiver. The <em>method</em> parameter\ncan be a <code>Proc</code>, a <code>Method</code> or an\n<code>UnboundMethod</code> …\n"],["defined_class","TracePoint","TracePoint.html#method-i-defined_class","()","<p>Return class or module of the method being called.\n\n<pre>class C; def foo; end; end\ntrace = TracePoint.new(:call) ...</pre>\n"],["delete","Array","Array.html#method-i-delete","(p1)","<p>Deletes all items from <code>self</code> that are equal to\n<code>obj</code>.\n<p>Returns the last deleted item, or <code>nil</code> if no matching …\n"],["delete","Dir","Dir.html#method-c-delete","(p1)","<p>Deletes the named directory. Raises a subclass of SystemCallError if the\ndirectory isn&#39;t empty.\n"],["delete","ENV","ENV.html#method-c-delete","(p1)","<p>Deletes the environment variable with <code>name</code> if it exists and\nreturns its value:\n\n<pre>ENV[&#39;foo&#39;] = &#39;0&#39;\nENV.delete(&#39;foo&#39;) ...</pre>\n"],["delete","File","File.html#method-c-delete","(*args)","<p>Deletes the named files, returning the number of names passed as arguments.\nRaises an exception on any …\n"],["delete","Hash","Hash.html#method-i-delete","(p1)","<p>Deletes the key-value pair and returns the value from <em>hsh</em> whose\nkey is equal to <em>key</em>. If the key is not …\n"],["delete","String","String.html#method-i-delete","(*args)","<p>Returns a copy of <em>str</em> with all characters in the intersection of\nits arguments deleted. Uses the same …\n"],["delete!","String","String.html#method-i-delete-21","(*args)","<p>Performs a <code>delete</code> operation in place, returning <em>str</em>,\nor <code>nil</code> if <em>str</em> was not modified.\n"],["delete_at","Array","Array.html#method-i-delete_at","(p1)","<p>Deletes the element at the specified <code>index</code>, returning that\nelement, or <code>nil</code> if the <code>index</code> is out of range. …\n"],["delete_if","Array","Array.html#method-i-delete_if","()","<p>Deletes every element of <code>self</code> for which block evaluates to\n<code>true</code>.\n<p>The array is changed instantly every …\n"],["delete_if","ENV","ENV.html#method-c-delete_if","()","<p>Deletes every environment variable for which the block evaluates to\n<code>true</code>.\n<p>If no block is given an enumerator …\n"],["delete_if","Hash","Hash.html#method-i-delete_if","()","<p>Deletes every key-value pair from <em>hsh</em> for which <em>block</em>\nevaluates to <code>true</code>.\n<p>If no block is given, an enumerator …\n"],["delete_prefix","String","String.html#method-i-delete_prefix","(p1)","<p>Returns a copy of <em>str</em> with leading <code>prefix</code> deleted.\n\n<pre>&quot;hello&quot;.delete_prefix(&quot;hel&quot;) #=&gt; &quot;lo&quot;\n&quot;hello&quot;.delete_prefix(&quot;llo&quot;) ...</pre>\n"],["delete_prefix!","String","String.html#method-i-delete_prefix-21","(p1)","<p>Deletes leading <code>prefix</code> from <em>str</em>, returning\n<code>nil</code> if no change was made.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;hello&quot;</span>.<span class=\"ruby-identifier\">delete_prefix!</span>(<span class=\"ruby-string\">&quot;hel&quot;</span>) <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["delete_suffix","String","String.html#method-i-delete_suffix","(p1)","<p>Returns a copy of <em>str</em> with trailing <code>suffix</code> deleted.\n\n<pre>&quot;hello&quot;.delete_suffix(&quot;llo&quot;) #=&gt; &quot;he&quot;\n&quot;hello&quot;.delete_suffix(&quot;hel&quot;) ...</pre>\n"],["delete_suffix!","String","String.html#method-i-delete_suffix-21","(p1)","<p>Deletes trailing <code>suffix</code> from <em>str</em>, returning\n<code>nil</code> if no change was made.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;hello&quot;</span>.<span class=\"ruby-identifier\">delete_suffix!</span>(<span class=\"ruby-string\">&quot;llo&quot;</span>) <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["denominator","Complex","Complex.html#method-i-denominator","()","<p>Returns the denominator (lcm of both denominator - real and imag).\n<p>See numerator.\n"],["denominator","Float","Float.html#method-i-denominator","()","<p>Returns the denominator (always positive).  The result is machine\ndependent.\n<p>See also Float#numerator …\n"],["denominator","Integer","Integer.html#method-i-denominator","()","<p>Returns 1.\n"],["denominator","Numeric","Numeric.html#method-i-denominator","()","<p>Returns the denominator (always positive).\n"],["denominator","Rational","Rational.html#method-i-denominator","()","<p>Returns the denominator (always positive).\n\n<pre>Rational(7).denominator             #=&gt; 1\nRational(7, 1).denominator ...</pre>\n"],["deprecate_constant","Module","Module.html#method-i-deprecate_constant","(*args)","<p>Makes a list of existing constants deprecated. Attempt to refer to them\nwill produce a warning.\n\n<pre>module ...</pre>\n"],["deq","Queue","Queue.html#method-i-deq","(*args)",""],["deq","SizedQueue","SizedQueue.html#method-i-deq","(*args)",""],["destination_encoding","Encoding::Converter","Encoding/Converter.html#method-i-destination_encoding","()","<p>Returns the destination encoding as an Encoding object.\n"],["destination_encoding","Encoding::InvalidByteSequenceError","Encoding/InvalidByteSequenceError.html#method-i-destination_encoding","()","<p>Returns the destination encoding as an encoding object.\n"],["destination_encoding","Encoding::UndefinedConversionError","Encoding/UndefinedConversionError.html#method-i-destination_encoding","()","<p>Returns the destination encoding as an encoding object.\n"],["destination_encoding_name","Encoding::InvalidByteSequenceError","Encoding/InvalidByteSequenceError.html#method-i-destination_encoding_name","()","<p>Returns the destination encoding name as a string.\n"],["destination_encoding_name","Encoding::UndefinedConversionError","Encoding/UndefinedConversionError.html#method-i-destination_encoding_name","()","<p>Returns the destination encoding name as a string.\n"],["detach","Process","Process.html#method-c-detach","(p1)","<p>Some operating systems retain the status of terminated child processes\nuntil the parent collects that …\n"],["detect","Enumerable","Enumerable.html#method-i-detect","(*args)","<p>Passes each entry in <em>enum</em> to <em>block</em>. Returns the first for\nwhich <em>block</em> is not false.  If no object matches, …\n"],["dev","File::Stat","File/Stat.html#method-i-dev","()","<p>Returns an integer representing the device on which <em>stat</em> resides.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">dev</span>   <span class=\"ruby-comment\">#=&gt; 774</span>\n</pre>\n"],["dev_major","File::Stat","File/Stat.html#method-i-dev_major","()","<p>Returns the major part of <code>File_Stat#dev</code> or <code>nil</code>.\n\n<pre>File.stat(&quot;/dev/fd1&quot;).dev_major   #=&gt; 2\nFile.stat(&quot;/dev/tty&quot;).dev_major ...</pre>\n"],["dev_minor","File::Stat","File/Stat.html#method-i-dev_minor","()","<p>Returns the minor part of <code>File_Stat#dev</code> or <code>nil</code>.\n\n<pre>File.stat(&quot;/dev/fd1&quot;).dev_minor   #=&gt; 1\nFile.stat(&quot;/dev/tty&quot;).dev_minor ...</pre>\n"],["difference","Array","Array.html#method-i-difference","(*args)","<p>Array Difference\n<p>Returns a new array that is a copy of the original array, removing all\noccurrences of …\n"],["dig","Array","Array.html#method-i-dig","(*args)","<p>Extracts the nested value specified by the sequence of <em>idx</em> objects\nby calling <code>dig</code> at each step, returning …\n"],["dig","Hash","Hash.html#method-i-dig","(*args)","<p>Extracts the nested value specified by the sequence of <em>key</em> objects\nby calling <code>dig</code> at each step, returning …\n"],["dig","Struct","Struct.html#method-i-dig","(*args)","<p>Extracts the nested value specified by the sequence of <code>key</code>\nobjects by calling <code>dig</code> at each step, returning …\n"],["digits","Integer","Integer.html#method-i-digits","(*args)","<p>Returns the digits of <code>int</code>&#39;s place-value representation\nwith radix <code>base</code> (default: 10). The digits …\n"],["directory?","File","File.html#method-c-directory-3F","(p1)","<p>Returns <code>true</code> if the named file is a directory, or a symlink\nthat points at a directory, and <code>false</code> otherwise. …\n"],["directory?","File::Stat","File/Stat.html#method-i-directory-3F","()","<p>Returns <code>true</code> if the named file is a directory, or a symlink\nthat points at a directory, and <code>false</code> otherwise. …\n"],["directory?","FileTest","FileTest.html#method-i-directory-3F","(p1)","<p>Returns <code>true</code> if the named file is a directory, or a symlink\nthat points at a directory, and <code>false</code> otherwise. …\n"],["dirname","File","File.html#method-c-dirname","(p1)","<p>Returns all components of the filename given in <em>file_name</em> except\nthe last one (after first stripping …\n"],["disable","GC","GC.html#method-c-disable","()","<p>Disables garbage collection, returning <code>true</code> if garbage\ncollection was already disabled.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">GC</span>.<span class=\"ruby-identifier\">disable</span>   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["disable","GC::Profiler","GC/Profiler.html#method-c-disable","()","<p>Stops the GC profiler.\n"],["disable","TracePoint","TracePoint.html#method-i-disable","()","<p>Deactivates the trace\n<p>Return true if trace was enabled. Return false if trace was disabled.\n\n<pre>trace.enabled? ...</pre>\n"],["disasm","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-disasm","()","<p>Returns the instruction sequence as a <code>String</code> in human readable\nform.\n\n<pre>puts RubyVM::InstructionSequence.compile(&#39;1 ...</pre>\n"],["disasm","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-c-disasm","(p1)","<p>Takes <code>body</code>, a Method or Proc object, and returns a String with\nthe human readable instructions for <code>body</code> …\n"],["disassemble","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-disassemble","()","<p>Returns the instruction sequence as a <code>String</code> in human readable\nform.\n\n<pre>puts RubyVM::InstructionSequence.compile(&#39;1 ...</pre>\n"],["disassemble","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-c-disassemble","(p1)","<p>Takes <code>body</code>, a Method or Proc object, and returns a String with\nthe human readable instructions for <code>body</code> …\n"],["display","Object","Object.html#method-i-display","(*args)","<p>Prints <em>obj</em> on the given port (default <code>$&gt;</code>).\nEquivalent to:\n\n<pre>def display(port=$&gt;)\n  port.write self\n  ...</pre>\n"],["div","Integer","Integer.html#method-i-div","(p1)","<p>Performs integer division: returns the integer result of dividing\n<code>int</code> by <code>numeric</code>.\n"],["div","Numeric","Numeric.html#method-i-div","(p1)","<p>Uses <code>/</code> to perform division, then converts the result to an\ninteger. Numeric does not define the <code>/</code> operator; …\n"],["divmod","Float","Float.html#method-i-divmod","(p1)","<p>See Numeric#divmod.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">42.0</span>.<span class=\"ruby-identifier\">divmod</span>(<span class=\"ruby-value\">6</span>)   <span class=\"ruby-comment\">#=&gt; [7, 0.0]</span>\n<span class=\"ruby-value\">42.0</span>.<span class=\"ruby-identifier\">divmod</span>(<span class=\"ruby-value\">5</span>)   <span class=\"ruby-comment\">#=&gt; [8, 2.0]</span>\n</pre>\n"],["divmod","Integer","Integer.html#method-i-divmod","(p1)","<p>See Numeric#divmod.\n"],["divmod","Numeric","Numeric.html#method-i-divmod","(p1)","<p>Returns an array containing the quotient and modulus obtained by dividing\n<code>num</code> by <code>numeric</code>.\n<p>If <code>q, r = x.divmod</code> …\n"],["do_until","Object","Object.html#method-i-do_until","()",""],["do_while","Object","Object.html#method-i-do_while","()",""],["downcase","String","String.html#method-i-downcase","(*args)","<p>Returns a copy of <em>str</em> with all uppercase letters replaced with\ntheir lowercase counterparts. Which letters …\n"],["downcase","Symbol","Symbol.html#method-i-downcase","(*args)","<p>Same as <code>sym.to_s.downcase.intern</code>.\n"],["downcase!","String","String.html#method-i-downcase-21","(*args)","<p>Downcases the contents of <em>str</em>, returning <code>nil</code> if no\nchanges were made.\n<p>See String#downcase for meaning …\n"],["downto","Integer","Integer.html#method-i-downto","(p1)","<p>Iterates the given block, passing in decreasing values from\n<code>int</code> down to and including <code>limit</code>.\n<p>If no block …\n"],["drop","Array","Array.html#method-i-drop","(p1)","<p>Drops first <code>n</code> elements from <code>ary</code> and returns the\nrest of the elements in an array.\n<p>If a negative number …\n"],["drop","Enumerable","Enumerable.html#method-i-drop","(p1)","<p>Drops first n elements from <em>enum</em>, and returns rest elements in an\narray.\n\n<pre>a = [1, 2, 3, 4, 5, 0]\na.drop(3) ...</pre>\n"],["drop","Enumerator::Lazy","Enumerator/Lazy.html#method-i-drop","(p1)","<p>Like Enumerable#drop, but chains operation to be lazy-evaluated.\n"],["drop_while","Array","Array.html#method-i-drop_while","()","<p>Drops elements up to, but not including, the first element for which the\nblock returns <code>nil</code> or <code>false</code> and …\n"],["drop_while","Enumerable","Enumerable.html#method-i-drop_while","()","<p>Drops elements up to, but not including, the first element for which the\nblock returns <code>nil</code> or <code>false</code> and …\n"],["drop_while","Enumerator::Lazy","Enumerator/Lazy.html#method-i-drop_while","()","<p>Like Enumerable#drop_while, but chains operation to be lazy-evaluated.\n"],["dst?","Time","Time.html#method-i-dst-3F","()","<p>Returns <code>true</code> if <em>time</em> occurs during Daylight Saving\nTime in its time zone.\n\n<pre># CST6CDT:\n  Time.local(2000, ...</pre>\n"],["dummy?","Encoding","Encoding.html#method-i-dummy-3F","()","<p>Returns true for dummy encodings. A dummy encoding is an encoding for which\ncharacter handling is not …\n"],["dump","Marshal","Marshal.html#method-c-dump","(p1, p2 = v2, p3 = v3)","<p>Serializes obj and all descendant objects. If anIO is specified, the\nserialized data will be written …\n"],["dump","String","String.html#method-i-dump","()","<p>Returns a quoted version of the string with all non-printing characters\nreplaced by <code>\\xHH</code> notation and …\n"],["dup","Numeric","Numeric.html#method-i-dup","()","<p>Returns the receiver.\n"],["dup","Object","Object.html#method-i-dup","()","<p>Produces a shallow copy of <em>obj</em>—the instance variables of\n<em>obj</em> are copied, but not the objects they reference. …\n"],["each","ARGF","ARGF.html#method-i-each","(*args)","<p>Returns an enumerator which iterates over each line (separated by\n<em>sep</em>, which defaults to your platform&#39;s …\n"],["each","Array","Array.html#method-i-each","()","<p>Calls the given block once for each element in <code>self</code>, passing\nthat element as a parameter.  Returns the …\n"],["each","Dir","Dir.html#method-i-each","()","<p>Calls the block once for each entry in this directory, passing the filename\nof each entry as a parameter …\n"],["each","ENV","ENV.html#method-c-each","()","<p>Yields each environment variable name and its value as a 2-element Array:\n\n<pre>h = {}\nENV.each_pair { |name, ...</pre>\n"],["each","Enumerator","Enumerator.html#method-i-each","(*args)","<p>Iterates over the block according to how this Enumerator was constructed.\nIf no block and no arguments …\n"],["each","Enumerator::ArithmeticSequence","Enumerator/ArithmeticSequence.html#method-i-each","()",""],["each","Enumerator::Chain","Enumerator/Chain.html#method-i-each","(*args)","<p>Iterates over the elements of the first enumerable by calling the “each”\nmethod on it with …\n"],["each","Hash","Hash.html#method-i-each","()","<p>Calls <em>block</em> once for each key in <em>hsh</em>, passing the\nkey-value pair as parameters.\n<p>If no block is given, …\n"],["each","IO","IO.html#method-i-each","(*args)","<p>Executes the block for every line in <em>ios</em>, where lines are\nseparated by <em>sep</em>. <em>ios</em> must be opened for reading …\n"],["each","Integer","Integer.html#method-i-each","()",""],["each","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-each","()","<p>Iterates over keys and objects in a weakly referenced object\n"],["each","Range","Range.html#method-i-each","()","<p>Iterates over the elements of range, passing each in turn to the block.\n<p>The <code>each</code> method can only be used …\n"],["each","Struct","Struct.html#method-i-each","()","<p>Yields the value of each struct member in order.  If no block is given an\nenumerator is returned.\n\n<pre>Customer ...</pre>\n"],["each_builtin","RubyVM","RubyVM.html#method-c-each_builtin","()",""],["each_byte","ARGF","ARGF.html#method-i-each_byte","()","<p>Iterates over each byte of each file in <code>ARGV</code>. A byte is\nreturned as an <code>Integer</code> in the range 0..255.\n<p>This …\n"],["each_byte","IO","IO.html#method-i-each_byte","()","<p>Calls the given block once for each byte (0..255) in <em>ios</em>, passing\nthe byte as an argument. The stream …\n"],["each_byte","String","String.html#method-i-each_byte","()","<p>Passes each byte in <em>str</em> to the given block, or returns an\nenumerator if no block is given.\n\n<pre>&quot;hello&quot;.each_byte ...</pre>\n"],["each_char","ARGF","ARGF.html#method-i-each_char","()","<p>Iterates over each character of each file in <code>ARGF</code>.\n<p>This method allows you to treat the files supplied …\n"],["each_char","IO","IO.html#method-i-each_char","()","<p>Calls the given block once for each character in <em>ios</em>, passing the\ncharacter as an argument. The stream …\n"],["each_char","String","String.html#method-i-each_char","()","<p>Passes each character in <em>str</em> to the given block, or returns an\nenumerator if no block is given.\n\n<pre>&quot;hello&quot;.each_char ...</pre>\n"],["each_child","Dir","Dir.html#method-c-each_child","(*args)","<p>Calls the block once for each entry except for “.” and “..” in the named\ndirectory, …\n"],["each_child","Dir","Dir.html#method-i-each_child","()","<p>Calls the block once for each entry except for “.” and “..” in this\ndirectory, passing …\n"],["each_child","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-each_child","()","<p>Iterate all direct child instruction sequences. Iteration order is\nimplementation/version defined so …\n"],["each_codepoint","ARGF","ARGF.html#method-i-each_codepoint","()","<p>Iterates over each codepoint of each file in <code>ARGF</code>.\n<p>This method allows you to treat the files supplied …\n"],["each_codepoint","IO","IO.html#method-i-each_codepoint","()","<p>Passes the Integer ordinal of each character in <em>ios</em>, passing the\ncodepoint as an argument. The stream …\n"],["each_codepoint","String","String.html#method-i-each_codepoint","()","<p>Passes the Integer ordinal of each character in <em>str</em>, also known as\na <em>codepoint</em> when applied to Unicode …\n"],["each_cons","Enumerable","Enumerable.html#method-i-each_cons","(p1)","<p>Iterates the given block for each array of consecutive &lt;n&gt; elements. \nIf no block is given, returns …\n"],["each_entry","Enumerable","Enumerable.html#method-i-each_entry","(*args)","<p>Calls <em>block</em> once for each element in <code>self</code>, passing\nthat element as a parameter, converting multiple values …\n"],["each_grapheme_cluster","String","String.html#method-i-each_grapheme_cluster","()","<p>Passes each grapheme cluster in <em>str</em> to the given block, or returns\nan enumerator if no block is given. …\n"],["each_index","Array","Array.html#method-i-each_index","()","<p>Same as Array#each, but passes the <code>index</code> of the element\ninstead of the element itself.\n<p>An Enumerator is …\n"],["each_key","ENV","ENV.html#method-c-each_key","()","<p>Yields each environment variable name:\n\n<pre>ENV.replace(&#39;foo&#39; =&gt; &#39;0&#39;, &#39;bar&#39; =&gt; &#39;1&#39;) # =&gt; ENV\nnames = []\nENV.each_key ...</pre>\n"],["each_key","Hash","Hash.html#method-i-each_key","()","<p>Calls <em>block</em> once for each key in <em>hsh</em>, passing the key as\na parameter.\n<p>If no block is given, an enumerator …\n"],["each_key","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-each_key","()","<p>Iterates over keys and objects in a weakly referenced object\n"],["each_line","ARGF","ARGF.html#method-i-each_line","(*args)","<p>Returns an enumerator which iterates over each line (separated by\n<em>sep</em>, which defaults to your platform&#39;s …\n"],["each_line","IO","IO.html#method-i-each_line","(*args)","<p>Executes the block for every line in <em>ios</em>, where lines are\nseparated by <em>sep</em>. <em>ios</em> must be opened for reading …\n"],["each_line","String","String.html#method-i-each_line","(*args)","<p>Splits <em>str</em> using the supplied parameter as the record separator\n(<code>$/</code> by default), passing each substring …\n"],["each_object","ObjectSpace","ObjectSpace.html#method-c-each_object","(*args)","<p>Calls the block once for each living, nonimmediate object in this Ruby\nprocess. If <em>module</em> is specified, …\n"],["each_pair","ENV","ENV.html#method-c-each_pair","()","<p>Yields each environment variable name and its value as a 2-element Array:\n\n<pre>h = {}\nENV.each_pair { |name, ...</pre>\n"],["each_pair","Hash","Hash.html#method-i-each_pair","()","<p>Calls <em>block</em> once for each key in <em>hsh</em>, passing the\nkey-value pair as parameters.\n<p>If no block is given, …\n"],["each_pair","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-each_pair","()","<p>Iterates over keys and objects in a weakly referenced object\n"],["each_pair","Struct","Struct.html#method-i-each_pair","()","<p>Yields the name and value of each struct member in order.  If no block is\ngiven an enumerator is returned. …\n"],["each_slice","Enumerable","Enumerable.html#method-i-each_slice","(p1)","<p>Iterates the given block for each slice of &lt;n&gt; elements.  If no block\nis given, returns an enumerator. …\n"],["each_value","ENV","ENV.html#method-c-each_value","()","<p>Yields each environment variable value:\n\n<pre>ENV.replace(&#39;foo&#39; =&gt; &#39;0&#39;, &#39;bar&#39; =&gt; &#39;1&#39;) # =&gt; ENV\nvalues = []\nENV.each_value ...</pre>\n"],["each_value","Hash","Hash.html#method-i-each_value","()","<p>Calls <em>block</em> once for each key in <em>hsh</em>, passing the value\nas a parameter.\n<p>If no block is given, an enumerator …\n"],["each_value","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-each_value","()","<p>Iterates over keys and objects in a weakly referenced object\n"],["each_with_index","Enumerable","Enumerable.html#method-i-each_with_index","(*args)","<p>Calls <em>block</em> with two arguments, the item and its index, for each\nitem in <em>enum</em>.  Given arguments are passed …\n"],["each_with_index","Enumerator","Enumerator.html#method-i-each_with_index","()","<p>Same as Enumerator#with_index(0), i.e. there is no starting offset.\n<p>If no block is given, a new Enumerator …\n"],["each_with_object","Enumerable","Enumerable.html#method-i-each_with_object","(p1)","<p>Iterates the given block for each element with an arbitrary object given,\nand returns the initially given …\n"],["each_with_object","Enumerator","Enumerator.html#method-i-each_with_object","(p1)","<p>Iterates the given block for each element with an arbitrary object,\n<code>obj</code>, and returns <code>obj</code>\n<p>If no block is …\n"],["eager","Enumerator::Lazy","Enumerator/Lazy.html#method-i-eager","()","<p>Returns a non-lazy Enumerator converted from the lazy enumerator.\n"],["egid","Process","Process.html#method-c-egid","()","<p>Returns the effective group ID for this process. Not available on all\nplatforms.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">egid</span>   <span class=\"ruby-comment\">#=&gt; 500</span>\n</pre>\n"],["egid=","Process","Process.html#method-c-egid-3D","(p1)","<p>Sets the effective group ID for this process. Not available on all\nplatforms.\n"],["eid","Process::GID","Process/GID.html#method-c-eid","()","<p>Returns the effective group ID for this process. Not available on all\nplatforms.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">egid</span>   <span class=\"ruby-comment\">#=&gt; 500</span>\n</pre>\n"],["eid","Process::UID","Process/UID.html#method-c-eid","()","<p>Returns the effective user ID for this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">euid</span>   <span class=\"ruby-comment\">#=&gt; 501</span>\n</pre>\n"],["empty?","Array","Array.html#method-i-empty-3F","()","<p>Returns <code>true</code> if <code>self</code> contains no elements.\n\n<pre class=\"ruby\">[].<span class=\"ruby-identifier\">empty?</span>   <span class=\"ruby-comment\">#=&gt; true</span>\n</pre>\n"],["empty?","Dir","Dir.html#method-c-empty-3F","(p1)","<p>Returns <code>true</code> if the named file is an empty directory,\n<code>false</code> if it is not a directory or non-empty.\n"],["empty?","ENV","ENV.html#method-c-empty-3F","()","<p>Returns true when there are no environment variables\n"],["empty?","File","File.html#method-c-empty-3F","(p1)","<p>Returns <code>true</code> if the named file exists and has a zero size.\n<p><em>file_name</em> can be an IO object.\n"],["empty?","FileTest","FileTest.html#method-i-empty-3F","(p1)","<p>Returns <code>true</code> if the named file exists and has a zero size.\n<p><em>file_name</em> can be an IO object.\n"],["empty?","Hash","Hash.html#method-i-empty-3F","()","<p>Returns <code>true</code> if <em>hsh</em> contains no key-value pairs.\n\n<pre class=\"ruby\">{}.<span class=\"ruby-identifier\">empty?</span>   <span class=\"ruby-comment\">#=&gt; true</span>\n</pre>\n"],["empty?","Queue","Queue.html#method-i-empty-3F","()","<p>Returns <code>true</code> if the queue is empty.\n"],["empty?","SizedQueue","SizedQueue.html#method-i-empty-3F","()","<p>Returns <code>true</code> if the queue is empty.\n"],["empty?","String","String.html#method-i-empty-3F","()","<p>Returns <code>true</code> if <em>str</em> has a length of zero.\n\n<pre>&quot;hello&quot;.empty?   #=&gt; false\n&quot; &quot;.empty?       #=&gt; false\n&quot;&quot;.empty? ...</pre>\n"],["empty?","Symbol","Symbol.html#method-i-empty-3F","()","<p>Returns whether <em>sym</em> is :“” or not.\n"],["enable","GC","GC.html#method-c-enable","()","<p>Enables garbage collection, returning <code>true</code> if garbage\ncollection was previously disabled.\n\n<pre>GC.disable  ...</pre>\n"],["enable","GC::Profiler","GC/Profiler.html#method-c-enable","()","<p>Starts the GC profiler.\n"],["enable","TracePoint","TracePoint.html#method-i-enable","(target: nil, target_line: nil, target_thread: nil)","<p>Activates the trace.\n<p>Returns <code>true</code> if trace was enabled. Returns <code>false</code>\nif trace was disabled.\n\n<pre>trace.enabled? ...</pre>\n"],["enabled?","GC::Profiler","GC/Profiler.html#method-c-enabled-3F","()","<p>The current status of GC profile mode.\n"],["enabled?","RubyVM::MJIT","RubyVM/MJIT.html#method-c-enabled-3F","()","<p>Returns true if JIT is enabled\n"],["enabled?","TracePoint","TracePoint.html#method-i-enabled-3F","()","<p>The current status of the trace\n"],["enclose","ThreadGroup","ThreadGroup.html#method-i-enclose","()","<p>Prevents threads from being added to or removed from the receiving\nThreadGroup.\n<p>New threads can still …\n"],["enclosed?","ThreadGroup","ThreadGroup.html#method-i-enclosed-3F","()","<p>Returns <code>true</code> if the <code>thgrp</code> is enclosed. See also\nThreadGroup#enclose.\n"],["encode","String","String.html#method-i-encode","(*args)","<p>The first form returns a copy of <code>str</code> transcoded to encoding\n<code>encoding</code>. The second form returns a copy …\n"],["encode!","String","String.html#method-i-encode-21","(*args)","<p>The first form transcodes the contents of <em>str</em> from str.encoding to\n<code>encoding</code>. The second form transcodes …\n"],["encoding","Regexp","Regexp.html#method-i-encoding","()","<p>Returns the Encoding object that represents the encoding of obj.\n"],["encoding","Ripper","Ripper.html#method-i-encoding","()","<p>Return encoding of the source.\n"],["encoding","String","String.html#method-i-encoding","()","<p>Returns the Encoding object that represents the encoding of obj.\n"],["encoding","Symbol","Symbol.html#method-i-encoding","()","<p>Returns the Encoding object that represents the encoding of <em>sym</em>.\n"],["end","Enumerator::ArithmeticSequence","Enumerator/ArithmeticSequence.html#method-i-end","()",""],["end","MatchData","MatchData.html#method-i-end","(p1)","<p>Returns the offset of the character immediately following the end of the\n<em>n</em>th element of the match array …\n"],["end","Range","Range.html#method-i-end","()","<p>Returns the object that defines the end of the range.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">10</span>).<span class=\"ruby-identifier\">end</span>    <span class=\"ruby-comment\">#=&gt; 10</span>\n(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">...</span><span class=\"ruby-value\">10</span>).<span class=\"ruby-identifier\">end</span>   <span class=\"ruby-comment\">#=&gt; 10</span>\n</pre>\n"],["end_seen?","Ripper","Ripper.html#method-i-end_seen-3F","()","<p>Return true if parsed source ended by +_<em>END</em>_+.\n"],["end_with?","String","String.html#method-i-end_with-3F","(*args)","<p>Returns true if <code>str</code> ends with one of the <code>suffixes</code>\ngiven.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;hello&quot;</span>.<span class=\"ruby-identifier\">end_with?</span>(<span class=\"ruby-string\">&quot;ello&quot;</span>)               <span class=\"ruby-comment\">#=&gt; true ...</span>\n</pre>\n"],["end_with?","Symbol","Symbol.html#method-i-end_with-3F","(*args)","<p>Returns true if <code>sym</code> ends with one of the <code>suffixes</code>\ngiven.\n\n<pre class=\"ruby\">:<span class=\"ruby-identifier\">hello</span>.<span class=\"ruby-identifier\">end_with?</span>(<span class=\"ruby-string\">&quot;ello&quot;</span>)               <span class=\"ruby-comment\">#=&gt; true ...</span>\n</pre>\n"],["enq","Queue","Queue.html#method-i-enq","(p1)",""],["enq","SizedQueue","SizedQueue.html#method-i-enq","(*args)",""],["entries","Dir","Dir.html#method-c-entries","(*args)","<p>Returns an array containing all of the filenames in the given directory.\nWill raise a SystemCallError …\n"],["entries","Enumerable","Enumerable.html#method-i-entries","(*args)","<p>Returns an array containing the items in <em>enum</em>.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">7</span>).<span class=\"ruby-identifier\">to_a</span>                       <span class=\"ruby-comment\">#=&gt; [1, 2, 3, 4, 5, 6, ...</span>\n</pre>\n"],["entries","Range","Range.html#method-i-entries","()","<p>Returns an array containing the items in the range.\n\n<pre>(1..7).to_a  #=&gt; [1, 2, 3, 4, 5, 6, 7]\n(1..).to_a ...</pre>\n"],["enum_for","Enumerator::Lazy","Enumerator/Lazy.html#method-i-enum_for","(*args)","<p>Similar to Object#to_enum, except it returns a lazy enumerator. This makes\nit easy to define Enumerable …\n"],["enum_for","Object","Object.html#method-i-enum_for","(*args)","<p>Creates a new Enumerator which will enumerate by calling\n<code>method</code> on <code>obj</code>, passing <code>args</code> if any.\nWhat was …\n"],["eof","ARGF","ARGF.html#method-i-eof","()","<p>Returns true if the current file in <code>ARGF</code> is at end of file,\ni.e. it has no data to read. The stream must …\n"],["eof","IO","IO.html#method-i-eof","()","<p>Returns true if <em>ios</em> is at end of file that means there are no more\ndata to read. The stream must be opened …\n"],["eof?","ARGF","ARGF.html#method-i-eof-3F","()","<p>Returns true if the current file in <code>ARGF</code> is at end of file,\ni.e. it has no data to read. The stream must …\n"],["eof?","IO","IO.html#method-i-eof-3F","()","<p>Returns true if <em>ios</em> is at end of file that means there are no more\ndata to read. The stream must be opened …\n"],["eql?","Array","Array.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> if <code>self</code> and <code>other</code> are\nthe same object, or are both arrays with the same content (according …\n"],["eql?","Enumerator::ArithmeticSequence","Enumerator/ArithmeticSequence.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> only if <code>obj</code> is an\nEnumerator::ArithmeticSequence, has equivalent begin, end, step, and  …\n"],["eql?","Float","Float.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> only if <code>obj</code> is a Float with the same\nvalue as <code>float</code>. Contrast this with Float#==, which …\n"],["eql?","Hash","Hash.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> if <em>hash</em> and <em>other</em> are both\nhashes with the same content. The orders of each hashes are not …\n"],["eql?","MatchData","MatchData.html#method-i-eql-3F","(p1)","<p>Equality—Two matchdata are equal if their target strings, patterns, and\nmatched positions are identical. …\n"],["eql?","Method","Method.html#method-i-eql-3F","(p1)","<p>Two method objects are equal if they are bound to the same object and refer\nto the same method definition …\n"],["eql?","Numeric","Numeric.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> if <code>num</code> and <code>numeric</code> are\nthe same type and have equal values.  Contrast this with Numeric#==, …\n"],["eql?","Object","Object.html#method-i-eql-3F","(p1)","<p>Equality — At the Object level, #== returns <code>true</code> only if\n<code>obj</code> and <code>other</code> are the same object.  Typically …\n"],["eql?","Range","Range.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> only if <code>obj</code> is a Range, has\nequivalent begin and end items (by comparing them with <code>eql?</code> …\n"],["eql?","Regexp","Regexp.html#method-i-eql-3F","(p1)","<p>Equality—Two regexps are equal if their patterns are identical, they have\nthe same character set code, …\n"],["eql?","String","String.html#method-i-eql-3F","(p1)","<p>Two strings are equal if they have the same length and content.\n"],["eql?","Struct","Struct.html#method-i-eql-3F","(p1)","<p>Hash equality—<code>other</code> and <code>struct</code> refer to the same\nhash key if they have the same struct subclass and …\n"],["eql?","Time","Time.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> if <em>time</em> and <code>other_time</code> are\nboth Time objects with the same seconds and fractional seconds. …\n"],["eql?","UnboundMethod","UnboundMethod.html#method-i-eql-3F","(p1)","<p>Two method objects are equal if they are bound to the same object and refer\nto the same method definition …\n"],["equal?","BasicObject","BasicObject.html#method-i-equal-3F","(p1)","<p>Equality — At the Object level, #== returns <code>true</code> only if\n<code>obj</code> and <code>other</code> are the same object.  Typically …\n"],["erf","Math","Math.html#method-c-erf","(p1)","<p>Calculates the error function of <code>x</code>.\n<p>Domain: (-INFINITY, INFINITY)\n<p>Codomain: (-1, 1)\n"],["erfc","Math","Math.html#method-c-erfc","(p1)","<p>Calculates the complementary error function of x.\n<p>Domain: (-INFINITY, INFINITY)\n<p>Codomain: (0, 2)\n"],["errno","SystemCallError","SystemCallError.html#method-i-errno","()","<p>Return this SystemCallError&#39;s error number.\n"],["error?","Ripper","Ripper.html#method-i-error-3F","()","<p>Return true if parsed source has errors.\n"],["error_bytes","Encoding::InvalidByteSequenceError","Encoding/InvalidByteSequenceError.html#method-i-error_bytes","()","<p>Returns the discarded bytes when Encoding::InvalidByteSequenceError occurs.\n\n<pre>ec = Encoding::Converter.new(&quot;EUC-JP&quot;, ...</pre>\n"],["error_char","Encoding::UndefinedConversionError","Encoding/UndefinedConversionError.html#method-i-error_char","()","<p>Returns the one-character string which cause\nEncoding::UndefinedConversionError.\n\n<pre>ec = Encoding::Converter.new(&quot;ISO-8859-1&quot;, ...</pre>\n"],["escape","Regexp","Regexp.html#method-c-escape","(p1)","<p>Escapes any characters that would have special meaning in a regular\nexpression. Returns a new escaped …\n"],["euid","Process","Process.html#method-c-euid","()","<p>Returns the effective user ID for this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">euid</span>   <span class=\"ruby-comment\">#=&gt; 501</span>\n</pre>\n"],["euid=","Process","Process.html#method-c-euid-3D","(p1)","<p>Sets the effective user ID for this process. Not available on all\nplatforms.\n"],["eval","Binding","Binding.html#method-i-eval","(p1, p2 = v2, p3 = v3)","<p>Evaluates the Ruby expression(s) in <em>string</em>, in the\n<em>binding</em>&#39;s context.  If the optional <em>filename</em> and …\n"],["eval","Kernel","Kernel.html#method-i-eval","(p1, p2 = v2, p3 = v3, p4 = v4)","<p>Evaluates the Ruby expression(s) in <em>string</em>. If <em>binding</em> is\ngiven, which must be a Binding object, the …\n"],["eval","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-eval","()","<p>Evaluates the instruction sequence and returns the result.\n\n<pre>RubyVM::InstructionSequence.compile(&quot;1 + 2&quot;).eval ...</pre>\n"],["eval_script","TracePoint","TracePoint.html#method-i-eval_script","()","<p>Compiled source code (String) on *eval methods on the\n<code>:script_compiled</code> event. If loaded from a file, …\n"],["even?","Integer","Integer.html#method-i-even-3F","()","<p>Returns <code>true</code> if <code>int</code> is an even number.\n"],["event","TracePoint","TracePoint.html#method-i-event","()","<p>Type of event\n<p>See TracePoint@Events for more information.\n"],["exception","Exception","Exception.html#method-c-exception","(*args)","<p>With no argument, or if the argument is the same as the receiver, return\nthe receiver. Otherwise, create …\n"],["exception","Exception","Exception.html#method-i-exception","(*args)","<p>With no argument, or if the argument is the same as the receiver, return\nthe receiver. Otherwise, create …\n"],["exclude_end?","Enumerator::ArithmeticSequence","Enumerator/ArithmeticSequence.html#method-i-exclude_end-3F","()",""],["exclude_end?","Range","Range.html#method-i-exclude_end-3F","()","<p>Returns <code>true</code> if the range excludes its end value.\n\n<pre>(1..5).exclude_end?     #=&gt; false\n(1...5).exclude_end? ...</pre>\n"],["exclusive","Thread","Thread.html#method-c-exclusive","(&block)","<p>Wraps the block in a single, VM-global Mutex.synchronize, returning the\nvalue of the block. A thread …\n"],["exec","Kernel","Kernel.html#method-i-exec","(*args)","<p>Replaces the current process by running the given external\n<em>command</em>, which can take one of the following …\n"],["exec","Process","Process.html#method-c-exec","(*args)","<p>Replaces the current process by running the given external\n<em>command</em>, which can take one of the following …\n"],["executable?","File","File.html#method-c-executable-3F","(p1)","<p>Returns <code>true</code> if the named file is executable by the effective\nuser and group id of this process. See …\n"],["executable?","File::Stat","File/Stat.html#method-i-executable-3F","()","<p>Returns <code>true</code> if <em>stat</em> is executable or if the\noperating system doesn&#39;t distinguish executable files …\n"],["executable?","FileTest","FileTest.html#method-i-executable-3F","(p1)","<p>Returns <code>true</code> if the named file is executable by the effective\nuser and group id of this process. See …\n"],["executable_real?","File","File.html#method-c-executable_real-3F","(p1)","<p>Returns <code>true</code> if the named file is executable by the real user\nand group id of this process. See access(3). …\n"],["executable_real?","File::Stat","File/Stat.html#method-i-executable_real-3F","()","<p>Same as <code>executable?</code>, but tests using the real owner of the\nprocess.\n"],["executable_real?","FileTest","FileTest.html#method-i-executable_real-3F","(p1)","<p>Returns <code>true</code> if the named file is executable by the real user\nand group id of this process. See access(3). …\n"],["exist?","Dir","Dir.html#method-c-exist-3F","(p1)","<p>Returns <code>true</code> if the named file is a directory,\n<code>false</code> otherwise.\n"],["exist?","File","File.html#method-c-exist-3F","(p1)","<p>Return <code>true</code> if the named file exists.\n<p><em>file_name</em> can be an IO object.\n<p>“file exists” means that …\n"],["exist?","FileTest","FileTest.html#method-i-exist-3F","(p1)","<p>Return <code>true</code> if the named file exists.\n<p><em>file_name</em> can be an IO object.\n<p>“file exists” means that …\n"],["exists?","Dir","Dir.html#method-c-exists-3F","(p1)","<p>Deprecated method. Don&#39;t use.\n"],["exists?","File","File.html#method-c-exists-3F","(p1)","<p>Deprecated method. Don&#39;t use.\n"],["exists?","FileTest","FileTest.html#method-i-exists-3F","(p1)","<p>Deprecated method. Don&#39;t use.\n"],["exit","Kernel","Kernel.html#method-i-exit","(*args)","<p>Initiates the termination of the Ruby script by raising the SystemExit\nexception. This exception may …\n"],["exit","Process","Process.html#method-c-exit","(*args)","<p>Initiates the termination of the Ruby script by raising the SystemExit\nexception. This exception may …\n"],["exit","Thread","Thread.html#method-c-exit","()","<p>Terminates the currently running thread and schedules another thread to be\nrun.\n<p>If this thread is already …\n"],["exit","Thread","Thread.html#method-i-exit","()","<p>Terminates <code>thr</code> and schedules another thread to be run,\nreturning the terminated Thread.  If this is the …\n"],["exit!","Kernel","Kernel.html#method-i-exit-21","(*args)","<p>Exits the process immediately. No exit handlers are run. <em>status</em> is\nreturned to the underlying system …\n"],["exit!","Process","Process.html#method-c-exit-21","(*args)","<p>Exits the process immediately. No exit handlers are run. <em>status</em> is\nreturned to the underlying system …\n"],["exit_value","LocalJumpError","LocalJumpError.html#method-i-exit_value","()","<p>Returns the exit value associated with this <code>LocalJumpError</code>.\n"],["exited?","Process::Status","Process/Status.html#method-i-exited-3F","()","<p>Returns <code>true</code> if <em>stat</em> exited normally (for example\nusing an <code>exit()</code> call or finishing the program).\n"],["exitstatus","Process::Status","Process/Status.html#method-i-exitstatus","()","<p>Returns the least significant eight bits of the return code of\n<em>stat</em>. Only available if #exited? is <code>true</code> …\n"],["exp","Math","Math.html#method-c-exp","(p1)","<p>Returns e**x.\n<p>Domain: (-INFINITY, INFINITY)\n<p>Codomain: (0, INFINITY)\n"],["expand_path","File","File.html#method-c-expand_path","(*args)","<p>Converts a pathname to an absolute pathname. Relative paths are referenced\nfrom the current working directory …\n"],["extend","Object","Object.html#method-i-extend","(*args)","<p>Adds to <em>obj</em> the instance methods from each module given as a\nparameter.\n\n<pre>module Mod\n  def hello\n    &quot;Hello ...</pre>\n"],["extend_object","Module","Module.html#method-i-extend_object","(p1)","<p>Extends the specified object by adding this module&#39;s constants and\nmethods (which are added as singleton …\n"],["extended","Module","Module.html#method-i-extended","(p1)","<p>The equivalent of <code>included</code>, but for extended modules.\n\n<pre>module A\n  def self.extended(mod)\n    puts &quot;#{self} ...</pre>\n"],["external_encoding","ARGF","ARGF.html#method-i-external_encoding","()","<p>Returns the external encoding for files read from <code>ARGF</code> as an\n<code>Encoding</code> object. The external encoding is …\n"],["external_encoding","IO","IO.html#method-i-external_encoding","()","<p>Returns the Encoding object that represents the encoding of the file. If\n<em>io</em> is in write mode and no encoding …\n"],["extname","File","File.html#method-c-extname","(p1)","<p>Returns the extension (the portion of file name in <code>path</code>\nstarting from the last period).\n<p>If <code>path</code> is a dotfile, …\n"],["f","Object","Object.html#method-i-f","(m = 100)",""],["fail","Kernel","Kernel.html#method-i-fail","(*args)","<p>With no arguments, raises the exception in <code>$!</code> or raises a\nRuntimeError if <code>$!</code> is <code>nil</code>.  With a single  …\n"],["fcntl","IO","IO.html#method-i-fcntl","(p1, p2 = v2)","<p>Provides a mechanism for issuing low-level commands to control or query\nfile-oriented I/O streams. Arguments …\n"],["fdatasync","IO","IO.html#method-i-fdatasync","()","<p>Immediately writes all buffered data in <em>ios</em> to disk.\n<p>If the underlying operating system does not support …\n"],["fdiv","Complex","Complex.html#method-i-fdiv","(p1)","<p>Performs division as each part is a float, never returns a float.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">11</span>, <span class=\"ruby-value\">22</span>).<span class=\"ruby-identifier\">fdiv</span>(<span class=\"ruby-value\">3</span>)  <span class=\"ruby-comment\">#=&gt; (3.6666666666666665+7.333333333333333i)</span>\n</pre>\n"],["fdiv","Float","Float.html#method-i-fdiv","(p1)","<p>Returns <code>float / numeric</code>, same as Float#/.\n"],["fdiv","Integer","Integer.html#method-i-fdiv","(p1)","<p>Returns the floating point result of dividing <code>int</code> by\n<code>numeric</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">654321</span>.<span class=\"ruby-identifier\">fdiv</span>(<span class=\"ruby-value\">13731</span>)      <span class=\"ruby-comment\">#=&gt; 47.652829364212366 ...</span>\n</pre>\n"],["fdiv","Numeric","Numeric.html#method-i-fdiv","(p1)","<p>Returns float division.\n"],["fdiv","Rational","Rational.html#method-i-fdiv","(p1)","<p>Performs division and returns the value as a Float.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">fdiv</span>(<span class=\"ruby-value\">1</span>)       <span class=\"ruby-comment\">#=&gt; 0.6666666666666666 ...</span>\n</pre>\n"],["feed","Enumerator","Enumerator.html#method-i-feed","(p1)","<p>Sets the value to be returned by the next yield inside <code>e</code>.\n<p>If the value is not set, the yield returns nil. …\n"],["fetch","Array","Array.html#method-i-fetch","(p1, p2 = v2)","<p>Tries to return the element at position <code>index</code>, but throws an\nIndexError exception if the referenced  …\n"],["fetch","ENV","ENV.html#method-c-fetch","(*args)","<p>If <code>name</code> is the name of an environment variable, returns its\nvalue:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ENV</span>[<span class=\"ruby-string\">&#39;foo&#39;</span>] = <span class=\"ruby-string\">&#39;0&#39;</span>\n<span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">fetch</span>(<span class=\"ruby-string\">&#39;foo&#39;</span>) <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["fetch","Hash","Hash.html#method-i-fetch","(*args)","<p>Returns a value from the hash for the given key. If the key can&#39;t be\nfound, there are several options: …\n"],["fetch","Thread","Thread.html#method-i-fetch","(*args)","<p>Returns a fiber-local for the given key. If the key can&#39;t be found,\nthere are several options: With …\n"],["fetch_values","Hash","Hash.html#method-i-fetch_values","(*args)","<p>Returns an array containing the values associated with the given keys but\nalso raises KeyError when one …\n"],["file","ARGF","ARGF.html#method-i-file","()","<p>Returns the current file as an <code>IO</code> or <code>File</code> object.\n<code>$stdin</code> is returned when the current file is STDIN. …\n"],["file?","File","File.html#method-c-file-3F","(p1)","<p>Returns <code>true</code> if the named <code>file</code> exists and is a\nregular file.\n<p><code>file</code> can be an IO object.\n<p>If the <code>file</code> argument …\n"],["file?","File::Stat","File/Stat.html#method-i-file-3F","()","<p>Returns <code>true</code> if <em>stat</em> is a regular file (not a device\nfile, pipe, socket, etc.).\n\n<pre>File.stat(&quot;testfile&quot;).file? ...</pre>\n"],["file?","FileTest","FileTest.html#method-i-file-3F","(p1)","<p>Returns <code>true</code> if the named <code>file</code> exists and is a\nregular file.\n<p><code>file</code> can be an IO object.\n<p>If the <code>file</code> argument …\n"],["filename","ARGF","ARGF.html#method-i-filename","()","<p>Returns the current filename. “-” is returned when the current file is\nSTDIN.\n<p>For example:\n\n<pre>$ ...</pre>\n"],["filename","Ripper","Ripper.html#method-i-filename","()","<p>Return current parsing filename.\n"],["fileno","ARGF","ARGF.html#method-i-fileno","()","<p>Returns an integer representing the numeric file descriptor for the current\nfile. Raises an <code>ArgumentError</code> …\n"],["fileno","Dir","Dir.html#method-i-fileno","()","<p>Returns the file descriptor used in <em>dir</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span> = <span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;..&quot;</span>)\n<span class=\"ruby-identifier\">d</span>.<span class=\"ruby-identifier\">fileno</span>   <span class=\"ruby-comment\">#=&gt; 8</span>\n</pre>\n<p>This method uses dirfd() function …\n"],["fileno","IO","IO.html#method-i-fileno","()","<p>Returns an integer representing the numeric file descriptor for\n<em>ios</em>.\n\n<pre>$stdin.fileno    #=&gt; 0\n$stdout.fileno ...</pre>\n"],["fill","Array","Array.html#method-i-fill","(p1 = v1, p2 = v2)","<p>The first three forms set the selected elements of <code>self</code> (which\nmay be the entire array) to <code>obj</code>.\n<p>A <code>start</code> …\n"],["filter","Array","Array.html#method-i-filter","()","<p>Returns a new array containing all elements of <code>ary</code> for which\nthe given <code>block</code> returns a true value.\n<p>If …\n"],["filter","ENV","ENV.html#method-c-filter","()","<p>Returns a copy of the environment for entries where the block returns true.\n<p>Returns an Enumerator if no …\n"],["filter","Enumerable","Enumerable.html#method-i-filter","()","<p>Returns an array containing all elements of <code>enum</code> for which the\ngiven <code>block</code> returns a true value.\n<p>The  …\n"],["filter","Enumerator::Lazy","Enumerator/Lazy.html#method-i-filter","()","<p>Like Enumerable#select, but chains operation to be lazy-evaluated.\n"],["filter","Hash","Hash.html#method-i-filter","()","<p>Returns a new hash consisting of entries for which the block returns true.\n<p>If no block is given, an enumerator …\n"],["filter","Struct","Struct.html#method-i-filter","(*args)","<p>Yields each member value from the struct to the block and returns an Array\ncontaining the member values …\n"],["filter!","Array","Array.html#method-i-filter-21","()","<p>Invokes the given block passing in successive elements from\n<code>self</code>, deleting elements for which the block …\n"],["filter!","ENV","ENV.html#method-c-filter-21","()","<p>Equivalent to ENV.keep_if but returns <code>nil</code> if no changes were\nmade.\n<p>ENV.filter! is an alias for ENV.select! …\n"],["filter!","Hash","Hash.html#method-i-filter-21","()","<p>Equivalent to Hash#keep_if, but returns <code>nil</code> if no changes were\nmade.\n<p>Hash#filter! is an alias for Hash#select! …\n"],["filter_map","Enumerable","Enumerable.html#method-i-filter_map","()","<p>Returns a new array containing the truthy results (everything except\n<code>false</code> or <code>nil</code>) of running the <code>block</code> …\n"],["filter_map","Enumerator::Lazy","Enumerator/Lazy.html#method-i-filter_map","()","<p>Like Enumerable#filter_map, but chains operation to be lazy-evaluated.\n\n<pre>(1..).lazy.filter_map { |i| i * ...</pre>\n"],["find","Encoding","Encoding.html#method-c-find","(p1)","<p>Search the encoding with specified <em>name</em>. <em>name</em> should be a\nstring.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Encoding</span>.<span class=\"ruby-identifier\">find</span>(<span class=\"ruby-string\">&quot;US-ASCII&quot;</span>)  <span class=\"ruby-comment\">#=&gt; #&lt;Encoding:US-ASCII&gt;</span>\n</pre>\n"],["find","Enumerable","Enumerable.html#method-i-find","(*args)","<p>Passes each entry in <em>enum</em> to <em>block</em>. Returns the first for\nwhich <em>block</em> is not false.  If no object matches, …\n"],["find_all","Enumerable","Enumerable.html#method-i-find_all","()","<p>Returns an array containing all elements of <code>enum</code> for which the\ngiven <code>block</code> returns a true value.\n<p>The  …\n"],["find_all","Enumerator::Lazy","Enumerator/Lazy.html#method-i-find_all","()","<p>Like Enumerable#select, but chains operation to be lazy-evaluated.\n"],["find_index","Array","Array.html#method-i-find_index","(*args)","<p>Returns the <em>index</em> of the first object in <code>ary</code> such\nthat the object is <code>==</code> to <code>obj</code>.\n<p>If a block is given instead …\n"],["find_index","Enumerable","Enumerable.html#method-i-find_index","(p1)","<p>Compares each entry in <em>enum</em> with <em>value</em> or passes to\n<em>block</em>.  Returns the index for the first for which …\n"],["finish","Encoding::Converter","Encoding/Converter.html#method-i-finish","()","<p>Finishes the converter. It returns the last part of the converted string.\n\n<pre>ec = Encoding::Converter.new(&quot;utf-8&quot;, ...</pre>\n"],["finite?","Complex","Complex.html#method-i-finite-3F","()","<p>Returns <code>true</code> if <code>cmp</code>&#39;s real and imaginary\nparts are both finite numbers, otherwise returns <code>false</code>. …\n"],["finite?","Float","Float.html#method-i-finite-3F","()","<p>Returns <code>true</code> if <code>float</code> is a valid IEEE floating\npoint number, i.e. it is not infinite and Float#nan? is …\n"],["finite?","Numeric","Numeric.html#method-i-finite-3F","()","<p>Returns <code>true</code> if <code>num</code> is a finite number, otherwise\nreturns <code>false</code>.\n"],["first","Array","Array.html#method-i-first","(*args)","<p>Returns the first element, or the first <code>n</code> elements, of the\narray. If the array is empty, the first form …\n"],["first","Enumerable","Enumerable.html#method-i-first","(*args)","<p>Returns the first element, or the first <code>n</code> elements, of the\nenumerable. If the enumerable is empty, the …\n"],["first","Enumerator::ArithmeticSequence","Enumerator/ArithmeticSequence.html#method-i-first","(*args)","<p>Returns the first number in this arithmetic sequence, or an array of the\nfirst <code>n</code> elements.\n"],["first","Range","Range.html#method-i-first","(p1)","<p>Returns the first object in the range, or an array of the first\n<code>n</code> elements.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">10</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">20</span>).<span class=\"ruby-identifier\">first</span>     <span class=\"ruby-comment\">#=&gt; 10 ...</span>\n</pre>\n"],["first_column","RubyVM::AbstractSyntaxTree::Node","RubyVM/AbstractSyntaxTree/Node.html#method-i-first_column","()","<p>The column number in the source code where this AST&#39;s text began.\n"],["first_lineno","RubyVM::AbstractSyntaxTree::Node","RubyVM/AbstractSyntaxTree/Node.html#method-i-first_lineno","()","<p>The line number in the source code where this AST&#39;s text began.\n"],["first_lineno","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-first_lineno","()","<p>Returns the number of the first source line where the instruction sequence\nwas loaded from.\n<p>For example, …\n"],["fixed_encoding?","Regexp","Regexp.html#method-i-fixed_encoding-3F","()","<p>Returns false if rxp is applicable to a string with any ASCII compatible\nencoding. Returns true otherwise. …\n"],["flat_map","Enumerable","Enumerable.html#method-i-flat_map","()","<p>Returns a new array with the concatenated results of running <em>block</em>\nonce for every element in <em>enum</em>.\n<p>If …\n"],["flat_map","Enumerator::Lazy","Enumerator/Lazy.html#method-i-flat_map","()","<p>Returns a new lazy enumerator with the concatenated results of running\n<code>block</code> once for every element in …\n"],["flatten","Array","Array.html#method-i-flatten","(*args)","<p>Returns a new array that is a one-dimensional flattening of\n<code>self</code> (recursively).\n<p>That is, for every element …\n"],["flatten","Hash","Hash.html#method-i-flatten","(*args)","<p>Returns a new array that is a one-dimensional flattening of this hash. That\nis, for every key or value …\n"],["flatten!","Array","Array.html#method-i-flatten-21","(*args)","<p>Flattens <code>self</code> in place.\n<p>Returns <code>nil</code> if no modifications were made (i.e., the array\ncontains no subarrays.) …\n"],["flock","File","File.html#method-i-flock","(p1)","<p>Locks or unlocks a file according to <em>locking_constant</em> (a logical\n<em>or</em> of the values in the table below). …\n"],["floor","Float","Float.html#method-i-floor","(*args)","<p>Returns the largest number less than or equal to <code>float</code> with a\nprecision of <code>ndigits</code> decimal digits (default: …\n"],["floor","Integer","Integer.html#method-i-floor","(*args)","<p>Returns the largest number less than or equal to <code>int</code> with a\nprecision of <code>ndigits</code> decimal digits (default: …\n"],["floor","Numeric","Numeric.html#method-i-floor","(*args)","<p>Returns the largest number less than or equal to <code>num</code> with a\nprecision of <code>ndigits</code> decimal digits (default: …\n"],["floor","Rational","Rational.html#method-i-floor","(*args)","<p>Returns the largest number less than or equal to <code>rat</code> with a\nprecision of <code>ndigits</code> decimal digits (default: …\n"],["floor","Time","Time.html#method-i-floor","(*args)","<p>Floors sub seconds to a given precision in decimal digits (0 digits by\ndefault). It returns a new Time …\n"],["flush","IO","IO.html#method-i-flush","()","<p>Flushes any buffered data within <em>ios</em> to the underlying operating\nsystem (note that this is Ruby internal …\n"],["fnmatch","File","File.html#method-c-fnmatch","(p1, p2, p3 = v3)","<p>Returns true if <code>path</code> matches against <code>pattern</code>. \nThe pattern is not a regular expression; instead it follows …\n"],["fnmatch?","File","File.html#method-c-fnmatch-3F","(p1, p2, p3 = v3)","<p>Returns true if <code>path</code> matches against <code>pattern</code>. \nThe pattern is not a regular expression; instead it follows …\n"],["for_fd","IO","IO.html#method-c-for_fd","(*args)","<p>Synonym for IO.new.\n"],["force","Enumerator::Lazy","Enumerator/Lazy.html#method-i-force","()",""],["force_encoding","String","String.html#method-i-force_encoding","(p1)","<p>Changes the encoding to <code>encoding</code> and returns self.\n"],["foreach","Dir","Dir.html#method-c-foreach","(*args)","<p>Calls the block once for each entry in the named directory, passing the\nfilename of each entry as a parameter …\n"],["foreach","IO","IO.html#method-c-foreach","(p1, p2 = v2, p3 = v3, p4 = v4, p5 = {})","<p>Executes the block for every line in the named I/O port, where lines are\nseparated by <em>sep</em>.\n<p>If no block …\n"],["fork","Kernel","Kernel.html#method-i-fork","()","<p>Creates a subprocess. If a block is specified, that block is run in the\nsubprocess, and the subprocess …\n"],["fork","Process","Process.html#method-c-fork","()","<p>Creates a subprocess. If a block is specified, that block is run in the\nsubprocess, and the subprocess …\n"],["fork","Thread","Thread.html#method-c-fork","(*args)","<p>Basically the same as ::new. However, if class Thread is subclassed, then\ncalling <code>start</code> in that subclass …\n"],["format","Kernel","Kernel.html#method-i-format","(*args)","<p>Returns the string resulting from applying <em>format_string</em> to any\nadditional arguments.  Within the format …\n"],["freeze","ENV","ENV.html#method-c-freeze","()","<p>Ruby does not allow ENV to be frozen, so calling ENV.freeze raises\nTypeError.\n"],["freeze","Module","Module.html#method-i-freeze","()","<p>Prevents further modifications to <em>mod</em>.\n<p>This method returns self.\n"],["freeze","Object","Object.html#method-i-freeze","()","<p>Prevents further modifications to <em>obj</em>. A RuntimeError will be\nraised if modification is attempted. There …\n"],["freeze","String","String.html#method-i-freeze","()",""],["frexp","Math","Math.html#method-c-frexp","(p1)","<p>Returns a two-element array containing the normalized fraction (a Float)\nand exponent (an Integer) of …\n"],["friday?","Time","Time.html#method-i-friday-3F","()","<p>Returns <code>true</code> if <em>time</em> represents Friday.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">local</span>(<span class=\"ruby-value\">1987</span>, <span class=\"ruby-value\">12</span>, <span class=\"ruby-value\">18</span>)     <span class=\"ruby-comment\">#=&gt; 1987-12-18 00:00:00 -0600 ...</span>\n</pre>\n"],["from_name","Process::GID","Process/GID.html#method-c-from_name","(p1)","<p>Get the group ID by the <em>name</em>. If the group is not found,\n<code>ArgumentError</code> will be raised.\n\n<pre>Process::GID.from_name(&quot;wheel&quot;) ...</pre>\n"],["from_name","Process::UID","Process/UID.html#method-c-from_name","(p1)","<p>Get the user ID by the <em>name</em>. If the user is not found,\n<code>ArgumentError</code> will be raised.\n\n<pre>Process::UID.from_name(&quot;root&quot;) ...</pre>\n"],["frozen?","Object","Object.html#method-i-frozen-3F","()","<p>Returns the freeze status of <em>obj</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [ <span class=\"ruby-string\">&quot;a&quot;</span>, <span class=\"ruby-string\">&quot;b&quot;</span>, <span class=\"ruby-string\">&quot;c&quot;</span> ]\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">freeze</span>    <span class=\"ruby-comment\">#=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span>\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">frozen?</span>   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["fsync","IO","IO.html#method-i-fsync","()","<p>Immediately writes all buffered data in <em>ios</em> to disk. Note that\n#fsync differs from using IO#sync=. The …\n"],["ftype","File","File.html#method-c-ftype","(p1)","<p>Identifies the type of the named file; the return string is one of\n“<code>file</code>&#39;&#39;, “<code>directory</code>&#39;&#39;, …\n"],["ftype","File::Stat","File/Stat.html#method-i-ftype","()","<p>Identifies the type of <em>stat</em>. The return string is one of:\n“<code>file</code>&#39;&#39;, “<code>directory</code>&#39;&#39;, “ …\n"],["full_message","Exception","Exception.html#method-i-full_message","(p1 = {})","<p>Returns formatted string of <em>exception</em>. The returned string is\nformatted using the same format that Ruby …\n"],["gamma","Math","Math.html#method-c-gamma","(p1)","<p>Calculates the gamma function of x.\n<p>Note that gamma(n) is same as fact(n-1) for integer n &gt; 0. However …\n"],["garbage_collect","GC","GC.html#method-i-garbage_collect","(full_mark: true, immediate_mark: true, immediate_sweep: true)",""],["garbage_collect","ObjectSpace","ObjectSpace.html#method-i-garbage_collect","(full_mark: true, immediate_mark: true, immediate_sweep: true)",""],["garbage_collect","ObjectSpace","ObjectSpace.html#method-c-garbage_collect","(full_mark: true, immediate_mark: true, immediate_sweep: true)",""],["gcd","Integer","Integer.html#method-i-gcd","(p1)","<p>Returns the greatest common divisor of the two integers. The result is\nalways positive. 0.gcd(x) and …\n"],["gcdlcm","Integer","Integer.html#method-i-gcdlcm","(p1)","<p>Returns an array with the greatest common divisor and the least common\nmultiple of the two integers, …\n"],["getbyte","ARGF","ARGF.html#method-i-getbyte","()","<p>Gets the next 8-bit byte (0..255) from <code>ARGF</code>. Returns\n<code>nil</code> if called at the end of the stream.\n<p>For example: …\n"],["getbyte","IO","IO.html#method-i-getbyte","()","<p>Gets the next 8-bit byte (0..255) from <em>ios</em>. Returns\n<code>nil</code> if called at end of file.\n\n<pre>f = File.new(&quot;testfile&quot;) ...</pre>\n"],["getbyte","String","String.html#method-i-getbyte","(p1)","<p>returns the <em>index</em>th byte as an integer.\n"],["getc","ARGF","ARGF.html#method-i-getc","()","<p>Reads the next character from <code>ARGF</code> and returns it as a\n<code>String</code>. Returns <code>nil</code> at the end of the stream. …\n"],["getc","IO","IO.html#method-i-getc","()","<p>Reads a one-character string from <em>ios</em>. Returns <code>nil</code> if\ncalled at end of file.\n\n<pre>f = File.new(&quot;testfile&quot;) ...</pre>\n"],["getegid","Process::Sys","Process/Sys.html#method-c-getegid","()","<p>Returns the effective group ID for this process. Not available on all\nplatforms.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">egid</span>   <span class=\"ruby-comment\">#=&gt; 500</span>\n</pre>\n"],["geteuid","Process::Sys","Process/Sys.html#method-c-geteuid","()","<p>Returns the effective user ID for this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">euid</span>   <span class=\"ruby-comment\">#=&gt; 501</span>\n</pre>\n"],["getgid","Process::Sys","Process/Sys.html#method-c-getgid","()","<p>Returns the (real) group ID for this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">gid</span>   <span class=\"ruby-comment\">#=&gt; 500</span>\n</pre>\n"],["getgm","Time","Time.html#method-i-getgm","()","<p>Returns a new Time object representing <em>time</em> in UTC.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">local</span>(<span class=\"ruby-value\">2000</span>,<span class=\"ruby-value\">1</span>,<span class=\"ruby-value\">1</span>,<span class=\"ruby-value\">20</span>,<span class=\"ruby-value\">15</span>,<span class=\"ruby-value\">1</span>)   <span class=\"ruby-comment\">#=&gt; 2000-01-01 ...</span>\n</pre>\n"],["getlocal","Time","Time.html#method-i-getlocal","(*args)","<p>Returns a new Time object representing <em>time</em> in local time (using\nthe local time zone in effect for this …\n"],["getpgid","Process","Process.html#method-c-getpgid","(p1)","<p>Returns the process group ID for the given process id. Not available on all\nplatforms.\n\n<pre>Process.getpgid(Process.ppid()) ...</pre>\n"],["getpgrp","Process","Process.html#method-c-getpgrp","()","<p>Returns the process group ID for this process. Not available on all\nplatforms.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">getpgid</span>(<span class=\"ruby-value\">0</span>)   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["getpriority","Process","Process.html#method-c-getpriority","(p1, p2)","<p>Gets the scheduling priority for specified process, process group, or user.\n<em>kind</em> indicates the kind of …\n"],["getrlimit","Process","Process.html#method-c-getrlimit","(p1)","<p>Gets the resource limit of the process. <em>cur_limit</em> means current\n(soft) limit and <em>max_limit</em> means maximum …\n"],["gets","ARGF","ARGF.html#method-i-gets","(*args)","<p>Returns the next line from the current file in <code>ARGF</code>.\n<p>By default lines are assumed to be separated by  …\n"],["gets","IO","IO.html#method-i-gets","(*args)","<p>Reads the next “line&#39;&#39; from the I/O stream; lines are separated by\n<em>sep</em>. A separator of <code>nil</code> reads …\n"],["gets","Kernel","Kernel.html#method-i-gets","(*args)","<p>Returns (and assigns to <code>$_</code>) the next line from the list of\nfiles in <code>ARGV</code> (or <code>$*</code>), or from standard input …\n"],["getsid","Process","Process.html#method-c-getsid","(*args)","<p>Returns the session ID for the given process id. If not given, return\ncurrent process sid. Not available …\n"],["getuid","Process::Sys","Process/Sys.html#method-c-getuid","()","<p>Returns the (real) user ID of this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">uid</span>   <span class=\"ruby-comment\">#=&gt; 501</span>\n</pre>\n"],["getutc","Time","Time.html#method-i-getutc","()","<p>Returns a new Time object representing <em>time</em> in UTC.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">local</span>(<span class=\"ruby-value\">2000</span>,<span class=\"ruby-value\">1</span>,<span class=\"ruby-value\">1</span>,<span class=\"ruby-value\">20</span>,<span class=\"ruby-value\">15</span>,<span class=\"ruby-value\">1</span>)   <span class=\"ruby-comment\">#=&gt; 2000-01-01 ...</span>\n</pre>\n"],["getwd","Dir","Dir.html#method-c-getwd","()","<p>Returns the path to the current working directory of this process as a\nstring.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">chdir</span>(<span class=\"ruby-string\">&quot;/tmp&quot;</span>)   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["gid","File::Stat","File/Stat.html#method-i-gid","()","<p>Returns the numeric group id of the owner of <em>stat</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">gid</span>   <span class=\"ruby-comment\">#=&gt; 500</span>\n</pre>\n"],["gid","Process","Process.html#method-c-gid","()","<p>Returns the (real) group ID for this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">gid</span>   <span class=\"ruby-comment\">#=&gt; 500</span>\n</pre>\n"],["gid=","Process","Process.html#method-c-gid-3D","(p1)","<p>Sets the group ID for this process.\n"],["glob","Dir","Dir.html#method-c-glob","(p1, p2 = v2, p3 = {})","<p>Expands <code>pattern</code>, which is a pattern string or an Array of\npattern strings, and returns an array containing …\n"],["global_variables","Kernel","Kernel.html#method-i-global_variables","()","<p>Returns an array of the names of global variables.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">global_variables</span>.<span class=\"ruby-identifier\">grep</span> <span class=\"ruby-regexp\">/std/</span>   <span class=\"ruby-comment\">#=&gt; [:$stdin, :$stdout, ...</span>\n</pre>\n"],["gm","Time","Time.html#method-c-gm","(*args)","<p>Creates a Time object based on given values, interpreted as UTC (GMT). The\nyear must be specified. Other …\n"],["gmt?","Time","Time.html#method-i-gmt-3F","()","<p>Returns <code>true</code> if <em>time</em> represents a time in UTC (GMT).\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">now</span>                        <span class=\"ruby-comment\">#=&gt; 2007-11-19 ...</span>\n</pre>\n"],["gmt_offset","Time","Time.html#method-i-gmt_offset","()","<p>Returns the offset in seconds between the timezone of <em>time</em> and\nUTC.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">gm</span>(<span class=\"ruby-value\">2000</span>,<span class=\"ruby-value\">1</span>,<span class=\"ruby-value\">1</span>,<span class=\"ruby-value\">20</span>,<span class=\"ruby-value\">15</span>,<span class=\"ruby-value\">1</span>)   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["gmtime","Time","Time.html#method-i-gmtime","()","<p>Converts <em>time</em> to UTC (GMT), modifying the receiver.\n\n<pre>t = Time.now   #=&gt; 2007-11-19 08:18:31 -0600\nt.gmt? ...</pre>\n"],["gmtoff","Time","Time.html#method-i-gmtoff","()","<p>Returns the offset in seconds between the timezone of <em>time</em> and\nUTC.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">gm</span>(<span class=\"ruby-value\">2000</span>,<span class=\"ruby-value\">1</span>,<span class=\"ruby-value\">1</span>,<span class=\"ruby-value\">20</span>,<span class=\"ruby-value\">15</span>,<span class=\"ruby-value\">1</span>)   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["grant_privilege","Process::GID","Process/GID.html#method-c-grant_privilege","(p1)","<p>Set the effective group ID, and if possible, the saved group ID of the\nprocess to the given <em>group</em>. Returns …\n"],["grant_privilege","Process::UID","Process/UID.html#method-c-grant_privilege","(p1)","<p>Set the effective user ID, and if possible, the saved user ID of the\nprocess to the given <em>user</em>. Returns …\n"],["grapheme_clusters","String","String.html#method-i-grapheme_clusters","()","<p>Returns an array of grapheme clusters in <em>str</em>.  This is a shorthand\nfor <code>str.each_grapheme_cluster.to_a</code> …\n"],["grep","Enumerable","Enumerable.html#method-i-grep","(p1)","<p>Returns an array of every element in <em>enum</em> for which <code>Pattern\n=== element</code>. If the optional <em>block</em> is supplied, …\n"],["grep","Enumerator::Lazy","Enumerator/Lazy.html#method-i-grep","(p1)","<p>Like Enumerable#grep, but chains operation to be lazy-evaluated.\n"],["grep_v","Enumerable","Enumerable.html#method-i-grep_v","(p1)","<p>Inverted version of Enumerable#grep. Returns an array of every element in\n<em>enum</em> for which not <code>Pattern</code> …\n"],["grep_v","Enumerator::Lazy","Enumerator/Lazy.html#method-i-grep_v","(p1)","<p>Like Enumerable#grep_v, but chains operation to be lazy-evaluated.\n"],["group","Thread","Thread.html#method-i-group","()","<p>Returns the ThreadGroup which contains the given thread, or returns\n<code>nil</code> if <code>thr</code> is not a member of any …\n"],["group_by","Enumerable","Enumerable.html#method-i-group_by","()","<p>Groups the collection by result of the block.  Returns a hash where the\nkeys are the evaluated result …\n"],["groups","Process","Process.html#method-c-groups","()","<p>Get an Array of the group IDs in the supplemental group access list for\nthis process.\n\n<pre>Process.groups  ...</pre>\n"],["groups=","Process","Process.html#method-c-groups-3D","(p1)","<p>Set the supplemental group access list to the given Array of group IDs.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">groups</span>   <span class=\"ruby-comment\">#=&gt; [0, 1, 2, ...</span>\n</pre>\n"],["grpowned?","File","File.html#method-c-grpowned-3F","(p1)","<p>Returns <code>true</code> if the named file exists and the effective group\nid of the calling process is the owner …\n"],["grpowned?","File::Stat","File/Stat.html#method-i-grpowned-3F","()","<p>Returns true if the effective group id of the process is the same as the\ngroup id of <em>stat</em>. On Windows …\n"],["grpowned?","FileTest","FileTest.html#method-i-grpowned-3F","(p1)","<p>Returns <code>true</code> if the named file exists and the effective group\nid of the calling process is the owner …\n"],["gsub","Kernel","Kernel.html#method-i-gsub","(*args)","<p>Equivalent to <code>$_.gsub...</code>, except that <code>$_</code> will be\nupdated if substitution occurs. Available only when …\n"],["gsub","String","String.html#method-i-gsub","(*args)","<p>Returns a copy of <em>str</em> with <em>all</em> occurrences of\n<em>pattern</em> substituted for the second argument. The <em>pattern</em>\n…\n"],["gsub!","String","String.html#method-i-gsub-21","(*args)","<p>Performs the substitutions of String#gsub in place, returning <em>str</em>,\nor <code>nil</code> if no substitutions were performed. …\n"],["h","Object","Object.html#method-i-h","(a = 'H', b = 'w', c = '!')",""],["handle_interrupt","Thread","Thread.html#method-c-handle_interrupt","(p1)","<p>Changes asynchronous interrupt timing.\n<p><em>interrupt</em> means asynchronous event and corresponding procedure …\n"],["has_key?","ENV","ENV.html#method-c-has_key-3F","(p1)","<p>ENV.has_key?, ENV.member?, and ENV.key? are aliases for ENV.include?.\n<p>Returns <code>true</code> if there is an environment …\n"],["has_key?","Hash","Hash.html#method-i-has_key-3F","(p1)","<p>Returns <code>true</code> if the given key is present in <em>hsh</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = { <span class=\"ruby-string\">&quot;a&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">100</span>, <span class=\"ruby-string\">&quot;b&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">200</span> }\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">has_key?</span>(<span class=\"ruby-string\">&quot;a&quot;</span>)   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["has_value?","ENV","ENV.html#method-c-has_value-3F","(p1)","<p>Returns <code>true</code> if there is an environment variable with the\ngiven <code>value</code>.\n"],["has_value?","Hash","Hash.html#method-i-has_value-3F","(p1)","<p>Returns <code>true</code> if the given value is present for some key in\n<em>hsh</em>.\n\n<pre>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; =&gt; 200 }\nh.value?(100) ...</pre>\n"],["hash","Array","Array.html#method-i-hash","()","<p>Compute a hash-code for this array.\n<p>Two arrays with the same content will have the same hash code (and …\n"],["hash","Enumerator::ArithmeticSequence","Enumerator/ArithmeticSequence.html#method-i-hash","()","<p>Compute a hash-value for this arithmetic sequence. Two arithmetic sequences\nwith same begin, end, step, …\n"],["hash","Float","Float.html#method-i-hash","()","<p>Returns a hash code for this float.\n<p>See also Object#hash.\n"],["hash","Hash","Hash.html#method-i-hash","()","<p>Compute a hash-code for this hash. Two hashes with the same content will\nhave the same hash code (and …\n"],["hash","MatchData","MatchData.html#method-i-hash","()","<p>Produce a hash based on the target string, regexp and matched positions of\nthis matchdata.\n<p>See also Object#hash …\n"],["hash","Method","Method.html#method-i-hash","()","<p>Returns a hash value corresponding to the method object.\n<p>See also Object#hash.\n"],["hash","Object","Object.html#method-i-hash","()","<p>Generates an Integer hash value for this object.  This function must have\nthe property that <code>a.eql?(b)</code> …\n"],["hash","Proc","Proc.html#method-i-hash","()","<p>Returns a hash value corresponding to proc body.\n<p>See also Object#hash.\n"],["hash","Range","Range.html#method-i-hash","()","<p>Compute a hash-code for this range. Two ranges with equal begin and end\npoints (using <code>eql?</code>), and the …\n"],["hash","Regexp","Regexp.html#method-i-hash","()","<p>Produce a hash based on the text and options of this regular expression.\n<p>See also Object#hash.\n"],["hash","String","String.html#method-i-hash","()","<p>Returns a hash based on the string&#39;s length, content and encoding.\n<p>See also Object#hash.\n"],["hash","Struct","Struct.html#method-i-hash","()","<p>Returns a hash value based on this struct&#39;s contents.\n<p>See also Object#hash.\n"],["hash","Time","Time.html#method-i-hash","()","<p>Returns a hash code for this Time object.\n<p>See also Object#hash.\n"],["hash","UnboundMethod","UnboundMethod.html#method-i-hash","()","<p>Returns a hash value corresponding to the method object.\n<p>See also Object#hash.\n"],["hex","String","String.html#method-i-hex","()","<p>Treats leading characters from <em>str</em> as a string of hexadecimal\ndigits (with an optional sign and an optional …\n"],["home","Dir","Dir.html#method-c-home","(*args)","<p>Returns the home directory of the current user or the named user if given.\n"],["hour","Time","Time.html#method-i-hour","()","<p>Returns the hour of the day (0..23) for <em>time</em>.\n\n<pre>t = Time.now   #=&gt; 2007-11-19 08:26:20 -0600\nt.hour     ...</pre>\n"],["hypot","Math","Math.html#method-c-hypot","(p1, p2)","<p>Returns sqrt(x**2 + y**2), the hypotenuse of a right-angled triangle with\nsides <code>x</code> and <code>y</code>.\n\n<pre>Math.hypot(3, ...</pre>\n"],["i","Numeric","Numeric.html#method-i-i","()","<p>Returns the corresponding imaginary number. Not available for complex\nnumbers.\n\n<pre>-42.i  #=&gt; (0-42i)\n2.0.i ...</pre>\n"],["id2name","Symbol","Symbol.html#method-i-id2name","()","<p>Returns the name or string corresponding to <em>sym</em>.\n\n<pre class=\"ruby\">:<span class=\"ruby-identifier\">fred</span>.<span class=\"ruby-identifier\">id2name</span>   <span class=\"ruby-comment\">#=&gt; &quot;fred&quot;</span>\n:<span class=\"ruby-identifier\">ginger</span>.<span class=\"ruby-identifier\">to_s</span>    <span class=\"ruby-comment\">#=&gt; &quot;ginger&quot;</span>\n</pre>\n"],["identical?","File","File.html#method-c-identical-3F","(p1, p2)","<p>Returns <code>true</code> if the named files are identical.\n<p><em>file_1</em> and <em>file_2</em> can be an IO object.\n\n<pre>open(&quot;a&quot;, &quot;w&quot;) {} ...</pre>\n"],["identical?","FileTest","FileTest.html#method-i-identical-3F","(p1, p2)","<p>Returns <code>true</code> if the named files are identical.\n<p><em>file_1</em> and <em>file_2</em> can be an IO object.\n\n<pre>open(&quot;a&quot;, &quot;w&quot;) {} ...</pre>\n"],["imag","Complex","Complex.html#method-i-imag","()","<p>Returns the imaginary part.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">7</span>).<span class=\"ruby-identifier\">imaginary</span>      <span class=\"ruby-comment\">#=&gt; 0</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">9</span>, <span class=\"ruby-value\">-4</span>).<span class=\"ruby-identifier\">imaginary</span>  <span class=\"ruby-comment\">#=&gt; -4</span>\n</pre>\n"],["imag","Numeric","Numeric.html#method-i-imag","()","<p>Returns zero.\n"],["imaginary","Complex","Complex.html#method-i-imaginary","()","<p>Returns the imaginary part.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">7</span>).<span class=\"ruby-identifier\">imaginary</span>      <span class=\"ruby-comment\">#=&gt; 0</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">9</span>, <span class=\"ruby-value\">-4</span>).<span class=\"ruby-identifier\">imaginary</span>  <span class=\"ruby-comment\">#=&gt; -4</span>\n</pre>\n"],["imaginary","Numeric","Numeric.html#method-i-imaginary","()","<p>Returns zero.\n"],["include","Module","Module.html#method-i-include","(*args)","<p>Invokes Module.append_features on each parameter in reverse order.\n"],["include?","Array","Array.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if the given <code>object</code> is present in\n<code>self</code> (that is, if any element <code>==</code>\n<code>object</code>), otherwise returns …\n"],["include?","ENV","ENV.html#method-c-include-3F","(p1)","<p>ENV.has_key?, ENV.member?, and ENV.key? are aliases for ENV.include?.\n<p>Returns <code>true</code> if there is an environment …\n"],["include?","Enumerable","Enumerable.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if any member of <em>enum</em> equals\n<em>obj</em>. Equality is tested using <code>==</code>.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">10</span>).<span class=\"ruby-identifier\">include?</span> <span class=\"ruby-value\">5</span>  <span class=\"ruby-comment\">#=&gt; true ...</span>\n</pre>\n"],["include?","Hash","Hash.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if the given key is present in <em>hsh</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = { <span class=\"ruby-string\">&quot;a&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">100</span>, <span class=\"ruby-string\">&quot;b&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">200</span> }\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">has_key?</span>(<span class=\"ruby-string\">&quot;a&quot;</span>)   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["include?","Module","Module.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if <em>module</em> is included in <em>mod</em> or\none of <em>mod</em>&#39;s ancestors.\n\n<pre>module A\nend\nclass B\n  include ...</pre>\n"],["include?","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if <code>key</code> is registered\n"],["include?","Range","Range.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if <code>obj</code> is an element of the range,\n<code>false</code> otherwise.\n\n<pre>(&quot;a&quot;..&quot;z&quot;).include?(&quot;g&quot;)   #=&gt; true\n(&quot;a&quot;..&quot;z&quot;).include?(&quot;A&quot;) ...</pre>\n"],["include?","String","String.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if <em>str</em> contains the given string or\ncharacter.\n\n<pre>&quot;hello&quot;.include? &quot;lo&quot;   #=&gt; true\n&quot;hello&quot;.include? ...</pre>\n"],["included","Module","Module.html#method-i-included","(p1)","<p>Callback invoked whenever the receiver is included in another module or\nclass. This should be used in …\n"],["included_modules","Module","Module.html#method-i-included_modules","()","<p>Returns the list of modules included in <em>mod</em>.\n\n<pre>module Mixin\nend\n\nmodule Outer\n  include Mixin\nend\n\nMixin.included_modules ...</pre>\n"],["incomplete_input?","Encoding::InvalidByteSequenceError","Encoding/InvalidByteSequenceError.html#method-i-incomplete_input-3F","()","<p>Returns true if the invalid byte sequence error is caused by premature end\nof string.\n\n<pre>ec = Encoding::Converter.new(&quot;EUC-JP&quot;, ...</pre>\n"],["index","Array","Array.html#method-i-index","(*args)","<p>Returns the <em>index</em> of the first object in <code>ary</code> such\nthat the object is <code>==</code> to <code>obj</code>.\n<p>If a block is given instead …\n"],["index","ENV","ENV.html#method-c-index","(p1)","<p>Deprecated method that is equivalent to ENV.key\n"],["index","String","String.html#method-i-index","(p1, p2 = v2)","<p>Returns the index of the first occurrence of the given <em>substring</em>\nor pattern (<em>regexp</em>) in <em>str</em>. Returns …\n"],["infinite?","Complex","Complex.html#method-i-infinite-3F","()","<p>Returns <code>1</code> if <code>cmp</code>&#39;s real or imaginary part is\nan infinite number, otherwise returns <code>nil</code>.\n\n<pre>For example: ...</pre>\n"],["infinite?","Float","Float.html#method-i-infinite-3F","()","<p>Returns <code>nil</code>, -1, or 1 depending on whether the value is\nfinite, <code>-Infinity</code>, or <code>+Infinity</code>.\n\n<pre>(0.0).infinite? ...</pre>\n"],["infinite?","Numeric","Numeric.html#method-i-infinite-3F","()","<p>Returns <code>nil</code>, -1, or 1 depending on whether the value is\nfinite, <code>-Infinity</code>, or <code>+Infinity</code>.\n"],["inherited","Class","Class.html#method-i-inherited","(p1)","<p>Callback invoked whenever a subclass of the current class is created.\n<p>Example:\n\n<pre>class Foo\n  def self.inherited(subclass) ...</pre>\n"],["initgroups","Process","Process.html#method-c-initgroups","(p1, p2)","<p>Initializes the supplemental group access list by reading the system group\ndatabase and using all groups …\n"],["initialize_copy","Array","Array.html#method-i-initialize_copy","(p1)","<p>Replaces the contents of <code>self</code> with the contents of\n<code>other_ary</code>, truncating or expanding if necessary.\n\n<pre>a ...</pre>\n"],["initialize_copy","Hash","Hash.html#method-i-initialize_copy","(p1)","<p>Replaces the contents of <em>hsh</em> with the contents of\n<em>other_hash</em>.\n\n<pre>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; =&gt; 200 }\nh.replace({ ...</pre>\n"],["initialize_copy","String","String.html#method-i-initialize_copy","(p1)","<p>Replaces the contents of <em>str</em> with the corresponding values in\n<em>other_str</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-string\">&quot;hello&quot;</span>         <span class=\"ruby-comment\">#=&gt; &quot;hello&quot; ...</span>\n</pre>\n"],["inject","Enumerable","Enumerable.html#method-i-inject","(p1 = v1, p2 = v2)","<p>Combines all elements of <em>enum</em> by applying a binary operation,\nspecified by a block or a symbol that names …\n"],["ino","File::Stat","File/Stat.html#method-i-ino","()","<p>Returns the inode number for <em>stat</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">ino</span>   <span class=\"ruby-comment\">#=&gt; 1083669</span>\n</pre>\n"],["inplace_mode","ARGF","ARGF.html#method-i-inplace_mode","()","<p>Returns the file extension appended to the names of modified files under\nin-place edit mode. This value …\n"],["inplace_mode=","ARGF","ARGF.html#method-i-inplace_mode-3D","(p1)","<p>Sets the filename extension for in-place editing mode to the given String.\nEach file being edited has …\n"],["insert","Array","Array.html#method-i-insert","(*args)","<p>Inserts the given values before the element with the given\n<code>index</code>.\n<p>Negative indices count backwards from …\n"],["insert","String","String.html#method-i-insert","(p1, p2)","<p>Inserts <em>other_str</em> before the character at the given\n<em>index</em>, modifying <em>str</em>. Negative indices count from …\n"],["insert_output","Encoding::Converter","Encoding/Converter.html#method-i-insert_output","(p1)","<p>Inserts string into the encoding converter. The string will be converted to\nthe destination encoding …\n"],["inspect","ARGF","ARGF.html#method-i-inspect","()",""],["inspect","Array","Array.html#method-i-inspect","()","<p>Creates a string representation of <code>self</code>, by calling #inspect\non each element.\n\n<pre>[ &quot;a&quot;, &quot;b&quot;, &quot;c&quot; ].to_s  ...</pre>\n"],["inspect","Complex","Complex.html#method-i-inspect","()","<p>Returns the value as a string for inspection.\n\n<pre>Complex(2).inspect                       #=&gt; &quot;(2+0i)&quot;\nComplex(&#39;-8/6&#39;).inspect ...</pre>\n"],["inspect","Dir","Dir.html#method-i-inspect","()","<p>Return a string describing this Dir object.\n"],["inspect","ENV","ENV.html#method-c-inspect","()","<p>Returns the contents of the environment as a String.\n"],["inspect","Encoding","Encoding.html#method-i-inspect","()","<p>Returns a string which represents the encoding for programmers.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Encoding</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">UTF_8</span>.<span class=\"ruby-identifier\">inspect</span>       <span class=\"ruby-comment\">#=&gt; &quot;#&lt;Encoding:UTF-8&gt;&quot; ...</span>\n</pre>\n"],["inspect","Encoding::Converter","Encoding/Converter.html#method-i-inspect","()","<p>Returns a printable version of <em>ec</em>\n\n<pre>ec = Encoding::Converter.new(&quot;iso-8859-1&quot;, &quot;utf-8&quot;)\nputs ec.inspect ...</pre>\n"],["inspect","Enumerator","Enumerator.html#method-i-inspect","()","<p>Creates a printable version of <em>e</em>.\n"],["inspect","Enumerator::ArithmeticSequence","Enumerator/ArithmeticSequence.html#method-i-inspect","()","<p>Convert this arithmetic sequence to a printable form.\n"],["inspect","Enumerator::Chain","Enumerator/Chain.html#method-i-inspect","()","<p>Returns a printable version of the enumerator chain.\n"],["inspect","Exception","Exception.html#method-i-inspect","()","<p>Return this exception&#39;s class name and message.\n"],["inspect","FalseClass","FalseClass.html#method-i-inspect","()",""],["inspect","Fiber","Fiber.html#method-i-inspect","()",""],["inspect","File::Stat","File/Stat.html#method-i-inspect","()","<p>Produce a nicely formatted description of <em>stat</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;/etc/passwd&quot;</span>).<span class=\"ruby-identifier\">inspect</span>\n   <span class=\"ruby-comment\">#=&gt; &quot;#&lt;File::Stat ...</span>\n</pre>\n"],["inspect","Float","Float.html#method-i-inspect","()",""],["inspect","Hash","Hash.html#method-i-inspect","()","<p>Return the contents of this hash as a string.\n\n<pre>h = { &quot;c&quot; =&gt; 300, &quot;a&quot; =&gt; 100, &quot;d&quot; =&gt; 400, &quot;c&quot; =&gt; 300  } ...</pre>\n"],["inspect","IO","IO.html#method-i-inspect","()","<p>Return a string describing this IO object.\n"],["inspect","Integer","Integer.html#method-i-inspect","(*args)",""],["inspect","MatchData","MatchData.html#method-i-inspect","()","<p>Returns a printable version of <em>mtch</em>.\n\n<pre>puts /.$/.match(&quot;foo&quot;).inspect\n#=&gt; #&lt;MatchData &quot;o&quot;&gt;\n\nputs /(.)(.)(.)/.match(&quot;foo&quot;).inspect ...</pre>\n"],["inspect","Method","Method.html#method-i-inspect","()","<p>Returns a human-readable description of the underlying method.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;cat&quot;</span>.<span class=\"ruby-identifier\">method</span>(:<span class=\"ruby-identifier\">count</span>).<span class=\"ruby-identifier\">inspect</span>   <span class=\"ruby-comment\">#=&gt; &quot;#&lt;Method: ...</span>\n</pre>\n"],["inspect","Module","Module.html#method-i-inspect","()",""],["inspect","NilClass","NilClass.html#method-i-inspect","()","<p>Always returns the string “nil”.\n"],["inspect","Object","Object.html#method-i-inspect","()","<p>Returns a string containing a human-readable representation of\n<em>obj</em>. The default #inspect shows the object&#39;s …\n"],["inspect","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-inspect","()",""],["inspect","Proc","Proc.html#method-i-inspect","()",""],["inspect","Process::Status","Process/Status.html#method-i-inspect","()","<p>Override the inspection method.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">system</span>(<span class=\"ruby-string\">&quot;false&quot;</span>)\n<span class=\"ruby-identifier\">p</span> <span class=\"ruby-identifier\">$?</span>.<span class=\"ruby-identifier\">inspect</span> <span class=\"ruby-comment\">#=&gt; &quot;#&lt;Process::Status: pid 12861 exit 1&gt;&quot;</span>\n</pre>\n"],["inspect","Range","Range.html#method-i-inspect","()","<p>Convert this range object to a printable form (using #inspect to convert\nthe begin and end objects). …\n"],["inspect","Rational","Rational.html#method-i-inspect","()","<p>Returns the value as a string for inspection.\n\n<pre>Rational(2).inspect      #=&gt; &quot;(2/1)&quot;\nRational(-8, 6).inspect ...</pre>\n"],["inspect","Regexp","Regexp.html#method-i-inspect","()","<p>Produce a nicely formatted string-version of <em>rxp</em>. Perhaps\nsurprisingly, <code>#inspect</code> actually produces the …\n"],["inspect","RubyVM::AbstractSyntaxTree::Node","RubyVM/AbstractSyntaxTree/Node.html#method-i-inspect","()","<p>Returns debugging information about this node as a string.\n"],["inspect","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-inspect","()","<p>Returns a human-readable string representation of this instruction\nsequence, including the #label and …\n"],["inspect","String","String.html#method-i-inspect","()","<p>Returns a printable version of <em>str</em>, surrounded by quote marks,\nwith special characters escaped.\n\n<pre>str = ...</pre>\n"],["inspect","Struct","Struct.html#method-i-inspect","()","<p>Returns a description of this struct as a string.\n"],["inspect","Symbol","Symbol.html#method-i-inspect","()","<p>Returns the representation of <em>sym</em> as a symbol literal.\n\n<pre class=\"ruby\">:<span class=\"ruby-identifier\">fred</span>.<span class=\"ruby-identifier\">inspect</span>   <span class=\"ruby-comment\">#=&gt; &quot;:fred&quot;</span>\n</pre>\n"],["inspect","Thread","Thread.html#method-i-inspect","()",""],["inspect","Thread::Backtrace::Location","Thread/Backtrace/Location.html#method-i-inspect","()","<p>Returns the same as calling <code>inspect</code> on the string\nrepresentation of #to_str\n"],["inspect","Time","Time.html#method-i-inspect","()","<p>Returns a detailed string representing <em>time</em>. Unlike to_s,\npreserves nanoseconds in the representation …\n"],["inspect","TracePoint","TracePoint.html#method-i-inspect","()","<p>Return a string containing a human-readable TracePoint status.\n"],["inspect","TrueClass","TrueClass.html#method-i-inspect","()",""],["inspect","UnboundMethod","UnboundMethod.html#method-i-inspect","()","<p>Returns a human-readable description of the underlying method.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;cat&quot;</span>.<span class=\"ruby-identifier\">method</span>(:<span class=\"ruby-identifier\">count</span>).<span class=\"ruby-identifier\">inspect</span>   <span class=\"ruby-comment\">#=&gt; &quot;#&lt;Method: ...</span>\n</pre>\n"],["instance_eval","BasicObject","BasicObject.html#method-i-instance_eval","(*args)","<p>Evaluates a string containing Ruby source code, or the given block, within\nthe context of the receiver …\n"],["instance_exec","BasicObject","BasicObject.html#method-i-instance_exec","(*args)","<p>Executes the given block within the context of the receiver (<em>obj</em>).\nIn order to set the context, the variable …\n"],["instance_method","Module","Module.html#method-i-instance_method","(p1)","<p>Returns an <code>UnboundMethod</code> representing the given instance\nmethod in <em>mod</em>.\n\n<pre>class Interpreter\n  def do_a() ...</pre>\n"],["instance_methods","Module","Module.html#method-i-instance_methods","(*args)","<p>Returns an array containing the names of the public and protected instance\nmethods in the receiver.  …\n"],["instance_of?","Object","Object.html#method-i-instance_of-3F","(p1)","<p>Returns <code>true</code> if <em>obj</em> is an instance of the given\nclass. See also Object#kind_of?.\n\n<pre>class A;     end\nclass ...</pre>\n"],["instance_variable_defined?","Object","Object.html#method-i-instance_variable_defined-3F","(p1)","<p>Returns <code>true</code> if the given instance variable is defined in\n<em>obj</em>. String arguments are converted to symbols. …\n"],["instance_variable_get","Object","Object.html#method-i-instance_variable_get","(p1)","<p>Returns the value of the given instance variable, or nil if the instance\nvariable is not set. The <code>@</code> part …\n"],["instance_variable_set","Object","Object.html#method-i-instance_variable_set","(p1, p2)","<p>Sets the instance variable named by <em>symbol</em> to the given object,\nthereby frustrating the efforts of the …\n"],["instance_variables","Object","Object.html#method-i-instance_variables","()","<p>Returns an array of instance variable names for the receiver. Note that\nsimply defining an accessor does …\n"],["instruction_sequence","TracePoint","TracePoint.html#method-i-instruction_sequence","()","<p>Compiled instruction sequence represented by a RubyVM::InstructionSequence\ninstance on the <code>:script_compiled</code> …\n"],["integer?","Integer","Integer.html#method-i-integer-3F","()","<p>Since <code>int</code> is already an Integer, this always returns\n<code>true</code>.\n"],["integer?","Numeric","Numeric.html#method-i-integer-3F","()","<p>Returns <code>true</code> if <code>num</code> is an Integer.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1.0</span>.<span class=\"ruby-identifier\">integer?</span>   <span class=\"ruby-comment\">#=&gt; false</span>\n<span class=\"ruby-value\">1</span>.<span class=\"ruby-identifier\">integer?</span>     <span class=\"ruby-comment\">#=&gt; true</span>\n</pre>\n"],["intern","String","String.html#method-i-intern","()","<p>Returns the Symbol corresponding to <em>str</em>, creating the symbol if it\ndid not previously exist. See Symbol#id2name …\n"],["intern","Symbol","Symbol.html#method-i-intern","()","<p>In general, <code>to_sym</code> returns the Symbol corresponding to an\nobject. As <em>sym</em> is already a symbol, <code>self</code> is …\n"],["internal_encoding","ARGF","ARGF.html#method-i-internal_encoding","()","<p>Returns the internal encoding for strings read from <code>ARGF</code> as an\n<code>Encoding</code> object.\n<p>If <code>ARGF.set_encoding</code> has …\n"],["internal_encoding","IO","IO.html#method-i-internal_encoding","()","<p>Returns the Encoding of the internal string if conversion is specified. \nOtherwise returns <code>nil</code>.\n"],["intersection","Array","Array.html#method-i-intersection","(*args)","<p>Set Intersection — Returns a new array containing unique elements common to\n<code>self</code> and <code>other_ary</code>s. Order …\n"],["invert","ENV","ENV.html#method-c-invert","()","<p>Returns a new hash created by using environment variable names as values\nand values as names.\n"],["invert","Hash","Hash.html#method-i-invert","()","<p>Returns a new hash created by using <em>hsh</em>&#39;s values as keys, and\nthe keys as values. If a key with the …\n"],["ioctl","IO","IO.html#method-i-ioctl","(p1, p2 = v2)","<p>Provides a mechanism for issuing low-level commands to control or query I/O\ndevices. Arguments and results …\n"],["is_a?","Object","Object.html#method-i-is_a-3F","(p1)","<p>Returns <code>true</code> if <em>class</em> is the class of <em>obj</em>,\nor if <em>class</em> is one of the superclasses of <em>obj</em> or modules\nincluded …\n"],["isatty","IO","IO.html#method-i-isatty","()","<p>Returns <code>true</code> if <em>ios</em> is associated with a terminal\ndevice (tty), <code>false</code> otherwise.\n\n<pre>File.new(&quot;testfile&quot;).isatty ...</pre>\n"],["isdst","Time","Time.html#method-i-isdst","()","<p>Returns <code>true</code> if <em>time</em> occurs during Daylight Saving\nTime in its time zone.\n\n<pre># CST6CDT:\n  Time.local(2000, ...</pre>\n"],["issetugid","Process::Sys","Process/Sys.html#method-c-issetugid","()","<p>Returns <code>true</code> if the process was created as a result of an\nexecve(2) system call which had either of the …\n"],["iterator?","Kernel","Kernel.html#method-i-iterator-3F","()","<p>Returns <code>true</code> if <code>yield</code> would execute a block in\nthe current context. The <code>iterator?</code> form is mildly deprecated.\n…\n"],["itself","Object","Object.html#method-i-itself","()","<p>Returns the receiver.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">string</span> = <span class=\"ruby-string\">&quot;my string&quot;</span>\n<span class=\"ruby-identifier\">string</span>.<span class=\"ruby-identifier\">itself</span>.<span class=\"ruby-identifier\">object_id</span> <span class=\"ruby-operator\">==</span> <span class=\"ruby-identifier\">string</span>.<span class=\"ruby-identifier\">object_id</span>   <span class=\"ruby-comment\">#=&gt; true</span>\n</pre>\n"],["join","Array","Array.html#method-i-join","(*args)","<p>Returns a string created by converting each element of the array to a\nstring, separated by the given …\n"],["join","File","File.html#method-c-join","(*args)","<p>Returns a new string formed by joining the strings using\n<code>&quot;/&quot;</code>.\n\n<pre>File.join(&quot;usr&quot;, &quot;mail&quot;, &quot;gumby&quot;) ...</pre>\n"],["join","Thread","Thread.html#method-i-join","(*args)","<p>The calling thread will suspend execution and run this <code>thr</code>.\n<p>Does not return until <code>thr</code> exits or until the …\n"],["keep_if","Array","Array.html#method-i-keep_if","()","<p>Deletes every element of <code>self</code> for which the given block\nevaluates to <code>false</code>, and returns <code>self</code>.\n<p>If no block …\n"],["keep_if","ENV","ENV.html#method-c-keep_if","()","<p>Deletes every environment variable where the block evaluates to\n<code>false</code>.\n<p>Returns an enumerator if no block …\n"],["keep_if","Hash","Hash.html#method-i-keep_if","()","<p>Deletes every key-value pair from <em>hsh</em> for which <em>block</em>\nevaluates to <code>false</code>.\n<p>If no block is given, an enumerator …\n"],["key","ENV","ENV.html#method-c-key","(p1)","<p>Returns the name of the first environment variable with <code>value</code>\nif it exists:\n\n<pre>ENV.replace(&#39;foo&#39; =&gt; &#39;0&#39;, ...</pre>\n"],["key","Hash","Hash.html#method-i-key","(p1)","<p>Returns the key of an occurrence of a given value. If the value is not\nfound, returns <code>nil</code>.\n\n<pre>h = { &quot;a&quot; =&gt; ...</pre>\n"],["key","KeyError","KeyError.html#method-i-key","()","<p>Return the key caused this KeyError exception.\n"],["key?","ENV","ENV.html#method-c-key-3F","(p1)","<p>ENV.has_key?, ENV.member?, and ENV.key? are aliases for ENV.include?.\n<p>Returns <code>true</code> if there is an environment …\n"],["key?","Hash","Hash.html#method-i-key-3F","(p1)","<p>Returns <code>true</code> if the given key is present in <em>hsh</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = { <span class=\"ruby-string\">&quot;a&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">100</span>, <span class=\"ruby-string\">&quot;b&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">200</span> }\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">has_key?</span>(<span class=\"ruby-string\">&quot;a&quot;</span>)   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["key?","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-key-3F","(p1)","<p>Returns <code>true</code> if <code>key</code> is registered\n"],["key?","Thread","Thread.html#method-i-key-3F","(p1)","<p>Returns <code>true</code> if the given string (or symbol) exists as a\nfiber-local variable.\n\n<pre>me = Thread.current\nme[:oliver] ...</pre>\n"],["keys","ENV","ENV.html#method-c-keys","()","<p>Returns all variable names in an Array:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">replace</span>(<span class=\"ruby-string\">&#39;foo&#39;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&#39;0&#39;</span>, <span class=\"ruby-string\">&#39;bar&#39;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&#39;1&#39;</span>)\n<span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">keys</span> <span class=\"ruby-comment\"># =&gt; [&#39;bar&#39;, ...</span>\n</pre>\n"],["keys","Hash","Hash.html#method-i-keys","()","<p>Returns a new array populated with the keys from this hash. See also\nHash#values.\n\n<pre>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; ...</pre>\n"],["keys","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-keys","()","<p>Iterates over keys and objects in a weakly referenced object\n"],["keys","Thread","Thread.html#method-i-keys","()","<p>Returns an array of the names of the fiber-local variables (as Symbols).\n\n<pre>thr = Thread.new do\n  Thread.current[:cat] ...</pre>\n"],["kill","Process","Process.html#method-c-kill","(*args)","<p>Sends the given signal to the specified process id(s) if <em>pid</em> is\npositive. If <em>pid</em> is zero, <em>signal</em> is sent …\n"],["kill","Thread","Thread.html#method-c-kill","(p1)","<p>Causes the given <code>thread</code> to exit, see also Thread::exit.\n\n<pre>count = 0\na = Thread.new { loop { count += 1 } ...</pre>\n"],["kill","Thread","Thread.html#method-i-kill","()","<p>Terminates <code>thr</code> and schedules another thread to be run,\nreturning the terminated Thread.  If this is the …\n"],["kind_of?","Object","Object.html#method-i-kind_of-3F","(p1)","<p>Returns <code>true</code> if <em>class</em> is the class of <em>obj</em>,\nor if <em>class</em> is one of the superclasses of <em>obj</em> or modules\nincluded …\n"],["label","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-label","()","<p>Returns the label of this instruction sequence.\n<p><code>&lt;main&gt;</code> if it&#39;s at the top level,\n<code>&lt;compiled&gt;</code> …\n"],["label","Thread::Backtrace::Location","Thread/Backtrace/Location.html#method-i-label","()","<p>Returns the label of this frame.\n<p>Usually consists of method, class, module, etc names with decoration. …\n"],["lambda","Kernel","Kernel.html#method-i-lambda","()","<p>Equivalent to Proc.new, except the resulting Proc objects check the number\nof parameters passed when …\n"],["lambda?","Proc","Proc.html#method-i-lambda-3F","()","<p>Returns <code>true</code> if a Proc object is lambda. <code>false</code> if\nnon-lambda.\n<p>The lambda-ness affects argument handling …\n"],["last","Array","Array.html#method-i-last","(*args)","<p>Returns the last element(s) of <code>self</code>. If the array is empty,\nthe first form returns <code>nil</code>.\n<p>See also Array#first …\n"],["last","Enumerator::ArithmeticSequence","Enumerator/ArithmeticSequence.html#method-i-last","(p1)","<p>Returns the last number in this arithmetic sequence, or an array of the\nlast <code>n</code> elements.\n"],["last","Range","Range.html#method-i-last","(*args)","<p>Returns the last object in the range, or an array of the last\n<code>n</code> elements.\n<p>Note that with no arguments …\n"],["last_column","RubyVM::AbstractSyntaxTree::Node","RubyVM/AbstractSyntaxTree/Node.html#method-i-last_column","()","<p>The column number in the source code where this AST&#39;s text ended.\n"],["last_error","Encoding::Converter","Encoding/Converter.html#method-i-last_error","()","<p>Returns an exception object for the last conversion. Returns nil if the\nlast conversion did not produce …\n"],["last_lineno","RubyVM::AbstractSyntaxTree::Node","RubyVM/AbstractSyntaxTree/Node.html#method-i-last_lineno","()","<p>The line number in the source code where this AST&#39;s text ended.\n"],["last_match","Regexp","Regexp.html#method-c-last_match","(*args)","<p>The first form returns the MatchData object generated by the last\nsuccessful pattern match.  Equivalent …\n"],["last_status","Process","Process.html#method-c-last_status","()","<p>Returns the status of the last executed child process in the current\nthread.\n\n<pre>Process.wait Process.spawn(&quot;ruby&quot;, ...</pre>\n"],["latest_gc_info","GC","GC.html#method-c-latest_gc_info","(hash_or_key = nil)","<p>Returns information about the most recent garbage collection.\n"],["lazy","Enumerable","Enumerable.html#method-i-lazy","()","<p>Returns an Enumerator::Lazy, which redefines most Enumerable methods to\npostpone enumeration and enumerate …\n"],["lazy","Enumerator::Lazy","Enumerator/Lazy.html#method-i-lazy","()","<p>Returns self.\n"],["lchmod","File","File.html#method-c-lchmod","(*args)","<p>Equivalent to File::chmod, but does not follow symbolic links (so it will\nchange the permissions associated …\n"],["lchown","File","File.html#method-c-lchown","(*args)","<p>Equivalent to File::chown, but does not follow symbolic links (so it will\nchange the owner associated …\n"],["lcm","Integer","Integer.html#method-i-lcm","(p1)","<p>Returns the least common multiple of the two integers. The result is always\npositive. 0.lcm(x) and x.lcm …\n"],["ldexp","Math","Math.html#method-c-ldexp","(p1, p2)","<p>Returns the value of <code>fraction</code>*(2**<code>exponent</code>).\n\n<pre>fraction, exponent = Math.frexp(1234)\nMath.ldexp(fraction, ...</pre>\n"],["length","Array","Array.html#method-i-length","()","<p>Returns the number of elements in <code>self</code>. May be zero.\n\n<pre>[ 1, 2, 3, 4, 5 ].length   #=&gt; 5\n[].length       ...</pre>\n"],["length","ENV","ENV.html#method-c-length","()","<p>Returns the number of environment variables.\n"],["length","Hash","Hash.html#method-i-length","()","<p>Returns the number of key-value pairs in the hash.\n\n<pre>h = { &quot;d&quot; =&gt; 100, &quot;a&quot; =&gt; 200, &quot;v&quot; =&gt; 300, &quot;e&quot; =&gt; 400 ...</pre>\n"],["length","MatchData","MatchData.html#method-i-length","()","<p>Returns the number of elements in the match array.\n\n<pre>m = /(.)(.)(\\d+)(\\d)/.match(&quot;THX1138.&quot;)\nm.length   ...</pre>\n"],["length","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-length","()","<p>Returns the number of referenced objects\n"],["length","Queue","Queue.html#method-i-length","()","<p>Returns the length of the queue.\n"],["length","SizedQueue","SizedQueue.html#method-i-length","()","<p>Returns the length of the queue.\n"],["length","String","String.html#method-i-length","()","<p>Returns the character length of <em>str</em>.\n"],["length","Struct","Struct.html#method-i-length","()","<p>Returns the number of struct members.\n\n<pre>Customer = Struct.new(:name, :address, :zip)\njoe = Customer.new(&quot;Joe ...</pre>\n"],["length","Symbol","Symbol.html#method-i-length","()","<p>Same as <code>sym.to_s.length</code>.\n"],["lex_state_name","Ripper","Ripper.html#method-c-lex_state_name","(p1)","<p>Returns a string representation of lex_state.\n"],["lgamma","Math","Math.html#method-c-lgamma","(p1)","<p>Calculates the logarithmic gamma of <code>x</code> and the sign of gamma of\n<code>x</code>.\n<p>Math.lgamma(x) is same as\n\n<pre>[Math.log(Math.gamma(x).abs), ...</pre>\n"],["lineno","ARGF","ARGF.html#method-i-lineno","()","<p>Returns the current line number of ARGF as a whole. This value can be set\nmanually with <code>ARGF.lineno=</code> …\n"],["lineno","IO","IO.html#method-i-lineno","()","<p>Returns the current line number in <em>ios</em>.  The stream must be opened\nfor reading. #lineno counts the number …\n"],["lineno","Ripper","Ripper.html#method-i-lineno","()","<p>Return line number of current parsing line. This number starts from 1.\n"],["lineno","Thread::Backtrace::Location","Thread/Backtrace/Location.html#method-i-lineno","()","<p>Returns the line number of this frame.\n<p>For example, using <code>caller_locations.rb</code> from\nThread::Backtrace::Location …\n"],["lineno","TracePoint","TracePoint.html#method-i-lineno","()","<p>Line number of the event\n"],["lineno=","ARGF","ARGF.html#method-i-lineno-3D","(p1)","<p>Sets the line number of <code>ARGF</code> as a whole to the given\n<code>Integer</code>.\n<p><code>ARGF</code> sets the line number automatically …\n"],["lineno=","IO","IO.html#method-i-lineno-3D","(p1)","<p>Manually sets the current line number to the given value. <code>$.</code>\nis updated only on the next read.\n\n<pre>f = File.new(&quot;testfile&quot;) ...</pre>\n"],["lines","ARGF","ARGF.html#method-i-lines","(*args)","<p>This is a deprecated alias for #each_line.\n"],["lines","IO","IO.html#method-i-lines","(*args)","<p>This is a deprecated alias for #each_line.\n"],["lines","String","String.html#method-i-lines","(*args)","<p>Returns an array of lines in <em>str</em> split using the supplied record\nseparator (<code>$/</code> by default).  This is …\n"],["link","File","File.html#method-c-link","(p1, p2)","<p>Creates a new name for an existing file using a hard link. Will not\noverwrite <em>new_name</em> if it already …\n"],["list","Encoding","Encoding.html#method-c-list","()","<p>Returns the list of loaded encodings.\n\n<pre>Encoding.list\n#=&gt; [#&lt;Encoding:ASCII-8BIT&gt;, #&lt;Encoding:UTF-8&gt;,\n  ...</pre>\n"],["list","Signal","Signal.html#method-c-list","()","<p>Returns a list of signal names mapped to the corresponding underlying\nsignal numbers.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Signal</span>.<span class=\"ruby-identifier\">list</span>   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["list","Thread","Thread.html#method-c-list","()","<p>Returns an array of Thread objects for all threads that are either runnable\nor stopped.\n\n<pre>Thread.new { sleep(200) ...</pre>\n"],["list","ThreadGroup","ThreadGroup.html#method-i-list","()","<p>Returns an array of all existing Thread objects that belong to this group.\n\n<pre>ThreadGroup::Default.list  ...</pre>\n"],["ljust","String","String.html#method-i-ljust","(*args)","<p>If <em>integer</em> is greater than the length of <em>str</em>, returns a\nnew String of length <em>integer</em> with <em>str</em> left justified …\n"],["load","Kernel","Kernel.html#method-i-load","(p1, p2 = v2)","<p>Loads and executes the Ruby program in the file <em>filename</em>. If the\nfilename does not resolve to an absolute …\n"],["load","Marshal","Marshal.html#method-c-load","(*args)","<p>Returns the result of converting the serialized data in source into a Ruby\nobject (possibly with associated …\n"],["load_from_binary","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-c-load_from_binary","(p1)","<p>Load an iseq object from binary format String object created by\nRubyVM::InstructionSequence.to_binary …\n"],["load_from_binary_extra_data","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-c-load_from_binary_extra_data","(p1)","<p>Load extra data embed into binary format String object.\n"],["local","Time","Time.html#method-c-local","(*args)","<p>Same as Time::gm, but interprets the values in the local time zone.\n\n<pre>Time.local(2000,&quot;jan&quot;,1,20,15,1)  ...</pre>\n"],["local_variable_defined?","Binding","Binding.html#method-i-local_variable_defined-3F","(p1)","<p>Returns <code>true</code> if a local variable <code>symbol</code> exists.\n\n<pre>def foo\n  a = 1\n  binding.local_variable_defined?(:a) ...</pre>\n"],["local_variable_get","Binding","Binding.html#method-i-local_variable_get","(p1)","<p>Returns the value of the local variable <code>symbol</code>.\n\n<pre>def foo\n  a = 1\n  binding.local_variable_get(:a) #=&gt; 1 ...</pre>\n"],["local_variable_set","Binding","Binding.html#method-i-local_variable_set","(p1, p2)","<p>Set local variable named <code>symbol</code> as <code>obj</code>.\n\n<pre>def foo\n  a = 1\n  bind = binding\n  bind.local_variable_set(:a, ...</pre>\n"],["local_variables","Binding","Binding.html#method-i-local_variables","()","<p>Returns the names of the binding&#39;s local variables as symbols.\n\n<pre>def foo\n  a = 1\n  2.times do |n|\n  ...</pre>\n"],["local_variables","Kernel","Kernel.html#method-i-local_variables","()","<p>Returns the names of the current local variables.\n\n<pre>fred = 1\nfor i in 1..10\n   # ...\nend\nlocal_variables ...</pre>\n"],["local_variables","NameError","NameError.html#method-i-local_variables","()","<p>Return a list of the local variable names defined where this NameError\nexception was raised.\n<p>Internal …\n"],["locale_charmap","Encoding","Encoding.html#method-c-locale_charmap","()","<p>Returns the locale charmap name. It returns nil if no appropriate\ninformation.\n\n<pre>Debian GNU/Linux\n  LANG=C ...</pre>\n"],["localtime","Time","Time.html#method-i-localtime","(*args)","<p>Converts <em>time</em> to local time (using the local time zone in effect\nat the creation time of <em>time</em>) modifying …\n"],["lock","Mutex","Mutex.html#method-i-lock","()","<p>Attempts to grab the lock and waits if it isn&#39;t available. Raises\n<code>ThreadError</code> if <code>mutex</code> was locked …\n"],["locked?","Mutex","Mutex.html#method-i-locked-3F","()","<p>Returns <code>true</code> if this lock is currently held by some thread.\n"],["log","Math","Math.html#method-c-log","(*args)",""],["log10","Math","Math.html#method-c-log10","(p1)","<p>Returns the base 10 logarithm of <code>x</code>.\n<p>Domain: (0, INFINITY)\n<p>Codomain: (-INFINITY, INFINITY)\n"],["log2","Math","Math.html#method-c-log2","(p1)","<p>Returns the base 2 logarithm of <code>x</code>.\n<p>Domain: (0, INFINITY)\n<p>Codomain: (-INFINITY, INFINITY)\n"],["loop","Kernel","Kernel.html#method-i-loop","()","<p>Repeatedly executes the block.\n<p>If no block is given, an enumerator is returned instead.\n\n<pre>loop do\n  print ...</pre>\n"],["lstat","File","File.html#method-c-lstat","(p1)","<p>Same as File::stat, but does not follow the last symbolic link. Instead,\nreports on the link itself. …\n"],["lstat","File","File.html#method-i-lstat","()","<p>Same as IO#stat, but does not follow the last symbolic link. Instead,\nreports on the link itself.\n\n<pre>File.symlink(&quot;testfile&quot;, ...</pre>\n"],["lstrip","String","String.html#method-i-lstrip","()","<p>Returns a copy of the receiver with leading whitespace removed. See also\nString#rstrip and String#strip …\n"],["lstrip!","String","String.html#method-i-lstrip-21","()","<p>Removes leading whitespace from the receiver. Returns the altered receiver,\nor <code>nil</code> if no change was made. …\n"],["lutime","File","File.html#method-c-lutime","(*args)","<p>Sets the access and modification times of each named file to the first two\narguments. If a file is a …\n"],["magnitude","Complex","Complex.html#method-i-magnitude","()","<p>Returns the absolute part of its polar form.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">-1</span>).<span class=\"ruby-identifier\">abs</span>         <span class=\"ruby-comment\">#=&gt; 1</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">3.0</span>, <span class=\"ruby-value\">-4.0</span>).<span class=\"ruby-identifier\">abs</span>  <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["magnitude","Float","Float.html#method-i-magnitude","()","<p>Returns the absolute value of <code>float</code>.\n\n<pre>(-34.56).abs   #=&gt; 34.56\n-34.56.abs     #=&gt; 34.56\n34.56.abs      ...</pre>\n"],["magnitude","Integer","Integer.html#method-i-magnitude","()","<p>Returns the absolute value of <code>int</code>.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">-12345</span>).<span class=\"ruby-identifier\">abs</span>   <span class=\"ruby-comment\">#=&gt; 12345</span>\n<span class=\"ruby-value\">-12345</span>.<span class=\"ruby-identifier\">abs</span>     <span class=\"ruby-comment\">#=&gt; 12345</span>\n<span class=\"ruby-value\">12345</span>.<span class=\"ruby-identifier\">abs</span>      <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["magnitude","Numeric","Numeric.html#method-i-magnitude","()","<p>Returns the absolute value of <code>num</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">12</span>.<span class=\"ruby-identifier\">abs</span>         <span class=\"ruby-comment\">#=&gt; 12</span>\n(<span class=\"ruby-value\">-34.56</span>).<span class=\"ruby-identifier\">abs</span>   <span class=\"ruby-comment\">#=&gt; 34.56</span>\n<span class=\"ruby-value\">-34.56</span>.<span class=\"ruby-identifier\">abs</span>     <span class=\"ruby-comment\">#=&gt; 34.56</span>\n</pre>\n"],["magnitude","Rational","Rational.html#method-i-magnitude","()","<p>Returns the absolute value of <code>rat</code>.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">/</span><span class=\"ruby-value\">2</span><span class=\"ruby-identifier\">r</span>).<span class=\"ruby-identifier\">abs</span>    <span class=\"ruby-comment\">#=&gt; (1/2)</span>\n(<span class=\"ruby-value\">-1</span><span class=\"ruby-operator\">/</span><span class=\"ruby-value\">2</span><span class=\"ruby-identifier\">r</span>).<span class=\"ruby-identifier\">abs</span>   <span class=\"ruby-comment\">#=&gt; (1/2)</span>\n</pre>\n<p>Rational#magnitude is …\n"],["main","Thread","Thread.html#method-c-main","()","<p>Returns the main thread.\n"],["malloc_allocated_size","GC","GC.html#method-c-malloc_allocated_size","()","<p>Returns the size of memory allocated by malloc().\n<p>Only available if ruby was built with <code>CALC_EXACT_MALLOC_SIZE</code> …\n"],["malloc_allocations","GC","GC.html#method-c-malloc_allocations","()","<p>Returns the number of malloc() allocations.\n<p>Only available if ruby was built with <code>CALC_EXACT_MALLOC_SIZE</code> …\n"],["map","Array","Array.html#method-i-map","()","<p>Invokes the given block once for each element of <code>self</code>.\n<p>Creates a new array containing the values returned …\n"],["map","Enumerable","Enumerable.html#method-i-map","()","<p>Returns a new array with the results of running <em>block</em> once for\nevery element in <em>enum</em>.\n<p>If no block is given, …\n"],["map","Enumerator::Lazy","Enumerator/Lazy.html#method-i-map","()","<p>Like Enumerable#map, but chains operation to be lazy-evaluated.\n\n<pre>(1..Float::INFINITY).lazy.map {|i| i**2 ...</pre>\n"],["map!","Array","Array.html#method-i-map-21","()","<p>Invokes the given block once for each element of <code>self</code>,\nreplacing the element with the value returned …\n"],["match","Regexp","Regexp.html#method-i-match","(p1, p2 = v2)","<p>Returns a MatchData object describing the match, or <code>nil</code> if\nthere was no match. This is equivalent to …\n"],["match","String","String.html#method-i-match","(*args)","<p>Converts <em>pattern</em> to a Regexp (if it isn&#39;t already one), then\ninvokes its <code>match</code> method on <em>str</em>.  If …\n"],["match","Symbol","Symbol.html#method-i-match","(*args)","<p>Returns <code>sym.to_s.match</code>.\n"],["match?","Regexp","Regexp.html#method-i-match-3F","(*args)","<p>Returns a <code>true</code> or <code>false</code> indicates whether the\nregexp is matched or not without updating $~ and other …\n"],["match?","String","String.html#method-i-match-3F","(*args)","<p>Converts <em>pattern</em> to a <code>Regexp</code> (if it isn&#39;t already\none), then returns a <code>true</code> or <code>false</code> indicates\nwhether …\n"],["match?","Symbol","Symbol.html#method-i-match-3F","(*args)","<p>Returns <code>sym.to_s.match?</code>.\n"],["matching_methods","Object","Object.html#method-i-matching_methods","(s = '', m = callable_methods)",""],["max","Array","Array.html#method-i-max","(*args)","<p>Returns the object in <em>ary</em> with the maximum value. The first form\nassumes all objects implement Comparable …\n"],["max","Enumerable","Enumerable.html#method-i-max","(*args)","<p>Returns the object in <em>enum</em> with the maximum value. The first form\nassumes all objects implement Comparable …\n"],["max","Range","Range.html#method-i-max","(*args)","<p>Returns the maximum value in the range. Returns <code>nil</code> if the\nbegin value of the range larger than the end …\n"],["max","SizedQueue","SizedQueue.html#method-i-max","()","<p>Returns the maximum size of the queue.\n"],["max=","SizedQueue","SizedQueue.html#method-i-max-3D","(p1)","<p>Sets the maximum size of the queue to the given <code>number</code>.\n"],["max_by","Enumerable","Enumerable.html#method-i-max_by","(*args)","<p>Returns the object in <em>enum</em> that gives the maximum value from the\ngiven block.\n<p>If no block is given, an …\n"],["maxgroups","Process","Process.html#method-c-maxgroups","()","<p>Returns the maximum number of gids allowed in the supplemental group access\nlist.\n\n<pre>Process.maxgroups   ...</pre>\n"],["maxgroups=","Process","Process.html#method-c-maxgroups-3D","(p1)","<p>Sets the maximum number of gids allowed in the supplemental group access\nlist.\n"],["mday","Time","Time.html#method-i-mday","()","<p>Returns the day of the month (1..n) for <em>time</em>.\n\n<pre>t = Time.now   #=&gt; 2007-11-19 08:27:03 -0600\nt.day      ...</pre>\n"],["member?","ENV","ENV.html#method-c-member-3F","(p1)","<p>ENV.has_key?, ENV.member?, and ENV.key? are aliases for ENV.include?.\n<p>Returns <code>true</code> if there is an environment …\n"],["member?","Enumerable","Enumerable.html#method-i-member-3F","(p1)","<p>Returns <code>true</code> if any member of <em>enum</em> equals\n<em>obj</em>. Equality is tested using <code>==</code>.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">10</span>).<span class=\"ruby-identifier\">include?</span> <span class=\"ruby-value\">5</span>  <span class=\"ruby-comment\">#=&gt; true ...</span>\n</pre>\n"],["member?","Hash","Hash.html#method-i-member-3F","(p1)","<p>Returns <code>true</code> if the given key is present in <em>hsh</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = { <span class=\"ruby-string\">&quot;a&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">100</span>, <span class=\"ruby-string\">&quot;b&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">200</span> }\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">has_key?</span>(<span class=\"ruby-string\">&quot;a&quot;</span>)   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["member?","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-member-3F","(p1)","<p>Returns <code>true</code> if <code>key</code> is registered\n"],["member?","Range","Range.html#method-i-member-3F","(p1)","<p>Returns <code>true</code> if <code>obj</code> is an element of the range,\n<code>false</code> otherwise.\n\n<pre>(&quot;a&quot;..&quot;z&quot;).include?(&quot;g&quot;)   #=&gt; true\n(&quot;a&quot;..&quot;z&quot;).include?(&quot;A&quot;) ...</pre>\n"],["members","Struct","Struct.html#method-i-members","()","<p>Returns the struct members as an array of symbols:\n\n<pre>Customer = Struct.new(:name, :address, :zip)\njoe = ...</pre>\n"],["merge","Hash","Hash.html#method-i-merge","(*args)","<p>Returns a new hash that combines the contents of the receiver and the\ncontents of the given hashes.\n<p>If …\n"],["merge!","ENV","ENV.html#method-c-merge-21","(p1)","<p>Adds the contents of <code>hash</code> to the environment variables.  If no\nblock is specified entries with duplicate …\n"],["merge!","Hash","Hash.html#method-i-merge-21","(*args)","<p>Adds the contents of the given hashes to the receiver.\n<p>If no block is given, entries with duplicate keys …\n"],["message","Exception","Exception.html#method-i-message","()","<p>Returns the result of invoking <code>exception.to_s</code>. Normally this\nreturns the exception&#39;s message or name. …\n"],["method","Object","Object.html#method-i-method","(p1)","<p>Looks up the named method as a receiver in <em>obj</em>, returning a Method\nobject (or raising NameError). The …\n"],["method_added","Module","Module.html#method-i-method_added","(p1)","<p>Invoked as a callback whenever an instance method is added to the receiver.\n\n<pre>module Chatty\n  def self.method_added(method_name) ...</pre>\n"],["method_defined?","Module","Module.html#method-i-method_defined-3F","(*args)","<p>Returns <code>true</code> if the named method is defined by <em>mod</em>. \nIf <em>inherit</em> is set, the lookup will also search  …\n"],["method_id","TracePoint","TracePoint.html#method-i-method_id","()","<p>Return the name at the definition of the method being called\n"],["method_missing","BasicObject","BasicObject.html#method-i-method_missing","(*args)","<p>Invoked by Ruby when <em>obj</em> is sent a message it cannot handle.\n<em>symbol</em> is the symbol for the method called, …\n"],["method_missing","Object","Object.html#method-i-method_missing","(m, *a, &b)",""],["method_removed","Module","Module.html#method-i-method_removed","(p1)","<p>Invoked as a callback whenever an instance method is removed from the\nreceiver.\n\n<pre>module Chatty\n  def self.method_removed(method_name) ...</pre>\n"],["method_undefined","Module","Module.html#method-i-method_undefined","(p1)",""],["methods","Object","Object.html#method-i-methods","(*args)","<p>Returns a list of the names of public and protected methods of\n<em>obj</em>. This will include all the methods …\n"],["min","Array","Array.html#method-i-min","(*args)","<p>Returns the object in <em>ary</em> with the minimum value. The first form\nassumes all objects implement Comparable …\n"],["min","Enumerable","Enumerable.html#method-i-min","(*args)","<p>Returns the object in <em>enum</em> with the minimum value. The first form\nassumes all objects implement Comparable …\n"],["min","Range","Range.html#method-i-min","(*args)","<p>Returns the minimum value in the range. Returns <code>nil</code> if the\nbegin value of the range is larger than the …\n"],["min","Time","Time.html#method-i-min","()","<p>Returns the minute of the hour (0..59) for <em>time</em>.\n\n<pre>t = Time.now   #=&gt; 2007-11-19 08:25:51 -0600\nt.min   ...</pre>\n"],["min_by","Enumerable","Enumerable.html#method-i-min_by","(*args)","<p>Returns the object in <em>enum</em> that gives the minimum value from the\ngiven block.\n<p>If no block is given, an …\n"],["minmax","Array","Array.html#method-i-minmax","()","<p>Returns a two element array which contains the minimum and the maximum\nvalue in the array.\n<p>Can be given …\n"],["minmax","Enumerable","Enumerable.html#method-i-minmax","()","<p>Returns a two element array which contains the minimum and the maximum\nvalue in the enumerable.  The …\n"],["minmax","Range","Range.html#method-i-minmax","()","<p>Returns a two element array which contains the minimum and the maximum\nvalue in the range.\n<p>Can be given …\n"],["minmax_by","Enumerable","Enumerable.html#method-i-minmax_by","()","<p>Returns a two element array containing the objects in <em>enum</em> that\ncorrespond to the minimum and maximum …\n"],["mkdir","Dir","Dir.html#method-c-mkdir","(p1, p2 = v2)","<p>Makes a new directory named by <em>string</em>, with permissions specified\nby the optional parameter <em>anInteger</em> …\n"],["mkfifo","File","File.html#method-c-mkfifo","(*args)","<p>Creates a FIFO special file with name <em>file_name</em>.  <em>mode</em>\nspecifies the FIFO&#39;s permissions. It is modified …\n"],["mktime","Time","Time.html#method-c-mktime","(*args)","<p>Same as Time::gm, but interprets the values in the local time zone.\n\n<pre>Time.local(2000,&quot;jan&quot;,1,20,15,1)  ...</pre>\n"],["mode","File::Stat","File/Stat.html#method-i-mode","()","<p>Returns an integer representing the permission bits of <em>stat</em>. The\nmeaning of the bits is platform dependent; …\n"],["module_eval","Module","Module.html#method-i-module_eval","(*args)","<p>Evaluates the string or block in the context of <em>mod</em>, except that\nwhen a block is given, constant/class …\n"],["module_exec","Module","Module.html#method-i-module_exec","(*args)","<p>Evaluates the given block in the context of the class/module. The method\ndefined in the block will belong …\n"],["module_function","Module","Module.html#method-i-module_function","(*args)","<p>Creates module functions for the named methods. These functions may be\ncalled with the module as a receiver, …\n"],["modulo","Float","Float.html#method-i-modulo","(p1)","<p>Returns the modulo after division of <code>float</code> by\n<code>other</code>.\n\n<pre>6543.21.modulo(137)      #=&gt; 104.21000000000004\n6543.21.modulo(137.24) ...</pre>\n"],["modulo","Integer","Integer.html#method-i-modulo","(p1)","<p>Returns <code>int</code> modulo <code>other</code>.\n<p>See Numeric#divmod for more information.\n"],["modulo","Numeric","Numeric.html#method-i-modulo","(p1)","<p><code>x.modulo(y)</code> means <code>x-y*(x/y).floor</code>.\n<p>Equivalent to <code>num.divmod(numeric)[1]</code>.\n<p>See Numeric#divmod.\n"],["mon","Time","Time.html#method-i-mon","()","<p>Returns the month of the year (1..12) for <em>time</em>.\n\n<pre>t = Time.now   #=&gt; 2007-11-19 08:27:30 -0600\nt.mon    ...</pre>\n"],["monday?","Time","Time.html#method-i-monday-3F","()","<p>Returns <code>true</code> if <em>time</em> represents Monday.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">local</span>(<span class=\"ruby-value\">2003</span>, <span class=\"ruby-value\">8</span>, <span class=\"ruby-value\">4</span>)       <span class=\"ruby-comment\">#=&gt; 2003-08-04 00:00:00 -0500 ...</span>\n</pre>\n"],["month","Time","Time.html#method-i-month","()","<p>Returns the month of the year (1..12) for <em>time</em>.\n\n<pre>t = Time.now   #=&gt; 2007-11-19 08:27:30 -0600\nt.mon    ...</pre>\n"],["mtime","File","File.html#method-c-mtime","(p1)","<p>Returns the modification time for the named file as a Time object.\n<p><em>file_name</em> can be an IO object.\n\n<pre>File.mtime(&quot;testfile&quot;) ...</pre>\n"],["mtime","File","File.html#method-i-mtime","()","<p>Returns the modification time for <em>file</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">mtime</span>   <span class=\"ruby-comment\">#=&gt; Wed Apr 09 08:53:14 CDT 2003</span>\n</pre>\n"],["mtime","File::Stat","File/Stat.html#method-i-mtime","()","<p>Returns the modification time of <em>stat</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">mtime</span>   <span class=\"ruby-comment\">#=&gt; Wed Apr 09 08:53:14 CDT 2003</span>\n</pre>\n"],["name","Encoding","Encoding.html#method-i-name","()","<p>Returns the name of the encoding.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Encoding</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">UTF_8</span>.<span class=\"ruby-identifier\">name</span>      <span class=\"ruby-comment\">#=&gt; &quot;UTF-8&quot;</span>\n</pre>\n"],["name","Method","Method.html#method-i-name","()","<p>Returns the name of the method.\n"],["name","Module","Module.html#method-i-name","()","<p>Returns the name of the module <em>mod</em>.  Returns nil for anonymous\nmodules.\n"],["name","NameError","NameError.html#method-i-name","()","<p>Return the name associated with this NameError exception.\n"],["name","Thread","Thread.html#method-i-name","()","<p>show the name of the thread.\n"],["name","UnboundMethod","UnboundMethod.html#method-i-name","()","<p>Returns the name of the method.\n"],["name=","Thread","Thread.html#method-i-name-3D","(p1)","<p>set given name to the ruby thread. On some platform, it may set the name to\npthread and/or kernel.\n"],["name_list","Encoding","Encoding.html#method-c-name_list","()","<p>Returns the list of available encoding names.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Encoding</span>.<span class=\"ruby-identifier\">name_list</span>\n<span class=\"ruby-comment\">#=&gt; [&quot;US-ASCII&quot;, &quot;ASCII-8BIT&quot;, &quot;UTF-8&quot;, ...</span>\n</pre>\n"],["named_captures","MatchData","MatchData.html#method-i-named_captures","()","<p>Returns a Hash using named capture.\n<p>A key of the hash is a name of the named captures. A value of the …\n"],["named_captures","Regexp","Regexp.html#method-i-named_captures","()","<p>Returns a hash representing information about named captures of\n<em>rxp</em>.\n<p>A key of the hash is a name of the …\n"],["names","Encoding","Encoding.html#method-i-names","()","<p>Returns the list of name and aliases of the encoding.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Encoding</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">WINDOWS_31J</span>.<span class=\"ruby-identifier\">names</span>  <span class=\"ruby-comment\">#=&gt; [&quot;Windows-31J&quot;, ...</span>\n</pre>\n"],["names","MatchData","MatchData.html#method-i-names","()","<p>Returns a list of names of captures as an array of strings. It is same as\nmtch.regexp.names.\n\n<pre>/(?&lt;foo&gt;.)(?&lt;bar&gt;.)(?&lt;baz&gt;.)/.match(&quot;hoge&quot;).names ...</pre>\n"],["names","Regexp","Regexp.html#method-i-names","()","<p>Returns a list of names of captures as an array of strings.\n\n<pre class=\"ruby\"><span class=\"ruby-regexp\">/(?&lt;foo&gt;.)(?&lt;bar&gt;.)(?&lt;baz&gt;.)/</span>.<span class=\"ruby-identifier\">names</span>\n<span class=\"ruby-comment\">#=&gt; [&quot;foo&quot;, ...</span>\n</pre>\n"],["nan?","Float","Float.html#method-i-nan-3F","()","<p>Returns <code>true</code> if <code>float</code> is an invalid IEEE floating\npoint number.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = <span class=\"ruby-value\">-1.0</span>      <span class=\"ruby-comment\">#=&gt; -1.0</span>\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">nan?</span>        <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["negative?","Float","Float.html#method-i-negative-3F","()","<p>Returns <code>true</code> if <code>float</code> is less than 0.\n"],["negative?","Numeric","Numeric.html#method-i-negative-3F","()","<p>Returns <code>true</code> if <code>num</code> is less than 0.\n"],["negative?","Rational","Rational.html#method-i-negative-3F","()","<p>Returns <code>true</code> if <code>rat</code> is less than 0.\n"],["nesting","Module","Module.html#method-c-nesting","()","<p>Returns the list of <code>Modules</code> nested at the point of call.\n\n<pre>module M1\n  module M2\n    $a = Module.nesting ...</pre>\n"],["new","Array","Array.html#method-c-new","(p1 = v1, p2 = v2)","<p>Returns a new array.\n<p>In the first form, if no arguments are sent, the new array will be empty.\nWhen a …\n"],["new","BasicObject","BasicObject.html#method-c-new","()",""],["new","Class","Class.html#method-i-new","(*args)","<p>Calls #allocate to create a new object of <em>class</em>&#39;s class, then\ninvokes that object&#39;s #initialize …\n"],["new","Class","Class.html#method-c-new","(*args)","<p>Creates a new anonymous (unnamed) class with the given superclass (or\nObject if no parameter is given). …\n"],["new","ConditionVariable","ConditionVariable.html#method-c-new","()","<p>Creates a new condition variable instance.\n"],["new","Dir","Dir.html#method-c-new","(p1, p2 = {})","<p>Returns a new directory object for the named directory.\n<p>The optional <em>encoding</em> keyword argument specifies …\n"],["new","Encoding::Converter","Encoding/Converter.html#method-c-new","(*args)","<p>possible options elements:\n\n<pre>hash form:\n  :invalid =&gt; nil            # raise error on invalid byte sequence ...</pre>\n"],["new","Enumerator","Enumerator.html#method-c-new","(*args)","<p>Creates a new Enumerator object, which can be used as an Enumerable.\n<p>In the first form, iteration is defined …\n"],["new","Enumerator::Chain","Enumerator/Chain.html#method-c-new","(*args)","<p>Generates a new enumerator object that iterates over the elements of given\nenumerable objects in sequence. …\n"],["new","Enumerator::Lazy","Enumerator/Lazy.html#method-c-new","(*args)","<p>Creates a new Lazy enumerator. When the enumerator is actually enumerated\n(e.g. by calling #force),  …\n"],["new","Exception","Exception.html#method-c-new","(*args)","<p>Construct a new Exception object, optionally passing in a message.\n"],["new","File","File.html#method-c-new","(*args)","<p>Opens the file named by <code>filename</code> according to the given\n<code>mode</code> and returns a new File object.\n<p>See IO.new …\n"],["new","File::Stat","File/Stat.html#method-c-new","(p1)","<p>Create a File::Stat object for the given file name (raising an exception if\nthe file doesn&#39;t exist). …\n"],["new","FrozenError","FrozenError.html#method-c-new","(*args, p2 = {})","<p>Construct a new FrozenError exception. If given the <em>receiver</em>\nparameter may subsequently be examined using …\n"],["new","Hash","Hash.html#method-c-new","(*args)","<p>Returns a new, empty hash. If this hash is subsequently accessed by a key\nthat doesn&#39;t correspond …\n"],["new","IO","IO.html#method-c-new","(p1, p2 = v2, p3 = {})","<p>Returns a new IO object (a stream) for the given integer file descriptor\n<code>fd</code> and <code>mode</code> string.  <code>opt</code> may …\n"],["new","KeyError","KeyError.html#method-c-new","(p1 = v1, p2 = {})","<p>Construct a new <code>KeyError</code> exception with the given message,\nreceiver and key.\n"],["new","Module","Module.html#method-c-new","()","<p>Creates a new anonymous module. If a block is given, it is passed the\nmodule object, and the block is …\n"],["new","Mutex","Mutex.html#method-c-new","()","<p>Creates a new Mutex\n"],["new","NameError","NameError.html#method-c-new","(*args, p2 = {})","<p>Construct a new NameError exception. If given the <em>name</em> parameter\nmay subsequently be examined using the …\n"],["new","NoMethodError","NoMethodError.html#method-c-new","(*args, p2 = {})","<p>Construct a NoMethodError exception for a method of the given name called\nwith the given arguments.  …\n"],["new","Pool","Pool.html#method-c-new","(p1 = v1, p2 = v2, p3 = v3)",""],["new","Proc","Proc.html#method-c-new","(*args)","<p>Creates a new Proc object, bound to the current context. Proc::new may be\ncalled without a block only …\n"],["new","Queue","Queue.html#method-c-new","()","<p>Creates a new queue instance.\n"],["new","Random","Random.html#method-c-new","(*args)","<p>Creates a new PRNG using <code>seed</code> to set the initial state. If\n<code>seed</code> is omitted, the generator is initialized …\n"],["new","Range","Range.html#method-c-new","(p1, p2, p3 = v3)","<p>Constructs a range using the given <code>begin</code> and <code>end</code>.\nIf the <code>exclude_end</code> parameter is omitted or is\n<code>false</code> …\n"],["new","Regexp","Regexp.html#method-c-new","(*args)","<p>Constructs a new regular expression from <code>pattern</code>, which can be\neither a String or a Regexp (in which …\n"],["new","Ripper","Ripper.html#method-c-new","(p1, p2 = v2, p3 = v3)","<p>Create a new Ripper object. <em>src</em> must be a String, an IO, or an\nObject which has #gets method.\n<p>This method …\n"],["new","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-c-new","(p1, *args, p3 = {})","<p>Takes <code>source</code>, a String of Ruby code and compiles it to an\nInstructionSequence.\n<p>Optionally takes <code>file</code>, …\n"],["new","SignalException","SignalException.html#method-c-new","(*args)","<p>Construct a new SignalException object.  <code>sig_name</code> should be a\nknown signal name.\n"],["new","SizedQueue","SizedQueue.html#method-c-new","(p1)","<p>Creates a fixed-length queue with a maximum size of <code>max</code>.\n"],["new","String","String.html#method-c-new","(p1 = v1, p2 = {})","<p>Returns a new string object containing a copy of <em>str</em>.\n<p>The optional <em>encoding</em> keyword argument specifies …\n"],["new","Struct","Struct.html#method-c-new","(*args)","<p>The first two forms are used to create a new Struct subclass\n<code>class_name</code> that can contain a value for …\n"],["new","SyntaxError","SyntaxError.html#method-c-new","(*args)","<p>Construct a SyntaxError exception.\n"],["new","SystemCallError","SystemCallError.html#method-c-new","(p1, p2 = v2, p3 = v3)","<p>If <em>errno</em> corresponds to a known system error code, constructs the\nappropriate Errno class for that error, …\n"],["new","SystemExit","SystemExit.html#method-c-new","(*args)","<p>Create a new <code>SystemExit</code> exception with the given status and\nmessage. Status is true, false, or an integer. …\n"],["new","Thread","Thread.html#method-c-new","(*args)","<p>Creates a new thread executing the given block.\n<p>Any <code>args</code> given to ::new will be passed to the block:\n\n<pre>arr ...</pre>\n"],["new","Time","Time.html#method-c-new","(*args)","<p>Returns a Time object.\n<p>It is initialized to the current system time if no argument is given.\n<p><strong>Note:</strong> The …\n"],["new","TracePoint","TracePoint.html#method-c-new","(*events)","<p>Returns a new TracePoint object, not enabled by default.\n<p>Next, in order to activate the trace, you must …\n"],["new","UncaughtThrowError","UncaughtThrowError.html#method-c-new","(*args)","<p>Document-class: UncaughtThrowError\n<p>Raised when <code>throw</code> is called with a <em>tag</em> which does not\nhave corresponding …\n"],["new_seed","Random","Random.html#method-c-new_seed","()","<p>Returns an arbitrary seed value. This is used by Random.new when no seed\nvalue is specified as an argument. …\n"],["next","Enumerator","Enumerator.html#method-i-next","()","<p>Returns the next object in the enumerator, and move the internal position\nforward.  When the position …\n"],["next","Integer","Integer.html#method-i-next","()","<p>Returns the successor of <code>int</code>, i.e. the Integer equal to\n<code>int+1</code>.\n\n<pre>1.next      #=&gt; 2\n(-1).next   #=&gt; 0\n1.succ ...</pre>\n"],["next","String","String.html#method-i-next","()","<p>Returns the successor to <em>str</em>. The successor is calculated by\nincrementing characters starting from the …\n"],["next","Symbol","Symbol.html#method-i-next","()","<p>Same as <code>sym.to_s.succ.intern</code>.\n"],["next!","String","String.html#method-i-next-21","()","<p>Equivalent to String#succ, but modifies the receiver in place.\n"],["next_float","Float","Float.html#method-i-next_float","()","<p>Returns the next representable floating point number.\n<p>Float::MAX.next_float and Float::INFINITY.next_float …\n"],["next_values","Enumerator","Enumerator.html#method-i-next_values","()","<p>Returns the next object as an array in the enumerator, and move the\ninternal position forward.  When …\n"],["nil?","NilClass","NilClass.html#method-i-nil-3F","()","<p>Only the object <em>nil</em> responds <code>true</code> to\n<code>nil?</code>.\n"],["nil?","Object","Object.html#method-i-nil-3F","()","<p>Only the object <em>nil</em> responds <code>true</code> to\n<code>nil?</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Object</span>.<span class=\"ruby-identifier\">new</span>.<span class=\"ruby-identifier\">nil?</span>   <span class=\"ruby-comment\">#=&gt; false</span>\n<span class=\"ruby-keyword\">nil</span>.<span class=\"ruby-identifier\">nil?</span>          <span class=\"ruby-comment\">#=&gt; true</span>\n</pre>\n"],["nlink","File::Stat","File/Stat.html#method-i-nlink","()","<p>Returns the number of hard links to <em>stat</em>.\n\n<pre>File.stat(&quot;testfile&quot;).nlink             #=&gt; 1\nFile.link(&quot;testfile&quot;, ...</pre>\n"],["nobits?","Integer","Integer.html#method-i-nobits-3F","(p1)","<p>Returns <code>true</code> if no bits of <code>int &amp; mask</code> are 1.\n"],["none?","Array","Array.html#method-i-none-3F","(*args)","<p>See also Enumerable#none?\n"],["none?","Enumerable","Enumerable.html#method-i-none-3F","(*args)","<p>Passes each element of the collection to the given block. The method\nreturns <code>true</code> if the block never …\n"],["nonzero?","Numeric","Numeric.html#method-i-nonzero-3F","()","<p>Returns <code>self</code> if <code>num</code> is not zero, <code>nil</code>\notherwise.\n<p>This behavior is useful when chaining comparisons:\n\n<pre>a = ...</pre>\n"],["now","Time","Time.html#method-c-now","(p1 = {})","<p>Creates a new Time object for the current time. This is same as Time.new\nwithout arguments.\n\n<pre>Time.now  ...</pre>\n"],["nsec","Time","Time.html#method-i-nsec","()","<p>Returns the number of nanoseconds for <em>time</em>.\n\n<pre>t = Time.now        #=&gt; 2007-11-17 15:18:03 +0900\n&quot;%10.9f&quot; ...</pre>\n"],["num_waiting","Queue","Queue.html#method-i-num_waiting","()","<p>Returns the number of threads waiting on the queue.\n"],["num_waiting","SizedQueue","SizedQueue.html#method-i-num_waiting","()","<p>Returns the number of threads waiting on the queue.\n"],["numerator","Complex","Complex.html#method-i-numerator","()","<p>Returns the numerator.\n\n<pre>    1   2       3+4i  &lt;-  numerator\n    - + -i  -&gt;  ----\n    2   3        6    ...</pre>\n"],["numerator","Float","Float.html#method-i-numerator","()","<p>Returns the numerator.  The result is machine dependent.\n\n<pre>n = 0.3.numerator    #=&gt; 5404319552844595\nd = ...</pre>\n"],["numerator","Integer","Integer.html#method-i-numerator","()","<p>Returns self.\n"],["numerator","Numeric","Numeric.html#method-i-numerator","()","<p>Returns the numerator.\n"],["numerator","Rational","Rational.html#method-i-numerator","()","<p>Returns the numerator.\n\n<pre>Rational(7).numerator        #=&gt; 7\nRational(7, 1).numerator     #=&gt; 7\nRational(9, ...</pre>\n"],["object_id","Object","Object.html#method-i-object_id","()","<p>Returns an integer identifier for <code>obj</code>.\n<p>The same number will be returned on all calls to <code>object_id</code> for\n…\n"],["oct","String","String.html#method-i-oct","()","<p>Treats leading characters of <em>str</em> as a string of octal digits (with\nan optional sign) and returns the …\n"],["odd?","Integer","Integer.html#method-i-odd-3F","()","<p>Returns <code>true</code> if <code>int</code> is an odd number.\n"],["of","RubyVM::AbstractSyntaxTree","RubyVM/AbstractSyntaxTree.html#method-c-of","(body)","<p>Returns AST nodes of the given <em>proc</em> or <em>method</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">RubyVM</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">AbstractSyntaxTree</span>.<span class=\"ruby-identifier\">of</span>(<span class=\"ruby-identifier\">proc</span> {<span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-value\">2</span>})\n<span class=\"ruby-comment\"># =&gt; #&lt;RubyVM::AbstractSyntaxTree::Node:SCOPE@1:35-1:42&gt; ...</span>\n</pre>\n"],["of","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-c-of","(p1)","<p>Returns the instruction sequence containing the given proc or method.\n<p>For example, using irb:\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># a proc ...</span>\n</pre>\n"],["offset","MatchData","MatchData.html#method-i-offset","(p1)","<p>Returns a two-element array containing the beginning and ending offsets of\nthe <em>n</em>th match. <em>n</em> can be a …\n"],["old_inspect","Enumerator","Enumerator.html#method-i-old_inspect","()",""],["old_to_s","Array","Array.html#method-i-old_to_s","()",""],["old_to_s","FalseClass","FalseClass.html#method-i-old_to_s","()",""],["one?","Array","Array.html#method-i-one-3F","(*args)","<p>See also Enumerable#one?\n"],["one?","Enumerable","Enumerable.html#method-i-one-3F","(*args)","<p>Passes each element of the collection to the given block. The method\nreturns <code>true</code> if the block returns …\n"],["open","Dir","Dir.html#method-c-open","(*args)","<p>The optional <em>encoding</em> keyword argument specifies the encoding of\nthe directory. If not specified, the …\n"],["open","File","File.html#method-c-open","(*args)","<p>With no associated block, File.open is a synonym for File.new. If the\noptional code block is given, it …\n"],["open","IO","IO.html#method-c-open","(*args)","<p>With no associated block, IO.open is a synonym for IO.new.  If the optional\ncode block is given, it will …\n"],["open","Kernel","Kernel.html#method-i-open","(*args)","<p>Creates an IO object connected to the given stream, file, or subprocess.\n<p>If <code>path</code> does not start with a …\n"],["options","Regexp","Regexp.html#method-i-options","()","<p>Returns the set of bits corresponding to the options used when creating\nthis Regexp (see Regexp::new …\n"],["ord","Integer","Integer.html#method-i-ord","()","<p>Returns the <code>int</code> itself.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">97</span>.<span class=\"ruby-identifier\">ord</span>   <span class=\"ruby-comment\">#=&gt; 97</span>\n</pre>\n<p>This method is intended for compatibility to character literals …\n"],["ord","String","String.html#method-i-ord","()","<p>Returns the Integer ordinal of a one-character string.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;a&quot;</span>.<span class=\"ruby-identifier\">ord</span>         <span class=\"ruby-comment\">#=&gt; 97</span>\n</pre>\n"],["original_name","Method","Method.html#method-i-original_name","()","<p>Returns the original name of the method.\n\n<pre>class C\n  def foo; end\n  alias bar foo\nend\nC.instance_method(:bar).original_name ...</pre>\n"],["original_name","UnboundMethod","UnboundMethod.html#method-i-original_name","()","<p>Returns the original name of the method.\n\n<pre>class C\n  def foo; end\n  alias bar foo\nend\nC.instance_method(:bar).original_name ...</pre>\n"],["owned?","File","File.html#method-c-owned-3F","(p1)","<p>Returns <code>true</code> if the named file exists and the effective used\nid of the calling process is the owner of …\n"],["owned?","File::Stat","File/Stat.html#method-i-owned-3F","()","<p>Returns <code>true</code> if the effective user id of the process is the\nsame as the owner of <em>stat</em>.\n\n<pre>File.stat(&quot;testfile&quot;).owned? ...</pre>\n"],["owned?","FileTest","FileTest.html#method-i-owned-3F","(p1)","<p>Returns <code>true</code> if the named file exists and the effective used\nid of the calling process is the owner of …\n"],["owned?","Mutex","Mutex.html#method-i-owned-3F","()","<p>Returns <code>true</code> if this lock is currently held by current thread.\n"],["owner","Method","Method.html#method-i-owner","()","<p>Returns the class or module that defines the method. See also\nMethod#receiver.\n\n<pre>(1..3).method(:map).owner ...</pre>\n"],["owner","UnboundMethod","UnboundMethod.html#method-i-owner","()","<p>Returns the class or module that defines the method. See also\nMethod#receiver.\n\n<pre>(1..3).method(:map).owner ...</pre>\n"],["p","Kernel","Kernel.html#method-i-p","(*args)","<p>For each object, directly writes <em>obj</em>.<code>inspect</code> followed\nby a newline to the program&#39;s standard output. …\n"],["pack","Array","Array.html#method-i-pack","(fmt, buffer: nil)","<p>Packs the contents of <em>arr</em> into a binary sequence according to the\ndirectives in <em>aTemplateString</em> (see …\n"],["parameters","Method","Method.html#method-i-parameters","()","<p>Returns the parameter information of this method.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">foo</span>(<span class=\"ruby-identifier\">bar</span>); <span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-identifier\">method</span>(:<span class=\"ruby-identifier\">foo</span>).<span class=\"ruby-identifier\">parameters</span> <span class=\"ruby-comment\">#=&gt; [[:req, ...</span>\n</pre>\n"],["parameters","Proc","Proc.html#method-i-parameters","()","<p>Returns the parameter information of this proc.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">prc</span> = <span class=\"ruby-identifier\">lambda</span>{<span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">x</span>, <span class=\"ruby-identifier\">y</span>=<span class=\"ruby-value\">42</span>, <span class=\"ruby-operator\">*</span><span class=\"ruby-identifier\">other</span><span class=\"ruby-operator\">|</span>}\n<span class=\"ruby-identifier\">prc</span>.<span class=\"ruby-identifier\">parameters</span>  <span class=\"ruby-comment\">#=&gt; [[:req, ...</span>\n</pre>\n"],["parameters","TracePoint","TracePoint.html#method-i-parameters","()","<p>Return the parameters definition of the method or block that the current\nhook belongs to. Format is the …\n"],["parameters","UnboundMethod","UnboundMethod.html#method-i-parameters","()","<p>Returns the parameter information of this method.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">foo</span>(<span class=\"ruby-identifier\">bar</span>); <span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-identifier\">method</span>(:<span class=\"ruby-identifier\">foo</span>).<span class=\"ruby-identifier\">parameters</span> <span class=\"ruby-comment\">#=&gt; [[:req, ...</span>\n</pre>\n"],["parse","Ripper","Ripper.html#method-i-parse","()","<p>Start parsing and returns the value of the root action.\n"],["parse","RubyVM::AbstractSyntaxTree","RubyVM/AbstractSyntaxTree.html#method-c-parse","(string)","<p>Parses the given <em>string</em> into an abstract syntax tree, returning\nthe root node of that tree.\n<p>SyntaxError …\n"],["parse_file","RubyVM::AbstractSyntaxTree","RubyVM/AbstractSyntaxTree.html#method-c-parse_file","(pathname)","<p>Reads the file from <em>pathname</em>, then parses it like ::parse,\nreturning the root node of the abstract syntax …\n"],["partition","Enumerable","Enumerable.html#method-i-partition","()","<p>Returns two arrays, the first containing the elements of <em>enum</em> for\nwhich the block evaluates to true, …\n"],["partition","String","String.html#method-i-partition","(p1)","<p>Searches <em>sep</em> or pattern (<em>regexp</em>) in the string and\nreturns the part before it, the match, and the part …\n"],["pass","Thread","Thread.html#method-c-pass","()","<p>Give the thread scheduler a hint to pass execution to another thread. A\nrunning thread may or may not …\n"],["path","ARGF","ARGF.html#method-i-path","()","<p>Returns the current filename. “-” is returned when the current file is\nSTDIN.\n<p>For example:\n\n<pre>$ ...</pre>\n"],["path","Dir","Dir.html#method-i-path","()","<p>Returns the path parameter passed to <em>dir</em>&#39;s constructor.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span> = <span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;..&quot;</span>)\n<span class=\"ruby-identifier\">d</span>.<span class=\"ruby-identifier\">path</span>   <span class=\"ruby-comment\">#=&gt; &quot;..&quot;</span>\n</pre>\n"],["path","File","File.html#method-c-path","(p1)","<p>Returns the string representation of the path\n\n<pre>File.path(&quot;/dev/null&quot;)          #=&gt; &quot;/dev/null&quot;\nFile.path(Pathname.new(&quot;/tmp&quot;)) ...</pre>\n"],["path","File","File.html#method-i-path","()","<p>Returns the pathname used to create <em>file</em> as a string. Does not\nnormalize the name.\n<p>The pathname may not …\n"],["path","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-path","()","<p>Returns the path of this instruction sequence.\n<p><code>&lt;compiled&gt;</code> if the iseq was evaluated from a string. …\n"],["path","Thread::Backtrace::Location","Thread/Backtrace/Location.html#method-i-path","()","<p>Returns the file name of this frame.\n<p>For example, using <code>caller_locations.rb</code> from\nThread::Backtrace::Location …\n"],["path","TracePoint","TracePoint.html#method-i-path","()","<p>Path of the file being run\n"],["pause","RubyVM::MJIT","RubyVM/MJIT.html#method-c-pause","(p1 = {})",""],["peek","Enumerator","Enumerator.html#method-i-peek","()","<p>Returns the next object in the enumerator, but doesn&#39;t move the\ninternal position forward.  If the …\n"],["peek_values","Enumerator","Enumerator.html#method-i-peek_values","()","<p>Returns the next object as an array, similar to Enumerator#next_values, but\ndoesn&#39;t move the internal …\n"],["pending_interrupt?","Thread","Thread.html#method-c-pending_interrupt-3F","(*args)","<p>Returns whether or not the asynchronous queue is empty.\n<p>Since Thread::handle_interrupt can be used to …\n"],["pending_interrupt?","Thread","Thread.html#method-i-pending_interrupt-3F","(*args)","<p>Returns whether or not the asynchronous queue is empty for the target\nthread.\n<p>If <code>error</code> is given, then …\n"],["permutation","Array","Array.html#method-i-permutation","(*args)","<p>When invoked with a block, yield all permutations of length <code>n</code>\nof the elements of the array, then return …\n"],["phase","Complex","Complex.html#method-i-phase","()","<p>Returns the angle part of its polar form.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>.<span class=\"ruby-identifier\">polar</span>(<span class=\"ruby-value\">3</span>, <span class=\"ruby-constant\">Math</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">PI</span><span class=\"ruby-operator\">/</span><span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">arg</span>  <span class=\"ruby-comment\">#=&gt; 1.5707963267948966</span>\n</pre>\n"],["phase","Float","Float.html#method-i-phase","()","<p>Returns 0 if the value is positive, pi otherwise.\n"],["phase","Numeric","Numeric.html#method-i-phase","()","<p>Returns 0 if the value is positive, pi otherwise.\n"],["pid","IO","IO.html#method-i-pid","()","<p>Returns the process ID of a child process associated with <em>ios</em>.\nThis will be set by IO.popen.\n\n<pre>pipe = IO.popen(&quot;-&quot;) ...</pre>\n"],["pid","Process","Process.html#method-c-pid","()","<p>Returns the process id of this process. Not available on all platforms.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">pid</span>   <span class=\"ruby-comment\">#=&gt; 27415</span>\n</pre>\n"],["pid","Process::Status","Process/Status.html#method-i-pid","()","<p>Returns the process ID that this status object represents.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">fork</span> { <span class=\"ruby-identifier\">exit</span> }   <span class=\"ruby-comment\">#=&gt; 26569</span>\n<span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">wait</span>    <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["pipe","IO","IO.html#method-c-pipe","(p1 = v1, p2 = v2, p3 = {})","<p>Creates a pair of pipe endpoints (connected to each other) and returns them\nas a two-element array of …\n"],["pipe?","File","File.html#method-c-pipe-3F","(p1)","<p>Returns <code>true</code> if the named file is a pipe.\n<p><em>file_name</em> can be an IO object.\n"],["pipe?","File::Stat","File/Stat.html#method-i-pipe-3F","()","<p>Returns <code>true</code> if the operating system supports pipes and\n<em>stat</em> is a pipe; <code>false</code> otherwise.\n"],["pipe?","FileTest","FileTest.html#method-i-pipe-3F","(p1)","<p>Returns <code>true</code> if the named file is a pipe.\n<p><em>file_name</em> can be an IO object.\n"],["polar","Complex","Complex.html#method-c-polar","(p1, p2 = v2)","<p>Returns a complex object which denotes the given polar form.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>.<span class=\"ruby-identifier\">polar</span>(<span class=\"ruby-value\">3</span>, <span class=\"ruby-value\">0</span>)            <span class=\"ruby-comment\">#=&gt; (3.0+0.0i) ...</span>\n</pre>\n"],["polar","Complex","Complex.html#method-i-polar","()","<p>Returns an array; [cmp.abs, cmp.arg].\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">polar</span>  <span class=\"ruby-comment\">#=&gt; [2.23606797749979, 1.1071487177940904]</span>\n</pre>\n"],["polar","Numeric","Numeric.html#method-i-polar","()","<p>Returns an array; [num.abs, num.arg].\n"],["pop","Array","Array.html#method-i-pop","(*args)","<p>Removes the last element from <code>self</code> and returns it, or\n<code>nil</code> if the array is empty.\n<p>If a number <code>n</code> is given, …\n"],["pop","Queue","Queue.html#method-i-pop","(*args)","<p>Retrieves data from the queue.\n<p>If the queue is empty, the calling thread is suspended until data is pushed\n…\n"],["pop","SizedQueue","SizedQueue.html#method-i-pop","(*args)","<p>Retrieves data from the queue.\n<p>If the queue is empty, the calling thread is suspended until data is pushed\n…\n"],["popen","IO","IO.html#method-c-popen","(*args)","<p>Runs the specified command as a subprocess; the subprocess&#39;s standard\ninput and output will be connected …\n"],["pos","ARGF","ARGF.html#method-i-pos","()","<p>Returns the current offset (in bytes) of the current file in\n<code>ARGF</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ARGF</span>.<span class=\"ruby-identifier\">pos</span>    <span class=\"ruby-comment\">#=&gt; 0</span>\n<span class=\"ruby-constant\">ARGF</span>.<span class=\"ruby-identifier\">gets</span>   <span class=\"ruby-comment\">#=&gt; &quot;This ...</span>\n</pre>\n"],["pos","Dir","Dir.html#method-i-pos","()","<p>Returns the current position in <em>dir</em>. See also Dir#seek.\n\n<pre>d = Dir.new(&quot;testdir&quot;)\nd.tell   #=&gt; 0\nd.read  ...</pre>\n"],["pos","IO","IO.html#method-i-pos","()","<p>Returns the current offset (in bytes) of <em>ios</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>)\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">pos</span>    <span class=\"ruby-comment\">#=&gt; 0</span>\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">gets</span>   <span class=\"ruby-comment\">#=&gt; &quot;This ...</span>\n</pre>\n"],["pos=","ARGF","ARGF.html#method-i-pos-3D","(p1)","<p>Seeks to the position given by <em>position</em> (in bytes) in\n<code>ARGF</code>.\n<p>For example:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ARGF</span>.<span class=\"ruby-identifier\">pos</span> = <span class=\"ruby-value\">17</span>\n<span class=\"ruby-constant\">ARGF</span>.<span class=\"ruby-identifier\">gets</span>   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["pos=","Dir","Dir.html#method-i-pos-3D","(p1)","<p>Synonym for Dir#seek, but returns the position parameter.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span> = <span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;testdir&quot;</span>)   <span class=\"ruby-comment\">#=&gt; #&lt;Dir:0x401b3c40&gt; ...</span>\n</pre>\n"],["pos=","IO","IO.html#method-i-pos-3D","(p1)","<p>Seeks to the given position (in bytes) in <em>ios</em>. It is not\nguaranteed that seeking to the right position …\n"],["positive?","Float","Float.html#method-i-positive-3F","()","<p>Returns <code>true</code> if <code>float</code> is greater than 0.\n"],["positive?","Numeric","Numeric.html#method-i-positive-3F","()","<p>Returns <code>true</code> if <code>num</code> is greater than 0.\n"],["positive?","Rational","Rational.html#method-i-positive-3F","()","<p>Returns <code>true</code> if <code>rat</code> is greater than 0.\n"],["post_match","MatchData","MatchData.html#method-i-post_match","()","<p>Returns the portion of the original string after the current match.\nEquivalent to the special variable …\n"],["pow","Integer","Integer.html#method-i-pow","(*args)","<p>Returns (modular) exponentiation as:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">pow</span>(<span class=\"ruby-identifier\">b</span>)     <span class=\"ruby-comment\">#=&gt; same as a**b</span>\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">pow</span>(<span class=\"ruby-identifier\">b</span>, <span class=\"ruby-identifier\">m</span>)  <span class=\"ruby-comment\">#=&gt; same as (a**b) % m, ...</span>\n</pre>\n"],["pp","Kernel","Kernel.html#method-i-pp","(*objs)","<p>suppress redefinition warning\n"],["ppid","Process","Process.html#method-c-ppid","()","<p>Returns the process id of the parent of this process. Returns untrustworthy\nvalue on Win32/64. Not available …\n"],["pre_match","MatchData","MatchData.html#method-i-pre_match","()","<p>Returns the portion of the original string before the current match.\nEquivalent to the special variable …\n"],["pread","IO","IO.html#method-i-pread","(p1, p2, p3 = v3)","<p>Reads <em>maxlen</em> bytes from <em>ios</em> using the pread system call\nand returns them as a string without modifying …\n"],["pred","Integer","Integer.html#method-i-pred","()","<p>Returns the predecessor of <code>int</code>, i.e. the Integer equal to\n<code>int-1</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1</span>.<span class=\"ruby-identifier\">pred</span>      <span class=\"ruby-comment\">#=&gt; 0</span>\n(<span class=\"ruby-value\">-1</span>).<span class=\"ruby-identifier\">pred</span>   <span class=\"ruby-comment\">#=&gt; -2</span>\n</pre>\n"],["prepend","Array","Array.html#method-i-prepend","(*args)",""],["prepend","Module","Module.html#method-i-prepend","(*args)","<p>Invokes Module.prepend_features on each parameter in reverse order.\n"],["prepend","String","String.html#method-i-prepend","(*args)","<p>Prepend—Prepend the given strings to <em>str</em>.\n\n<pre>a = &quot;!&quot;\na.prepend(&quot;hello &quot;, &quot;world&quot;) #=&gt; &quot;hello world!&quot;\na ...</pre>\n"],["prepend_features","Module","Module.html#method-i-prepend_features","(p1)","<p>When this module is prepended in another, Ruby calls #prepend_features in\nthis module, passing it the …\n"],["prepended","Module","Module.html#method-i-prepended","(p1)","<p>The equivalent of <code>included</code>, but for prepended modules.\n\n<pre>module A\n  def self.prepended(mod)\n    puts &quot;#{self} ...</pre>\n"],["prev_float","Float","Float.html#method-i-prev_float","()","<p>Returns the previous representable floating point number.\n<p>(-Float::MAX).prev_float and (-Float::INFINITY).prev_float …\n"],["primitive_convert","Encoding::Converter","Encoding/Converter.html#method-i-primitive_convert","(p1, p2, p3 = v3, p4 = v4, p5 = v5, p6 = {})","<p>possible opt elements:\n\n<pre>hash form:\n  :partial_input =&gt; true           # source buffer may be part of larger ...</pre>\n"],["primitive_errinfo","Encoding::Converter","Encoding/Converter.html#method-i-primitive_errinfo","()","<p>primitive_errinfo returns important information regarding the last error as\na 5-element array:\n\n<pre>[result, ...</pre>\n"],["print","ARGF","ARGF.html#method-i-print","(*args)","<p>Writes the given object(s) to <em>ios</em>. Returns <code>nil</code>.\n<p>The stream must be opened for writing. Each given object …\n"],["print","IO","IO.html#method-i-print","(*args)","<p>Writes the given object(s) to <em>ios</em>. Returns <code>nil</code>.\n<p>The stream must be opened for writing. Each given object …\n"],["print","Kernel","Kernel.html#method-i-print","(*args)","<p>Prints each object in turn to <code>$stdout</code>. If the output field\nseparator (<code>$,</code>) is not <code>nil</code>, its contents will …\n"],["printf","ARGF","ARGF.html#method-i-printf","(*args)","<p>Formats and writes to <em>ios</em>, converting parameters under control of\nthe format string. See Kernel#sprintf …\n"],["printf","IO","IO.html#method-i-printf","(*args)","<p>Formats and writes to <em>ios</em>, converting parameters under control of\nthe format string. See Kernel#sprintf …\n"],["printf","Kernel","Kernel.html#method-i-printf","(*args)","<p>Equivalent to:\n\n<pre>io.write(sprintf(string, obj, ...))</pre>\n<p>or\n"],["priority","Thread","Thread.html#method-i-priority","()","<p>Returns the priority of <em>thr</em>. Default is inherited from the current\nthread which creating the new thread, …\n"],["priority=","Thread","Thread.html#method-i-priority-3D","(p1)","<p>Sets the priority of <em>thr</em> to <em>integer</em>. Higher-priority\nthreads will run more frequently than lower-priority …\n"],["private","Module","Module.html#method-i-private","(*args)","<p>With no arguments, sets the default visibility for subsequently defined\nmethods to private. With arguments, …\n"],["private_call?","NoMethodError","NoMethodError.html#method-i-private_call-3F","()","<p>Return true if the caused method was called as private.\n"],["private_class_method","Module","Module.html#method-i-private_class_method","(*args)","<p>Makes existing class methods private. Often used to hide the default\nconstructor <code>new</code>.\n<p>String arguments …\n"],["private_constant","Module","Module.html#method-i-private_constant","(*args)","<p>Makes a list of existing constants private.\n"],["private_instance_methods","Module","Module.html#method-i-private_instance_methods","(*args)","<p>Returns a list of the private instance methods defined in <em>mod</em>. If\nthe optional parameter is <code>false</code>, the …\n"],["private_method_defined?","Module","Module.html#method-i-private_method_defined-3F","(*args)","<p>Returns <code>true</code> if the named private method is defined by\n<em>mod</em>.  If <em>inherit</em> is set, the lookup will also …\n"],["private_methods","Object","Object.html#method-i-private_methods","(*args)","<p>Returns the list of private methods accessible to <em>obj</em>. If the\n<em>all</em> parameter is set to <code>false</code>, only those …\n"],["proc","Kernel","Kernel.html#method-i-proc","()","<p>Equivalent to Proc.new.\n"],["produce","Enumerator","Enumerator.html#method-c-produce","(p1 = v1)","<p>Creates an infinite enumerator from any block, just called over and over. \nThe result of the previous …\n"],["product","Array","Array.html#method-i-product","(*args)","<p>Returns an array of all combinations of elements from all arrays.\n<p>The length of the returned array is …\n"],["protected","Module","Module.html#method-i-protected","(*args)","<p>With no arguments, sets the default visibility for subsequently defined\nmethods to protected. With arguments, …\n"],["protected_instance_methods","Module","Module.html#method-i-protected_instance_methods","(*args)","<p>Returns a list of the protected instance methods defined in <em>mod</em>.\nIf the optional parameter is <code>false</code>, …\n"],["protected_method_defined?","Module","Module.html#method-i-protected_method_defined-3F","(*args)","<p>Returns <code>true</code> if the named protected method is defined\n<em>mod</em>.  If <em>inherit</em> is set, the lookup will also search …\n"],["protected_methods","Object","Object.html#method-i-protected_methods","(*args)","<p>Returns the list of protected methods accessible to <em>obj</em>. If the\n<em>all</em> parameter is set to <code>false</code>, only those …\n"],["public","Module","Module.html#method-i-public","(*args)","<p>With no arguments, sets the default visibility for subsequently defined\nmethods to public. With arguments, …\n"],["public_class_method","Module","Module.html#method-i-public_class_method","(*args)","<p>Makes a list of existing class methods public.\n<p>String arguments are converted to symbols.\n"],["public_constant","Module","Module.html#method-i-public_constant","(*args)","<p>Makes a list of existing constants public.\n"],["public_instance_method","Module","Module.html#method-i-public_instance_method","(p1)","<p>Similar to <em>instance_method</em>, searches public method only.\n"],["public_instance_methods","Module","Module.html#method-i-public_instance_methods","(*args)","<p>Returns a list of the public instance methods defined in <em>mod</em>. If\nthe optional parameter is <code>false</code>, the …\n"],["public_method","Object","Object.html#method-i-public_method","(p1)","<p>Similar to <em>method</em>, searches public method only.\n"],["public_method_defined?","Module","Module.html#method-i-public_method_defined-3F","(*args)","<p>Returns <code>true</code> if the named public method is defined by\n<em>mod</em>.  If <em>inherit</em> is set, the lookup will also search …\n"],["public_methods","Object","Object.html#method-i-public_methods","(*args)","<p>Returns the list of public methods accessible to <em>obj</em>. If the\n<em>all</em> parameter is set to <code>false</code>, only those …\n"],["public_send","Object","Object.html#method-i-public_send","(*args)","<p>Invokes the method identified by <em>symbol</em>, passing it any arguments\nspecified. Unlike send, public_send …\n"],["push","Array","Array.html#method-i-push","(*args)","<p>Append — Pushes the given object(s) on to the end of this array. This\nexpression returns the array …\n"],["push","Queue","Queue.html#method-i-push","(p1)","<p>Pushes the given <code>object</code> to the queue.\n"],["push","SizedQueue","SizedQueue.html#method-i-push","(*args)","<p>Pushes <code>object</code> to the queue.\n<p>If there is no space left in the queue, waits until space becomes\navailable, …\n"],["putback","Encoding::Converter","Encoding/Converter.html#method-i-putback","(*args)","<p>Put back the bytes which will be converted.\n<p>The bytes are caused by invalid_byte_sequence error. When …\n"],["putc","ARGF","ARGF.html#method-i-putc","(p1)","<p>If <em>obj</em> is Numeric, write the character whose code is the\nleast-significant byte of <em>obj</em>.  If <em>obj</em> is String …\n"],["putc","IO","IO.html#method-i-putc","(p1)","<p>If <em>obj</em> is Numeric, write the character whose code is the\nleast-significant byte of <em>obj</em>.  If <em>obj</em> is String …\n"],["putc","Kernel","Kernel.html#method-i-putc","(p1)","<p>Equivalent to:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">$stdout</span>.<span class=\"ruby-identifier\">putc</span>(<span class=\"ruby-identifier\">int</span>)\n</pre>\n<p>Refer to the documentation for IO#putc for important information regarding\n…\n"],["puts","ARGF","ARGF.html#method-i-puts","(*args)","<p>Writes the given object(s) to <em>ios</em>. Writes a newline after any that\ndo not already end with a newline …\n"],["puts","IO","IO.html#method-i-puts","(*args)","<p>Writes the given object(s) to <em>ios</em>. Writes a newline after any that\ndo not already end with a newline …\n"],["puts","Kernel","Kernel.html#method-i-puts","(*args)","<p>Equivalent to\n\n<pre>$stdout.puts(obj, ...)</pre>\n"],["pwd","Dir","Dir.html#method-c-pwd","()","<p>Returns the path to the current working directory of this process as a\nstring.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">chdir</span>(<span class=\"ruby-string\">&quot;/tmp&quot;</span>)   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["pwrite","IO","IO.html#method-i-pwrite","(p1, p2)","<p>Writes the given string to <em>ios</em> at <em>offset</em> using pwrite()\nsystem call.  This is advantageous to combining …\n"],["quo","Complex","Complex.html#method-i-quo","(p1)","<p>Performs division.\n\n<pre>Complex(2, 3)  / Complex(2, 3)   #=&gt; ((1/1)+(0/1)*i)\nComplex(900)   / Complex(1)   ...</pre>\n"],["quo","Float","Float.html#method-i-quo","(p1)","<p>Returns <code>float / numeric</code>, same as Float#/.\n"],["quo","Numeric","Numeric.html#method-i-quo","(p1)","<p>Returns the most exact division (rational for integers, float for floats).\n"],["quo","Rational","Rational.html#method-i-quo","(p1)","<p>Performs division.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)  <span class=\"ruby-operator\">/</span> <span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>)   <span class=\"ruby-comment\">#=&gt; (1/1)</span>\n<span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">900</span>)   <span class=\"ruby-operator\">/</span> <span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">1</span>)      <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["quote","Regexp","Regexp.html#method-c-quote","(p1)","<p>Escapes any characters that would have special meaning in a regular\nexpression. Returns a new escaped …\n"],["raise","Fiber","Fiber.html#method-i-raise","(*args)","<p>Raises an exception in the fiber at the point at which the last Fiber.yield\nwas called, or at the start …\n"],["raise","Kernel","Kernel.html#method-i-raise","(*args)","<p>With no arguments, raises the exception in <code>$!</code> or raises a\nRuntimeError if <code>$!</code> is <code>nil</code>.  With a single  …\n"],["raise","Thread","Thread.html#method-i-raise","(*args)","<p>Raises an exception from the given thread. The caller does not have to be\n<code>thr</code>. See Kernel#raise for more …\n"],["raised_exception","TracePoint","TracePoint.html#method-i-raised_exception","()","<p>Value from exception raised on the <code>:raise</code> event\n"],["rand","Kernel","Kernel.html#method-i-rand","(*args)","<p>If called without an argument, or if <code>max.to_i.abs == 0</code>, rand\nreturns a pseudo-random floating point number …\n"],["rand","Random","Random.html#method-i-rand","(*args)","<p>When <code>max</code> is an Integer, <code>rand</code> returns a random\ninteger greater than or equal to zero and less than <code>max</code> …\n"],["rand","Random","Random.html#method-c-rand","(*args)","<p>Alias of Random::DEFAULT.rand.\n"],["rand","Random::Formatter","Random/Formatter.html#method-i-rand","(*args)","<p>Generates formatted random number from raw random bytes. See Random#rand.\n"],["random_number","Random::Formatter","Random/Formatter.html#method-i-random_number","(*args)","<p>Generates formatted random number from raw random bytes. See Random#rand.\n"],["rassoc","Array","Array.html#method-i-rassoc","(p1)","<p>Searches through the array whose elements are also arrays.\n<p>Compares <code>obj</code> with the second element of each …\n"],["rassoc","ENV","ENV.html#method-c-rassoc","(p1)","<p>Returns an Array of the name and value of the environment variable with\n<code>value</code> or <code>nil</code> if the value cannot …\n"],["rassoc","Hash","Hash.html#method-i-rassoc","(p1)","<p>Searches through the hash comparing <em>obj</em> with the value using\n<code>==</code>. Returns the first key-value pair (two-element …\n"],["rationalize","Complex","Complex.html#method-i-rationalize","(*args)","<p>Returns the value as a rational if possible (the imaginary part should be\nexactly zero).\n\n<pre>Complex(1.0/3, ...</pre>\n"],["rationalize","Float","Float.html#method-i-rationalize","(*args)","<p>Returns a simpler approximation of the value (flt-|eps| &lt;= result &lt;=\nflt+|eps|).  If the optional …\n"],["rationalize","Integer","Integer.html#method-i-rationalize","(*args)","<p>Returns the value as a rational.  The optional argument <code>eps</code> is\nalways ignored.\n"],["rationalize","NilClass","NilClass.html#method-i-rationalize","(*args)","<p>Returns zero as a rational.  The optional argument <code>eps</code> is\nalways ignored.\n"],["rationalize","Rational","Rational.html#method-i-rationalize","(*args)","<p>Returns a simpler approximation of the value if the optional argument\n<code>eps</code> is given (rat-|eps| &lt;= result …\n"],["raw_data","GC::Profiler","GC/Profiler.html#method-c-raw_data","()","<p>Returns an Array of individual raw profile data Hashes ordered from\nearliest to latest by <code>:GC_INVOKE_TIME</code> …\n"],["rdev","File::Stat","File/Stat.html#method-i-rdev","()","<p>Returns an integer representing the device type on which <em>stat</em>\nresides. Returns <code>nil</code> if the operating system …\n"],["rdev_major","File::Stat","File/Stat.html#method-i-rdev_major","()","<p>Returns the major part of <code>File_Stat#rdev</code> or <code>nil</code>.\n\n<pre>File.stat(&quot;/dev/fd1&quot;).rdev_major   #=&gt; 2\nFile.stat(&quot;/dev/tty&quot;).rdev_major ...</pre>\n"],["rdev_minor","File::Stat","File/Stat.html#method-i-rdev_minor","()","<p>Returns the minor part of <code>File_Stat#rdev</code> or <code>nil</code>.\n\n<pre>File.stat(&quot;/dev/fd1&quot;).rdev_minor   #=&gt; 1\nFile.stat(&quot;/dev/tty&quot;).rdev_minor ...</pre>\n"],["re_exchange","Process::GID","Process/GID.html#method-c-re_exchange","()","<p>Exchange real and effective group IDs and return the new effective group\nID. Not available on all platforms. …\n"],["re_exchange","Process::UID","Process/UID.html#method-c-re_exchange","()","<p>Exchange real and effective user IDs and return the new effective user ID.\nNot available on all platforms. …\n"],["re_exchangeable?","Process::GID","Process/GID.html#method-c-re_exchangeable-3F","()","<p>Returns <code>true</code> if the real and effective group IDs of a process\nmay be exchanged on the current platform. …\n"],["re_exchangeable?","Process::UID","Process/UID.html#method-c-re_exchangeable-3F","()","<p>Returns <code>true</code> if the real and effective user IDs of a process\nmay be exchanged on the current platform. …\n"],["read","ARGF","ARGF.html#method-i-read","(p1 = v1, p2 = v2)","<p>Reads <em>length</em> bytes from ARGF. The files named on the command line\nare concatenated and treated as a single …\n"],["read","Dir","Dir.html#method-i-read","()","<p>Reads the next entry from <em>dir</em> and returns it as a string. Returns\n<code>nil</code> at the end of the stream.\n\n<pre>d = Dir.new(&quot;testdir&quot;) ...</pre>\n"],["read","IO","IO.html#method-c-read","(p1, p2 = v2, p3 = v3, p4 = v4, p5 = {})","<p>Opens the file, optionally seeks to the given <code>offset</code>, then\nreturns <code>length</code> bytes (defaulting to the rest …\n"],["read","IO","IO.html#method-i-read","(p1 = v1, p2 = v2)","<p>Reads <em>length</em> bytes from the I/O stream.\n<p><em>length</em> must be a non-negative integer or <code>nil</code>.\n<p>If <em>length</em> is a positive …\n"],["read_nonblock","ARGF","ARGF.html#method-i-read_nonblock","(p1, p2 = v2, p3 = {})","<p>Reads at most <em>maxlen</em> bytes from the ARGF stream in non-blocking\nmode.\n"],["read_nonblock","IO","IO.html#method-i-read_nonblock","(len, buf = nil, exception: true)","<p>Reads at most <em>maxlen</em> bytes from <em>ios</em> using the read(2)\nsystem call after O_NONBLOCK is set for the underlying …\n"],["readable?","File","File.html#method-c-readable-3F","(p1)","<p>Returns <code>true</code> if the named file is readable by the effective\nuser and group id of this process. See eaccess(3). …\n"],["readable?","File::Stat","File/Stat.html#method-i-readable-3F","()","<p>Returns <code>true</code> if <em>stat</em> is readable by the effective\nuser id of this process.\n\n<pre>File.stat(&quot;testfile&quot;).readable? ...</pre>\n"],["readable?","FileTest","FileTest.html#method-i-readable-3F","(p1)","<p>Returns <code>true</code> if the named file is readable by the effective\nuser and group id of this process. See eaccess(3). …\n"],["readable_real?","File","File.html#method-c-readable_real-3F","(p1)","<p>Returns <code>true</code> if the named file is readable by the real user\nand group id of this process. See access(3). …\n"],["readable_real?","File::Stat","File/Stat.html#method-i-readable_real-3F","()","<p>Returns <code>true</code> if <em>stat</em> is readable by the real user id\nof this process.\n\n<pre>File.stat(&quot;testfile&quot;).readable_real? ...</pre>\n"],["readable_real?","FileTest","FileTest.html#method-i-readable_real-3F","(p1)","<p>Returns <code>true</code> if the named file is readable by the real user\nand group id of this process. See access(3). …\n"],["readagain_bytes","Encoding::InvalidByteSequenceError","Encoding/InvalidByteSequenceError.html#method-i-readagain_bytes","()","<p>Returns the bytes to be read again when Encoding::InvalidByteSequenceError\noccurs.\n"],["readbyte","ARGF","ARGF.html#method-i-readbyte","()","<p>Reads the next 8-bit byte from ARGF and returns it as an\n<code>Integer</code>. Raises an <code>EOFError</code> after the last byte …\n"],["readbyte","IO","IO.html#method-i-readbyte","()","<p>Reads a byte as with IO#getbyte, but raises an EOFError on end of file.\n"],["readchar","ARGF","ARGF.html#method-i-readchar","()","<p>Reads the next character from <code>ARGF</code> and returns it as a\n<code>String</code>. Raises an <code>EOFError</code> after the last\ncharacter …\n"],["readchar","IO","IO.html#method-i-readchar","()","<p>Reads a one-character string from <em>ios</em>. Raises an EOFError on end\nof file.\n\n<pre>f = File.new(&quot;testfile&quot;)\nf.readchar ...</pre>\n"],["readline","ARGF","ARGF.html#method-i-readline","(*args)","<p>Returns the next line from the current file in <code>ARGF</code>.\n<p>By default lines are assumed to be separated by  …\n"],["readline","IO","IO.html#method-i-readline","(*args)","<p>Reads a line as with IO#gets, but raises an EOFError on end of file.\n"],["readline","Kernel","Kernel.html#method-i-readline","(*args)","<p>Equivalent to Kernel::gets, except <code>readline</code> raises\n<code>EOFError</code> at end of file.\n"],["readlines","ARGF","ARGF.html#method-i-readlines","(*args)","<p>Reads <code>ARGF</code>&#39;s current file in its entirety, returning an\n<code>Array</code> of its lines, one line per element. …\n"],["readlines","IO","IO.html#method-c-readlines","(p1, p2 = v2, p3 = v3, p4 = v4, p5 = {})","<p>Reads the entire file specified by <em>name</em> as individual lines, and\nreturns those lines in an array. Lines …\n"],["readlines","IO","IO.html#method-i-readlines","(*args)","<p>Reads all of the lines in <em>ios</em>, and returns them in an array. Lines\nare separated by the optional <em>sep</em> …\n"],["readlines","Kernel","Kernel.html#method-i-readlines","(*args)","<p>Returns an array containing the lines returned by calling\n<code>Kernel.gets(<em>sep</em>)</code> until the end of file.\n"],["readlink","File","File.html#method-c-readlink","(p1)","<p>Returns the name of the file referenced by the given link. Not available on\nall platforms.\n\n<pre>File.symlink(&quot;testfile&quot;, ...</pre>\n"],["readpartial","ARGF","ARGF.html#method-i-readpartial","(*args)","<p>Reads at most <em>maxlen</em> bytes from the ARGF stream.\n<p>If the optional <em>outbuf</em> argument is present, it must reference …\n"],["readpartial","IO","IO.html#method-i-readpartial","(*args)","<p>Reads at most <em>maxlen</em> bytes from the I/O stream. It blocks only if\n<em>ios</em> has no data immediately available. …\n"],["real","Complex","Complex.html#method-i-real","()","<p>Returns the real part.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">7</span>).<span class=\"ruby-identifier\">real</span>      <span class=\"ruby-comment\">#=&gt; 7</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">9</span>, <span class=\"ruby-value\">-4</span>).<span class=\"ruby-identifier\">real</span>  <span class=\"ruby-comment\">#=&gt; 9</span>\n</pre>\n"],["real","Numeric","Numeric.html#method-i-real","()","<p>Returns self.\n"],["real?","Complex","Complex.html#method-i-real-3F","()","<p>Returns false, even if the complex number has no imaginary part.\n"],["real?","Numeric","Numeric.html#method-i-real-3F","()","<p>Returns <code>true</code> if <code>num</code> is a real number (i.e. not\nComplex).\n"],["realdirpath","File","File.html#method-c-realdirpath","(*args)","<p>Returns the real (absolute) pathname of <em>pathname</em> in the actual\nfilesystem. The real pathname doesn&#39;t …\n"],["realpath","File","File.html#method-c-realpath","(*args)","<p>Returns the real (absolute) pathname of <em>pathname</em> in the actual\nfilesystem not containing symlinks or …\n"],["reason","LocalJumpError","LocalJumpError.html#method-i-reason","()","<p>The reason this block was terminated: :break, :redo, :retry, :next,\n:return, or :noreason.\n"],["receiver","Binding","Binding.html#method-i-receiver","()","<p>Returns the bound receiver of the binding object.\n"],["receiver","FrozenError","FrozenError.html#method-i-receiver","()","<p>Return the receiver associated with this FrozenError exception.\n"],["receiver","KeyError","KeyError.html#method-i-receiver","()","<p>Return the receiver associated with this KeyError exception.\n"],["receiver","Method","Method.html#method-i-receiver","()","<p>Returns the bound receiver of the method object.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">method</span>(:<span class=\"ruby-identifier\">map</span>).<span class=\"ruby-identifier\">receiver</span> <span class=\"ruby-comment\"># =&gt; 1..3</span>\n</pre>\n"],["receiver","NameError","NameError.html#method-i-receiver","()","<p>Return the receiver associated with this NameError exception.\n"],["rect","Complex","Complex.html#method-c-rect","(p1, p2 = v2)","<p>Returns a complex object which denotes the given rectangular form.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>.<span class=\"ruby-identifier\">rectangular</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>)  <span class=\"ruby-comment\">#=&gt; (1+2i)</span>\n</pre>\n"],["rect","Complex","Complex.html#method-i-rect","()","<p>Returns an array; [cmp.real, cmp.imag].\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">rectangular</span>  <span class=\"ruby-comment\">#=&gt; [1, 2]</span>\n</pre>\n"],["rect","Numeric","Numeric.html#method-i-rect","()","<p>Returns an array; [num, 0].\n"],["rectangular","Complex","Complex.html#method-c-rectangular","(p1, p2 = v2)","<p>Returns a complex object which denotes the given rectangular form.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>.<span class=\"ruby-identifier\">rectangular</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>)  <span class=\"ruby-comment\">#=&gt; (1+2i)</span>\n</pre>\n"],["rectangular","Complex","Complex.html#method-i-rectangular","()","<p>Returns an array; [cmp.real, cmp.imag].\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">rectangular</span>  <span class=\"ruby-comment\">#=&gt; [1, 2]</span>\n</pre>\n"],["rectangular","Numeric","Numeric.html#method-i-rectangular","()","<p>Returns an array; [num, 0].\n"],["reduce","Enumerable","Enumerable.html#method-i-reduce","(p1 = v1, p2 = v2)","<p>Combines all elements of <em>enum</em> by applying a binary operation,\nspecified by a block or a symbol that names …\n"],["refine","Module","Module.html#method-i-refine","(p1)","<p>Refine <em>mod</em> in the receiver.\n<p>Returns a module, where refined methods are defined.\n"],["regexp","MatchData","MatchData.html#method-i-regexp","()","<p>Returns the regexp.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">m</span> = <span class=\"ruby-regexp\">/a.*b/</span>.<span class=\"ruby-identifier\">match</span>(<span class=\"ruby-string\">&quot;abc&quot;</span>)\n<span class=\"ruby-identifier\">m</span>.<span class=\"ruby-identifier\">regexp</span> <span class=\"ruby-comment\">#=&gt; /a.*b/</span>\n</pre>\n"],["rehash","ENV","ENV.html#method-c-rehash","()","<p>Re-hashing the environment variables does nothing.  It is provided for\ncompatibility with Hash.\n"],["rehash","Hash","Hash.html#method-i-rehash","()","<p>Rebuilds the hash based on the current hash values for each key. If values\nof key objects have changed …\n"],["reject","Array","Array.html#method-i-reject","()","<p>Returns a new array containing the items in <code>self</code> for which the\ngiven block is not <code>true</code>. The ordering …\n"],["reject","ENV","ENV.html#method-c-reject","()","<p>Same as ENV.delete_if, but works on (and returns) a copy of the\nenvironment.\n"],["reject","Enumerable","Enumerable.html#method-i-reject","()","<p>Returns an array for all elements of <code>enum</code> for which the given\n<code>block</code> returns <code>false</code>.\n<p>If no block is given, …\n"],["reject","Enumerator::Lazy","Enumerator/Lazy.html#method-i-reject","()","<p>Like Enumerable#reject, but chains operation to be lazy-evaluated.\n"],["reject","Hash","Hash.html#method-i-reject","()","<p>Returns a new hash consisting of entries for which the block returns false.\n<p>If no block is given, an enumerator …\n"],["reject!","Array","Array.html#method-i-reject-21","()","<p>Deletes every element of <code>self</code> for which the block evaluates to\n<code>true</code>, if no changes were made returns …\n"],["reject!","ENV","ENV.html#method-c-reject-21","()","<p>Similar to ENV.delete_if, but returns <code>nil</code> if no changes were\nmade.\n<p>Deletes each environment variable for …\n"],["reject!","Hash","Hash.html#method-i-reject-21","()","<p>Equivalent to Hash#delete_if, but returns <code>nil</code> if no changes\nwere made.\n"],["remainder","Integer","Integer.html#method-i-remainder","(p1)","<p>Returns the remainder after dividing <code>int</code> by\n<code>numeric</code>.\n<p><code>x.remainder(y)</code> means <code>x-y*(x/y).truncate</code>.\n\n<pre>5.remainder(3) ...</pre>\n"],["remainder","Numeric","Numeric.html#method-i-remainder","(p1)","<p><code>x.remainder(y)</code> means <code>x-y*(x/y).truncate</code>.\n<p>See Numeric#divmod.\n"],["remove_class_variable","Module","Module.html#method-i-remove_class_variable","(p1)","<p>Removes the definition of the <em>sym</em>, returning that constant&#39;s\nvalue.\n\n<pre>class Dummy\n  @@var = 99\n  puts ...</pre>\n"],["remove_const","Module","Module.html#method-i-remove_const","(p1)","<p>Removes the definition of the given constant, returning that constant&#39;s\nprevious value.  If that …\n"],["remove_instance_variable","Object","Object.html#method-i-remove_instance_variable","(p1)","<p>Removes the named instance variable from <em>obj</em>, returning that\nvariable&#39;s value. String arguments are …\n"],["remove_method","Module","Module.html#method-i-remove_method","(*args)","<p>Removes the method identified by <em>symbol</em> from the current class.\nFor an example, see Module#undef_method …\n"],["remove_stress_to_class","GC","GC.html#method-c-remove_stress_to_class","(*args)","<p>No longer raises NoMemoryError when allocating an instance of the given\nclasses.\n"],["rename","File","File.html#method-c-rename","(p1, p2)","<p>Renames the given file to the new name. Raises a SystemCallError if the\nfile cannot be renamed.\n\n<pre>File.rename(&quot;afile&quot;, ...</pre>\n"],["reopen","IO","IO.html#method-i-reopen","(p1, p2 = v2, p3 = {})","<p>Reassociates <em>ios</em> with the I/O stream given in <em>other_IO</em> or\nto a new stream opened on <em>path</em>. This may dynamically …\n"],["repeated_combination","Array","Array.html#method-i-repeated_combination","(p1)","<p>When invoked with a block, yields all repeated combinations of length\n<code>n</code> of elements from the array and …\n"],["repeated_permutation","Array","Array.html#method-i-repeated_permutation","(p1)","<p>When invoked with a block, yield all repeated permutations of length\n<code>n</code> of the elements of the array, …\n"],["replace","Array","Array.html#method-i-replace","(p1)","<p>Replaces the contents of <code>self</code> with the contents of\n<code>other_ary</code>, truncating or expanding if necessary.\n\n<pre>a ...</pre>\n"],["replace","ENV","ENV.html#method-c-replace","(p1)","<p>Replaces the entire content of the environment variables with the\nname/value pairs in the given <code>hash</code> …\n"],["replace","Hash","Hash.html#method-i-replace","(p1)","<p>Replaces the contents of <em>hsh</em> with the contents of\n<em>other_hash</em>.\n\n<pre>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; =&gt; 200 }\nh.replace({ ...</pre>\n"],["replace","String","String.html#method-i-replace","(p1)","<p>Replaces the contents of <em>str</em> with the corresponding values in\n<em>other_str</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-string\">&quot;hello&quot;</span>         <span class=\"ruby-comment\">#=&gt; &quot;hello&quot; ...</span>\n</pre>\n"],["replacement","Encoding::Converter","Encoding/Converter.html#method-i-replacement","()","<p>Returns the replacement string.\n\n<pre>ec = Encoding::Converter.new(&quot;euc-jp&quot;, &quot;us-ascii&quot;)\np ec.replacement   ...</pre>\n"],["replacement=","Encoding::Converter","Encoding/Converter.html#method-i-replacement-3D","(p1)","<p>Sets the replacement string.\n\n<pre>ec = Encoding::Converter.new(&quot;utf-8&quot;, &quot;us-ascii&quot;, :undef =&gt; :replace)\nec.replacement ...</pre>\n"],["replicate","Encoding","Encoding.html#method-i-replicate","(p1)","<p>Returns a replicated encoding of <em>enc</em> whose name is <em>name</em>.\nThe new encoding should have the same byte structure …\n"],["report","GC::Profiler","GC/Profiler.html#method-c-report","(*args)","<p>Writes the GC::Profiler.result to <code>$stdout</code> or the given IO\nobject.\n"],["report_on_exception","Thread","Thread.html#method-c-report_on_exception","()","<p>Returns the status of the global “report on exception&#39;&#39; condition.\n<p>The default is <code>true</code> since …\n"],["report_on_exception","Thread","Thread.html#method-i-report_on_exception","()","<p>Returns the status of the thread-local “report on exception&#39;&#39;\ncondition for this <code>thr</code>.\n<p>The default …\n"],["report_on_exception=","Thread","Thread.html#method-c-report_on_exception-3D","(p1)","<p>Returns the new state. When set to <code>true</code>, all threads created\nafterwards will inherit the condition and …\n"],["report_on_exception=","Thread","Thread.html#method-i-report_on_exception-3D","(p1)","<p>When set to <code>true</code>, a message is printed on $stderr if an\nexception kills this <code>thr</code>.  See ::report_on_exception …\n"],["require","Kernel","Kernel.html#method-i-require","(p1)","<p>Loads the given <code>name</code>, returning <code>true</code> if\nsuccessful and <code>false</code> if the feature is already loaded.\n<p>If the …\n"],["require_relative","Kernel","Kernel.html#method-i-require_relative","(p1)","<p>Ruby tries to load the library named <em>string</em> relative to the\nrequiring file&#39;s path.  If the file&#39;s …\n"],["respond_to?","Object","Object.html#method-i-respond_to-3F","(p1, p2 = v2)","<p>Returns <code>true</code> if <em>obj</em> responds to the given method. \nPrivate and protected methods are included in the …\n"],["respond_to_missing?","Object","Object.html#method-i-respond_to_missing-3F","(p1, p2)","<p>DO NOT USE THIS DIRECTLY.\n<p>Hook method to return whether the <em>obj</em> can respond to <em>id</em>\nmethod or not.\n<p>When the …\n"],["restore","Marshal","Marshal.html#method-c-restore","(*args)","<p>Returns the result of converting the serialized data in source into a Ruby\nobject (possibly with associated …\n"],["result","GC::Profiler","GC/Profiler.html#method-c-result","()","<p>Returns a profile data report such as:\n\n<pre>GC 1 invokes.\nIndex    Invoke Time(sec)       Use Size(byte)   ...</pre>\n"],["result","StopIteration","StopIteration.html#method-i-result","()","<p>Returns the return value of the iterator.\n\n<pre>o = Object.new\ndef o.each\n  yield 1\n  yield 2\n  yield 3\n  100 ...</pre>\n"],["resume","Fiber","Fiber.html#method-i-resume","(*args)","<p>Resumes the fiber from the point at which the last Fiber.yield was called,\nor starts running it if it …\n"],["resume","RubyVM::MJIT","RubyVM/MJIT.html#method-c-resume","()",""],["return_value","TracePoint","TracePoint.html#method-i-return_value","()","<p>Return value from <code>:return</code>, <code>c_return</code>, and\n<code>b_return</code> event\n"],["reverse","Array","Array.html#method-i-reverse","()","<p>Returns a new array containing <code>self</code>&#39;s elements in reverse\norder.\n\n<pre class=\"ruby\">[ <span class=\"ruby-string\">&quot;a&quot;</span>, <span class=\"ruby-string\">&quot;b&quot;</span>, <span class=\"ruby-string\">&quot;c&quot;</span> ].<span class=\"ruby-identifier\">reverse</span>   <span class=\"ruby-comment\">#=&gt; [&quot;c&quot;, ...</span>\n</pre>\n"],["reverse","String","String.html#method-i-reverse","()","<p>Returns a new string with the characters from <em>str</em> in reverse\norder.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;stressed&quot;</span>.<span class=\"ruby-identifier\">reverse</span>   <span class=\"ruby-comment\">#=&gt; &quot;desserts&quot;</span>\n</pre>\n"],["reverse!","Array","Array.html#method-i-reverse-21","()","<p>Reverses <code>self</code> in place.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = [ <span class=\"ruby-string\">&quot;a&quot;</span>, <span class=\"ruby-string\">&quot;b&quot;</span>, <span class=\"ruby-string\">&quot;c&quot;</span> ]\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">reverse!</span>       <span class=\"ruby-comment\">#=&gt; [&quot;c&quot;, &quot;b&quot;, &quot;a&quot;]</span>\n<span class=\"ruby-identifier\">a</span>                <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["reverse!","String","String.html#method-i-reverse-21","()","<p>Reverses <em>str</em> in place.\n"],["reverse_each","Array","Array.html#method-i-reverse_each","()","<p>Same as Array#each, but traverses <code>self</code> in reverse order.\n\n<pre>a = [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot; ]\na.reverse_each {|x| print ...</pre>\n"],["reverse_each","Enumerable","Enumerable.html#method-i-reverse_each","(*args)","<p>Builds a temporary array and traverses that array in reverse order.\n<p>If no block is given, an enumerator …\n"],["rewind","ARGF","ARGF.html#method-i-rewind","()","<p>Positions the current file to the beginning of input, resetting\n<code>ARGF.lineno</code> to zero.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ARGF</span>.<span class=\"ruby-identifier\">readline</span>   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["rewind","Dir","Dir.html#method-i-rewind","()","<p>Repositions <em>dir</em> to the first entry.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span> = <span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;testdir&quot;</span>)\n<span class=\"ruby-identifier\">d</span>.<span class=\"ruby-identifier\">read</span>     <span class=\"ruby-comment\">#=&gt; &quot;.&quot;</span>\n<span class=\"ruby-identifier\">d</span>.<span class=\"ruby-identifier\">rewind</span>   <span class=\"ruby-comment\">#=&gt; #&lt;Dir:0x401b3fb0&gt; ...</span>\n</pre>\n"],["rewind","Enumerator","Enumerator.html#method-i-rewind","()","<p>Rewinds the enumeration sequence to the beginning.\n<p>If the enclosed object responds to a “rewind” …\n"],["rewind","Enumerator::Chain","Enumerator/Chain.html#method-i-rewind","()","<p>Rewinds the enumerator chain by calling the “rewind” method on each\nenumerable in reverse order. …\n"],["rewind","IO","IO.html#method-i-rewind","()","<p>Positions <em>ios</em> to the beginning of input, resetting #lineno to\nzero.\n\n<pre>f = File.new(&quot;testfile&quot;)\nf.readline ...</pre>\n"],["rid","Process::GID","Process/GID.html#method-c-rid","()","<p>Returns the (real) group ID for this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">gid</span>   <span class=\"ruby-comment\">#=&gt; 500</span>\n</pre>\n"],["rid","Process::UID","Process/UID.html#method-c-rid","()","<p>Returns the (real) user ID of this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">uid</span>   <span class=\"ruby-comment\">#=&gt; 501</span>\n</pre>\n"],["rindex","Array","Array.html#method-i-rindex","(*args)","<p>Returns the <em>index</em> of the last object in <code>self</code>\n<code>==</code> to <code>obj</code>.\n<p>If a block is given instead of an argument, returns …\n"],["rindex","String","String.html#method-i-rindex","(p1, p2 = v2)","<p>Returns the index of the last occurrence of the given <em>substring</em> or\npattern (<em>regexp</em>) in <em>str</em>. Returns  …\n"],["rjust","String","String.html#method-i-rjust","(*args)","<p>If <em>integer</em> is greater than the length of <em>str</em>, returns a\nnew String of length <em>integer</em> with <em>str</em> right justified …\n"],["rmdir","Dir","Dir.html#method-c-rmdir","(p1)","<p>Deletes the named directory. Raises a subclass of SystemCallError if the\ndirectory isn&#39;t empty.\n"],["rotate","Array","Array.html#method-i-rotate","(*args)","<p>Returns a new array by rotating <code>self</code> so that the element at\n<code>count</code> is the first element of the new array. …\n"],["rotate!","Array","Array.html#method-i-rotate-21","(*args)","<p>Rotates <code>self</code> in place so that the element at\n<code>count</code> comes first, and returns <code>self</code>.\n<p>If <code>count</code> is negative …\n"],["round","Float","Float.html#method-i-round","(p1 = v1, p2 = {})","<p>Returns <code>float</code> rounded to the nearest value with a precision of\n<code>ndigits</code> decimal digits (default: 0).\n<p>When …\n"],["round","Integer","Integer.html#method-i-round","(p1 = v1, p2 = {})","<p>Returns <code>int</code> rounded to the nearest value with a precision of\n<code>ndigits</code> decimal digits (default: 0).\n<p>When …\n"],["round","Numeric","Numeric.html#method-i-round","(*args)","<p>Returns <code>num</code> rounded to the nearest value with a precision of\n<code>ndigits</code> decimal digits (default: 0).\n<p>Numeric …\n"],["round","Rational","Rational.html#method-i-round","(*args, p2 = {})","<p>Returns <code>rat</code> rounded to the nearest value with a precision of\n<code>ndigits</code> decimal digits (default: 0).\n<p>When …\n"],["round","Time","Time.html#method-i-round","(*args)","<p>Rounds sub seconds to a given precision in decimal digits (0 digits by\ndefault). It returns a new Time …\n"],["rpartition","String","String.html#method-i-rpartition","(p1)","<p>Searches <em>sep</em> or pattern (<em>regexp</em>) in the string from the\nend of the string, and returns the part before …\n"],["rstrip","String","String.html#method-i-rstrip","()","<p>Returns a copy of the receiver with trailing whitespace removed. See also\nString#lstrip and String#strip …\n"],["rstrip!","String","String.html#method-i-rstrip-21","()","<p>Removes trailing whitespace from the receiver. Returns the altered\nreceiver, or <code>nil</code> if no change was …\n"],["ruby2_keywords","Module","Module.html#method-i-ruby2_keywords","(*args)","<p>For the given method names, marks the method as passing keywords through a\nnormal argument splat.  This …\n"],["ruby2_keywords","Proc","Proc.html#method-i-ruby2_keywords","()","<p>Marks the proc as passing keywords through a normal argument splat. This\nshould only be called on procs …\n"],["ruby2_keywords_hash","Hash","Hash.html#method-c-ruby2_keywords_hash","(p1)","<p>Duplicates a given hash and adds a ruby2_keywords flag. This method is not\nfor casual use; debugging, …\n"],["ruby2_keywords_hash?","Hash","Hash.html#method-c-ruby2_keywords_hash-3F","(p1)","<p>Checks if a given hash is flagged by Module#ruby2_keywords (or\nProc#ruby2_keywords). This method is not …\n"],["run","Thread","Thread.html#method-i-run","()","<p>Wakes up <code>thr</code>, making it eligible for scheduling.\n\n<pre>a = Thread.new { puts &quot;a&quot;; Thread.stop; puts &quot;c&quot; }\nsleep ...</pre>\n"],["safe_level","Thread","Thread.html#method-i-safe_level","()","<p>Returns the safe level.\n<p>This method is obsolete because $SAFE is a process global state. Simply\ncheck …\n"],["sample","Array","Array.html#method-i-sample","(*args)","<p>Choose a random element or <code>n</code> random elements from the array.\n<p>The elements are chosen by using random and …\n"],["saturday?","Time","Time.html#method-i-saturday-3F","()","<p>Returns <code>true</code> if <em>time</em> represents Saturday.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">local</span>(<span class=\"ruby-value\">2006</span>, <span class=\"ruby-value\">6</span>, <span class=\"ruby-value\">10</span>)      <span class=\"ruby-comment\">#=&gt; 2006-06-10 00:00:00 -0500 ...</span>\n</pre>\n"],["scan","String","String.html#method-i-scan","(p1)","<p>Both forms iterate through <em>str</em>, matching the pattern (which may be\na Regexp or a String). For each match, …\n"],["scrub","String","String.html#method-i-scrub","(*args)","<p>If the string is invalid byte sequence then replace invalid bytes with\ngiven replacement character, else …\n"],["scrub!","String","String.html#method-i-scrub-21","(*args)","<p>If the string is invalid byte sequence then replace invalid bytes with\ngiven replacement character, else …\n"],["search_convpath","Encoding::Converter","Encoding/Converter.html#method-c-search_convpath","(*args)","<p>Returns a conversion path.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">p</span> <span class=\"ruby-constant\">Encoding</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Converter</span>.<span class=\"ruby-identifier\">search_convpath</span>(<span class=\"ruby-string\">&quot;ISO-8859-1&quot;</span>, <span class=\"ruby-string\">&quot;EUC-JP&quot;</span>)\n<span class=\"ruby-comment\">#=&gt; [[#&lt;Encoding:ISO-8859-1&gt;, ...</span>\n</pre>\n"],["sec","Time","Time.html#method-i-sec","()","<p>Returns the second of the minute (0..60) for <em>time</em>.\n<p><strong>Note:</strong> Seconds range from zero to 60 to allow the system …\n"],["seed","Random","Random.html#method-i-seed","()","<p>Returns the seed value used to initialize the generator. This may be used\nto initialize another generator …\n"],["seek","ARGF","ARGF.html#method-i-seek","(*args)","<p>Seeks to offset <em>amount</em> (an <code>Integer</code>) in the\n<code>ARGF</code> stream according to the value of <em>whence</em>. See\nIO#seek …\n"],["seek","Dir","Dir.html#method-i-seek","(p1)","<p>Seeks to a particular location in <em>dir</em>. <em>integer</em> must be a\nvalue returned by Dir#tell.\n\n<pre>d = Dir.new(&quot;testdir&quot;) ...</pre>\n"],["seek","IO","IO.html#method-i-seek","(p1, p2 = v2)","<p>Seeks to a given offset <em>anInteger</em> in the stream according to the\nvalue of <em>whence</em>:\n\n<pre>:CUR or IO::SEEK_CUR ...</pre>\n"],["select","Array","Array.html#method-i-select","()","<p>Returns a new array containing all elements of <code>ary</code> for which\nthe given <code>block</code> returns a true value.\n<p>If …\n"],["select","ENV","ENV.html#method-c-select","()","<p>Returns a copy of the environment for entries where the block returns true.\n<p>Returns an Enumerator if no …\n"],["select","Enumerable","Enumerable.html#method-i-select","()","<p>Returns an array containing all elements of <code>enum</code> for which the\ngiven <code>block</code> returns a true value.\n<p>The  …\n"],["select","Enumerator::Lazy","Enumerator/Lazy.html#method-i-select","()","<p>Like Enumerable#select, but chains operation to be lazy-evaluated.\n"],["select","Hash","Hash.html#method-i-select","()","<p>Returns a new hash consisting of entries for which the block returns true.\n<p>If no block is given, an enumerator …\n"],["select","IO","IO.html#method-c-select","(p1, p2 = v2, p3 = v3, p4 = v4)","<p>Calls select(2) system call. It monitors given arrays of IO objects, waits\nuntil one or more of IO objects …\n"],["select","Kernel","Kernel.html#method-i-select","(p1, p2 = v2, p3 = v3, p4 = v4)","<p>Calls select(2) system call. It monitors given arrays of IO objects, waits\nuntil one or more of IO objects …\n"],["select","Struct","Struct.html#method-i-select","(*args)","<p>Yields each member value from the struct to the block and returns an Array\ncontaining the member values …\n"],["select!","Array","Array.html#method-i-select-21","()","<p>Invokes the given block passing in successive elements from\n<code>self</code>, deleting elements for which the block …\n"],["select!","ENV","ENV.html#method-c-select-21","()","<p>Equivalent to ENV.keep_if but returns <code>nil</code> if no changes were\nmade.\n<p>ENV.filter! is an alias for ENV.select! …\n"],["select!","Hash","Hash.html#method-i-select-21","()","<p>Equivalent to Hash#keep_if, but returns <code>nil</code> if no changes were\nmade.\n<p>Hash#filter! is an alias for Hash#select! …\n"],["self","TracePoint","TracePoint.html#method-i-self","()","<p>Return the trace object during event\n<p>Same as TracePoint#binding:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">trace</span>.<span class=\"ruby-identifier\">binding</span>.<span class=\"ruby-identifier\">eval</span>(<span class=\"ruby-string\">&#39;self&#39;</span>)\n</pre>\n"],["send","Object","Object.html#method-i-send","(*args)","<p>Invokes the method identified by <em>symbol</em>, passing it any arguments\nspecified. You can use <code>__send__</code> if …\n"],["set_backtrace","Exception","Exception.html#method-i-set_backtrace","(p1)","<p>Sets the backtrace information associated with <code>exc</code>. The\n<code>backtrace</code> must be an array of String objects …\n"],["set_encoding","ARGF","ARGF.html#method-i-set_encoding","(*args)","<p>If single argument is specified, strings read from ARGF are tagged with the\nencoding specified.\n<p>If two …\n"],["set_encoding","IO","IO.html#method-i-set_encoding","(p1, p2 = v2, p3 = {})","<p>If single argument is specified, read string from io is tagged with the\nencoding specified.  If encoding …\n"],["set_encoding_by_bom","IO","IO.html#method-i-set_encoding_by_bom","()","<p>Checks if <code>ios</code> starts with a BOM, and then consumes it and sets\nthe external encoding.  Returns the result …\n"],["set_trace_func","Kernel","Kernel.html#method-i-set_trace_func","(p1)","<p>Establishes <em>proc</em> as the handler for tracing, or disables tracing\nif the parameter is <code>nil</code>.\n<p><strong>Note:</strong> this method …\n"],["set_trace_func","Thread","Thread.html#method-i-set_trace_func","(p1)","<p>Establishes <em>proc</em> on <em>thr</em> as the handler for tracing, or\ndisables tracing if the parameter is <code>nil</code>.\n<p>See  …\n"],["setbyte","String","String.html#method-i-setbyte","(p1, p2)","<p>modifies the <em>index</em>th byte as <em>integer</em>.\n"],["setegid","Process::Sys","Process/Sys.html#method-c-setegid","(p1)","<p>Set the effective group ID of the calling process to <em>group</em>.  Not\navailable on all platforms.\n"],["seteuid","Process::Sys","Process/Sys.html#method-c-seteuid","(p1)","<p>Set the effective user ID of the calling process to <em>user</em>.  Not\navailable on all platforms.\n"],["setgid","Process::Sys","Process/Sys.html#method-c-setgid","(p1)","<p>Set the group ID of the current process to <em>group</em>. Not available on\nall platforms.\n"],["setgid?","File","File.html#method-c-setgid-3F","(p1)","<p>Returns <code>true</code> if the named file has the setgid bit set.\n<p><em>file_name</em> can be an IO object.\n"],["setgid?","File::Stat","File/Stat.html#method-i-setgid-3F","()","<p>Returns <code>true</code> if <em>stat</em> has the set-group-id permission\nbit set, <code>false</code> if it doesn&#39;t or if the operating …\n"],["setgid?","FileTest","FileTest.html#method-i-setgid-3F","(p1)","<p>Returns <code>true</code> if the named file has the setgid bit set.\n<p><em>file_name</em> can be an IO object.\n"],["setpgid","Process","Process.html#method-c-setpgid","(p1, p2)","<p>Sets the process group ID of <em>pid</em> (0 indicates this process) to\n<em>integer</em>. Not available on all platforms. …\n"],["setpgrp","Process","Process.html#method-c-setpgrp","()","<p>Equivalent to <code>setpgid(0,0)</code>. Not available on all platforms.\n"],["setpriority","Process","Process.html#method-c-setpriority","(p1, p2, p3)","<p>See Process.getpriority.\n\n<pre>Process.setpriority(Process::PRIO_USER, 0, 19)      #=&gt; 0\nProcess.setpriority(Process::PRIO_PROCESS, ...</pre>\n"],["setproctitle","Process","Process.html#method-c-setproctitle","(p1)","<p>Sets the process title that appears on the ps(1) command.  Not necessarily\neffective on all platforms. …\n"],["setregid","Process::Sys","Process/Sys.html#method-c-setregid","(p1, p2)","<p>Sets the (group) real and/or effective group IDs of the current process to\n<em>rid</em> and <em>eid</em>, respectively. …\n"],["setresgid","Process::Sys","Process/Sys.html#method-c-setresgid","(p1, p2, p3)","<p>Sets the (group) real, effective, and saved user IDs of the current process\nto <em>rid</em>, <em>eid</em>, and <em>sid</em> respectively. …\n"],["setresuid","Process::Sys","Process/Sys.html#method-c-setresuid","(p1, p2, p3)","<p>Sets the (user) real, effective, and saved user IDs of the current process\nto <em>rid</em>, <em>eid</em>, and <em>sid</em> respectively. …\n"],["setreuid","Process::Sys","Process/Sys.html#method-c-setreuid","(p1, p2)","<p>Sets the (user) real and/or effective user IDs of the current process to\n<em>rid</em> and <em>eid</em>, respectively.  …\n"],["setrgid","Process::Sys","Process/Sys.html#method-c-setrgid","(p1)","<p>Set the real group ID of the calling process to <em>group</em>. Not\navailable on all platforms.\n"],["setrlimit","Process","Process.html#method-c-setrlimit","(*args)","<p>Sets the resource limit of the process. <em>cur_limit</em> means current\n(soft) limit and <em>max_limit</em> means maximum …\n"],["setruid","Process::Sys","Process/Sys.html#method-c-setruid","(p1)","<p>Set the real user ID of the calling process to <em>user</em>. Not available\non all platforms.\n"],["setsid","Process","Process.html#method-c-setsid","()","<p>Establishes this process as a new session and process group leader, with no\ncontrolling tty. Returns …\n"],["setuid","Process::Sys","Process/Sys.html#method-c-setuid","(p1)","<p>Set the user ID of the current process to <em>user</em>. Not available on\nall platforms.\n"],["setuid?","File","File.html#method-c-setuid-3F","(p1)","<p>Returns <code>true</code> if the named file has the setuid bit set.\n<p><em>file_name</em> can be an IO object.\n"],["setuid?","File::Stat","File/Stat.html#method-i-setuid-3F","()","<p>Returns <code>true</code> if <em>stat</em> has the set-user-id permission\nbit set, <code>false</code> if it doesn&#39;t or if the operating …\n"],["setuid?","FileTest","FileTest.html#method-i-setuid-3F","(p1)","<p>Returns <code>true</code> if the named file has the setuid bit set.\n<p><em>file_name</em> can be an IO object.\n"],["shift","Array","Array.html#method-i-shift","(*args)","<p>Removes the first element of <code>self</code> and returns it (shifting all\nother elements down by one). Returns  …\n"],["shift","ENV","ENV.html#method-c-shift","()","<p>Removes the first environment variable from ENV and returns a 2-element\nArray containing its name and …\n"],["shift","Hash","Hash.html#method-i-shift","()","<p>Removes a key-value pair from <em>hsh</em> and returns it as the two-item\narray <code>[</code> <em>key, value</em> <code>]</code>, or the hash&#39;s\n…\n"],["shift","Queue","Queue.html#method-i-shift","(*args)",""],["shift","SizedQueue","SizedQueue.html#method-i-shift","(*args)",""],["shortest_abbreviation","Object","Object.html#method-i-shortest_abbreviation","(s = '', m = callable_methods)",""],["shuffle","Array","Array.html#method-i-shuffle","(*args)","<p>Returns a new array with elements of <code>self</code> shuffled.\n\n<pre>a = [ 1, 2, 3 ]           #=&gt; [1, 2, 3]\na.shuffle ...</pre>\n"],["shuffle!","Array","Array.html#method-i-shuffle-21","(*args)","<p>Shuffles elements in <code>self</code> in place.\n\n<pre>a = [ 1, 2, 3 ]           #=&gt; [1, 2, 3]\na.shuffle!                ...</pre>\n"],["sid_available?","Process::GID","Process/GID.html#method-c-sid_available-3F","()","<p>Returns <code>true</code> if the current platform has saved group ID\nfunctionality.\n"],["sid_available?","Process::UID","Process/UID.html#method-c-sid_available-3F","()","<p>Returns <code>true</code> if the current platform has saved user ID\nfunctionality.\n"],["signal","ConditionVariable","ConditionVariable.html#method-i-signal","()","<p>Wakes up the first thread in line waiting for this lock.\n"],["signaled?","Process::Status","Process/Status.html#method-i-signaled-3F","()","<p>Returns <code>true</code> if <em>stat</em> terminated because of an\nuncaught signal.\n"],["signame","Signal","Signal.html#method-c-signame","(p1)","<p>Convert signal number to signal name. Returns <code>nil</code> if the signo\nis an invalid signal number.\n\n<pre>Signal.trap(&quot;INT&quot;) ...</pre>\n"],["signo","SignalException","SignalException.html#method-i-signo","()","<p>Returns a signal number.\n"],["sin","Math","Math.html#method-c-sin","(p1)","<p>Computes the sine of <code>x</code> (expressed in radians). Returns a Float\nin the range -1.0..1.0.\n<p>Domain: (-INFINITY, …\n"],["singleton_class","Object","Object.html#method-i-singleton_class","()","<p>Returns the singleton class of <em>obj</em>.  This method creates a new\nsingleton class if <em>obj</em> does not have one. …\n"],["singleton_class?","Module","Module.html#method-i-singleton_class-3F","()","<p>Returns <code>true</code> if <em>mod</em> is a singleton class or\n<code>false</code> if it is an ordinary class or module.\n\n<pre>class C\nend\nC.singleton_class? ...</pre>\n"],["singleton_method","Object","Object.html#method-i-singleton_method","(p1)","<p>Similar to <em>method</em>, searches singleton method only.\n\n<pre>class Demo\n  def initialize(n)\n    @iv = n\n  end\n  ...</pre>\n"],["singleton_method_added","BasicObject","BasicObject.html#method-i-singleton_method_added","(p1)","<p>Invoked as a callback whenever a singleton method is added to the receiver.\n\n<pre>module Chatty\n  def Chatty.singleton_method_added(id) ...</pre>\n"],["singleton_method_removed","BasicObject","BasicObject.html#method-i-singleton_method_removed","(p1)","<p>Invoked as a callback whenever a singleton method is removed from the\nreceiver.\n\n<pre>module Chatty\n  def Chatty.singleton_method_removed(id) ...</pre>\n"],["singleton_method_undefined","BasicObject","BasicObject.html#method-i-singleton_method_undefined","(p1)","<p>Invoked as a callback whenever a singleton method is undefined in the\nreceiver.\n\n<pre>module Chatty\n  def Chatty.singleton_method_undefined(id) ...</pre>\n"],["singleton_methods","Object","Object.html#method-i-singleton_methods","(*args)","<p>Returns an array of the names of singleton methods for <em>obj</em>. If the\noptional <em>all</em> parameter is true, the …\n"],["sinh","Math","Math.html#method-c-sinh","(p1)","<p>Computes the hyperbolic sine of <code>x</code> (expressed in radians).\n<p>Domain: (-INFINITY, INFINITY)\n<p>Codomain: (-INFINITY, …\n"],["size","Array","Array.html#method-i-size","()",""],["size","ENV","ENV.html#method-c-size","()","<p>Returns the number of environment variables.\n"],["size","Enumerator","Enumerator.html#method-i-size","()","<p>Returns the size of the enumerator, or <code>nil</code> if it can&#39;t be\ncalculated lazily.\n\n<pre>(1..100).to_a.permutation(4).size ...</pre>\n"],["size","Enumerator::ArithmeticSequence","Enumerator/ArithmeticSequence.html#method-i-size","()","<p>Returns the number of elements in this arithmetic sequence if it is a\nfinite sequence.  Otherwise, returns …\n"],["size","Enumerator::Chain","Enumerator/Chain.html#method-i-size","()","<p>Returns the total size of the enumerator chain calculated by summing up the\nsize of each enumerable in …\n"],["size","File","File.html#method-i-size","()","<p>Returns the size of <em>file</em> in bytes.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">size</span>   <span class=\"ruby-comment\">#=&gt; 66</span>\n</pre>\n"],["size","File","File.html#method-c-size","(p1)","<p>Returns the size of <code>file_name</code>.\n<p><em>file_name</em> can be an IO object.\n"],["size","File::Stat","File/Stat.html#method-i-size","()","<p>Returns the size of <em>stat</em> in bytes.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">size</span>   <span class=\"ruby-comment\">#=&gt; 66</span>\n</pre>\n"],["size","FileTest","FileTest.html#method-i-size","(p1)","<p>Returns the size of <code>file_name</code>.\n<p><em>file_name</em> can be an IO object.\n"],["size","Hash","Hash.html#method-i-size","()","<p>Returns the number of key-value pairs in the hash.\n\n<pre>h = { &quot;d&quot; =&gt; 100, &quot;a&quot; =&gt; 200, &quot;v&quot; =&gt; 300, &quot;e&quot; =&gt; 400 ...</pre>\n"],["size","Integer","Integer.html#method-i-size","()","<p>Returns the number of bytes in the machine representation of\n<code>int</code> (machine dependent).\n\n<pre>1.size          ...</pre>\n"],["size","MatchData","MatchData.html#method-i-size","()","<p>Returns the number of elements in the match array.\n\n<pre>m = /(.)(.)(\\d+)(\\d)/.match(&quot;THX1138.&quot;)\nm.length   ...</pre>\n"],["size","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-size","()","<p>Returns the number of referenced objects\n"],["size","Queue","Queue.html#method-i-size","()",""],["size","Range","Range.html#method-i-size","()","<p>Returns the number of elements in the range. Both the begin and the end of\nthe Range must be Numeric …\n"],["size","SizedQueue","SizedQueue.html#method-i-size","()",""],["size","String","String.html#method-i-size","()","<p>Returns the character length of <em>str</em>.\n"],["size","Struct","Struct.html#method-i-size","()","<p>Returns the number of struct members.\n\n<pre>Customer = Struct.new(:name, :address, :zip)\njoe = Customer.new(&quot;Joe ...</pre>\n"],["size","Symbol","Symbol.html#method-i-size","()","<p>Same as <code>sym.to_s.length</code>.\n"],["size?","File","File.html#method-c-size-3F","(p1)","<p>Returns <code>nil</code> if <code>file_name</code> doesn&#39;t exist or has\nzero size, the size of the file otherwise.\n<p><em>file_name</em> …\n"],["size?","File::Stat","File/Stat.html#method-i-size-3F","()","<p>Returns the size of <em>stat</em> in bytes.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">size</span>   <span class=\"ruby-comment\">#=&gt; 66</span>\n</pre>\n"],["size?","FileTest","FileTest.html#method-i-size-3F","(p1)","<p>Returns <code>nil</code> if <code>file_name</code> doesn&#39;t exist or has\nzero size, the size of the file otherwise.\n<p><em>file_name</em> …\n"],["skip","ARGF","ARGF.html#method-i-skip","()","<p>Sets the current file to the next file in ARGV. If there aren&#39;t any\nmore files it has no effect. …\n"],["sleep","Kernel","Kernel.html#method-i-sleep","(*args)","<p>Suspends the current thread for <em>duration</em> seconds (which may be any\nnumber, including a <code>Float</code> with fractional …\n"],["sleep","Mutex","Mutex.html#method-i-sleep","(*args)","<p>Releases the lock and sleeps <code>timeout</code> seconds if it is given\nand non-nil or forever.  Raises <code>ThreadError</code> …\n"],["slice","Array","Array.html#method-i-slice","(*args)","<p>Element Reference — Returns the element at <code>index</code>, or returns a\nsubarray starting at the <code>start</code> index …\n"],["slice","ENV","ENV.html#method-c-slice","(*args)","<p>Returns a hash containing only the given keys from ENV and their values.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">slice</span>(<span class=\"ruby-string\">&quot;TERM&quot;</span>,<span class=\"ruby-string\">&quot;HOME&quot;</span>)  <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["slice","Hash","Hash.html#method-i-slice","(*args)","<p>Returns a hash containing only the given keys and their values.\n\n<pre>h = { a: 100, b: 200, c: 300 }\nh.slice(:a) ...</pre>\n"],["slice","String","String.html#method-i-slice","(*args)","<p>Element Reference — If passed a single <code>index</code>, returns a\nsubstring of one character at that index.  …\n"],["slice","Symbol","Symbol.html#method-i-slice","(*args)","<p>Returns <code>sym.to_s[]</code>.\n"],["slice!","Array","Array.html#method-i-slice-21","(*args)","<p>Deletes the element(s) given by an <code>index</code> (optionally up to\n<code>length</code> elements) or by a <code>range</code>.\n<p>Returns the …\n"],["slice!","String","String.html#method-i-slice-21","(*args)","<p>Deletes the specified portion from <em>str</em>, and returns the portion\ndeleted.\n\n<pre>string = &quot;this is a string&quot;\nstring.slice!(2) ...</pre>\n"],["slice_after","Enumerable","Enumerable.html#method-i-slice_after","(p1)","<p>Creates an enumerator for each chunked elements. The ends of chunks are\ndefined by <em>pattern</em> and the block. …\n"],["slice_after","Enumerator::Lazy","Enumerator/Lazy.html#method-i-slice_after","(*args)","<p>Like Enumerable#slice_after, but chains operation to be lazy-evaluated.\n"],["slice_before","Enumerable","Enumerable.html#method-i-slice_before","(p1)","<p>Creates an enumerator for each chunked elements. The beginnings of chunks\nare defined by <em>pattern</em> and …\n"],["slice_before","Enumerator::Lazy","Enumerator/Lazy.html#method-i-slice_before","(*args)","<p>Like Enumerable#slice_before, but chains operation to be lazy-evaluated.\n"],["slice_when","Enumerable","Enumerable.html#method-i-slice_when","()","<p>Creates an enumerator for each chunked elements. The beginnings of chunks\nare defined by the block.\n<p>This …\n"],["slice_when","Enumerator::Lazy","Enumerator/Lazy.html#method-i-slice_when","(*args)","<p>Like Enumerable#slice_when, but chains operation to be lazy-evaluated.\n"],["socket?","File","File.html#method-c-socket-3F","(p1)","<p>Returns <code>true</code> if the named file is a socket.\n<p><em>file_name</em> can be an IO object.\n"],["socket?","File::Stat","File/Stat.html#method-i-socket-3F","()","<p>Returns <code>true</code> if <em>stat</em> is a socket, <code>false</code>\nif it isn&#39;t or if the operating system doesn&#39;t support …\n"],["socket?","FileTest","FileTest.html#method-i-socket-3F","(p1)","<p>Returns <code>true</code> if the named file is a socket.\n<p><em>file_name</em> can be an IO object.\n"],["sort","Array","Array.html#method-i-sort","()","<p>Returns a new array created by sorting <code>self</code>.\n<p>Comparisons for the sort will be done using the <code>&lt;=&gt;</code> …\n"],["sort","Enumerable","Enumerable.html#method-i-sort","()","<p>Returns an array containing the items in <em>enum</em> sorted.\n<p>Comparisons for the sort will be done using the …\n"],["sort!","Array","Array.html#method-i-sort-21","()","<p>Sorts <code>self</code> in place.\n<p>Comparisons for the sort will be done using the <code>&lt;=&gt;</code>\noperator or using an optional …\n"],["sort_by","Enumerable","Enumerable.html#method-i-sort_by","()","<p>Sorts <em>enum</em> using a set of keys generated by mapping the values in\n<em>enum</em> through the given block.\n<p>The result …\n"],["sort_by!","Array","Array.html#method-i-sort_by-21","()","<p>Sorts <code>self</code> in place using a set of keys generated by mapping\nthe values in <code>self</code> through the given block. …\n"],["source","Regexp","Regexp.html#method-i-source","()","<p>Returns the original string of the pattern.\n\n<pre class=\"ruby\"><span class=\"ruby-regexp\">/ab+c/ix</span>.<span class=\"ruby-identifier\">source</span> <span class=\"ruby-comment\">#=&gt; &quot;ab+c&quot;</span>\n</pre>\n<p>Note that escape sequences are retained …\n"],["source_encoding","Encoding::Converter","Encoding/Converter.html#method-i-source_encoding","()","<p>Returns the source encoding as an Encoding object.\n"],["source_encoding","Encoding::InvalidByteSequenceError","Encoding/InvalidByteSequenceError.html#method-i-source_encoding","()","<p>Returns the source encoding as an encoding object.\n<p>Note that the result may not be equal to the source …\n"],["source_encoding","Encoding::UndefinedConversionError","Encoding/UndefinedConversionError.html#method-i-source_encoding","()","<p>Returns the source encoding as an encoding object.\n<p>Note that the result may not be equal to the source …\n"],["source_encoding_name","Encoding::InvalidByteSequenceError","Encoding/InvalidByteSequenceError.html#method-i-source_encoding_name","()","<p>Returns the source encoding name as a string.\n"],["source_encoding_name","Encoding::UndefinedConversionError","Encoding/UndefinedConversionError.html#method-i-source_encoding_name","()","<p>Returns the source encoding name as a string.\n"],["source_location","Binding","Binding.html#method-i-source_location","()","<p>Returns the Ruby source filename and line number of the binding object.\n"],["source_location","Method","Method.html#method-i-source_location","()","<p>Returns the Ruby source filename and line number containing this method or\nnil if this method was not …\n"],["source_location","Proc","Proc.html#method-i-source_location","()","<p>Returns the Ruby source filename and line number containing this proc or\n<code>nil</code> if this proc was not defined …\n"],["source_location","UnboundMethod","UnboundMethod.html#method-i-source_location","()","<p>Returns the Ruby source filename and line number containing this method or\nnil if this method was not …\n"],["spawn","Kernel","Kernel.html#method-i-spawn","(*args)","<p>spawn executes specified command and return its pid.\n\n<pre>pid = spawn(&quot;tar xf ruby-2.0.0-p195.tar.bz2&quot;)\nProcess.wait ...</pre>\n"],["spawn","Process","Process.html#method-c-spawn","(*args)","<p>spawn executes specified command and return its pid.\n\n<pre>pid = spawn(&quot;tar xf ruby-2.0.0-p195.tar.bz2&quot;)\nProcess.wait ...</pre>\n"],["split","File","File.html#method-c-split","(p1)","<p>Splits the given string into a directory and a file component and returns\nthem in a two-element array. …\n"],["split","String","String.html#method-i-split","(p1 = v1, p2 = v2)","<p>Divides <em>str</em> into substrings based on a delimiter, returning an\narray of these substrings.\n<p>If <em>pattern</em> is …\n"],["sprintf","Kernel","Kernel.html#method-i-sprintf","(*args)","<p>Returns the string resulting from applying <em>format_string</em> to any\nadditional arguments.  Within the format …\n"],["sqrt","Integer","Integer.html#method-c-sqrt","(p1)","<p>Returns the integer square root of the non-negative integer <code>n</code>,\ni.e. the largest non-negative integer …\n"],["sqrt","Math","Math.html#method-c-sqrt","(p1)","<p>Returns the non-negative square root of <code>x</code>.\n<p>Domain: [0, INFINITY)\n<p>Codomain:[0, INFINITY)\n"],["squeeze","String","String.html#method-i-squeeze","(*args)","<p>Builds a set of characters from the <em>other_str</em> parameter(s) using\nthe procedure described for String#count …\n"],["squeeze!","String","String.html#method-i-squeeze-21","(*args)","<p>Squeezes <em>str</em> in place, returning either <em>str</em>, or\n<code>nil</code> if no changes were made.\n"],["srand","Kernel","Kernel.html#method-i-srand","(*args)","<p>Seeds the system pseudo-random number generator, Random::DEFAULT, with\n<code>number</code>.  The previous seed value …\n"],["srand","Random","Random.html#method-c-srand","(*args)","<p>Seeds the system pseudo-random number generator, Random::DEFAULT, with\n<code>number</code>.  The previous seed value …\n"],["start","GC","GC.html#method-c-start","(full_mark: true, immediate_mark: true, immediate_sweep: true)","<p>Initiates garbage collection, even if manually disabled.\n<p>This method is defined with keyword arguments …\n"],["start","Thread","Thread.html#method-c-start","(*args)","<p>Basically the same as ::new. However, if class Thread is subclassed, then\ncalling <code>start</code> in that subclass …\n"],["start_with?","String","String.html#method-i-start_with-3F","(*args)","<p>Returns true if <code>str</code> starts with one of the\n<code>prefixes</code> given. Each of the <code>prefixes</code> should be a\nString or …\n"],["start_with?","Symbol","Symbol.html#method-i-start_with-3F","(*args)","<p>Returns true if <code>sym</code> starts with one of the\n<code>prefixes</code> given. Each of the <code>prefixes</code> should be a\nString or …\n"],["stat","File","File.html#method-c-stat","(p1)","<p>Returns a File::Stat object for the named file (see File::Stat).\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">mtime</span>   <span class=\"ruby-comment\">#=&gt; Tue ...</span>\n</pre>\n"],["stat","GC","GC.html#method-c-stat","(hash_or_key = nil)","<p>Returns a Hash containing information about the GC.\n<p>The hash includes information about internal statistics …\n"],["stat","IO","IO.html#method-i-stat","()","<p>Returns status information for <em>ios</em> as an object of type\nFile::Stat.\n\n<pre>f = File.new(&quot;testfile&quot;)\ns = f.stat ...</pre>\n"],["stat","RubyVM","RubyVM.html#method-c-stat","(*args)","<p>Returns a Hash containing implementation-dependent counters inside the VM.\n<p>This hash includes information …\n"],["stat","TracePoint","TracePoint.html#method-c-stat","()","<p>Returns internal information of TracePoint.\n<p>The contents of the returned value are implementation specific. …\n"],["state","Ripper","Ripper.html#method-i-state","()","<p>Return scanner state of current token.\n"],["status","SystemExit","SystemExit.html#method-i-status","()","<p>Return the status value associated with this system exit.\n"],["status","Thread","Thread.html#method-i-status","()","<p>Returns the status of <code>thr</code>.\n<p>“sleep” &mdash; Returned if this thread is sleeping or waiting on I/O\n<p>“run” … &mdash; "],["step","Enumerator::ArithmeticSequence","Enumerator/ArithmeticSequence.html#method-i-step","()",""],["step","Numeric","Numeric.html#method-i-step","(*args)","<p>Invokes the given block with the sequence of numbers starting at\n<code>num</code>, incremented by <code>step</code> (defaulted …\n"],["step","Range","Range.html#method-i-step","(*args)","\n<pre>%</pre>\n<p>Iterates over the range, passing each <code>n</code>th element to the\nblock. If begin and end are numeric, <code>n</code> is added …\n"],["sticky?","File","File.html#method-c-sticky-3F","(p1)","<p>Returns <code>true</code> if the named file has the sticky bit set.\n<p><em>file_name</em> can be an IO object.\n"],["sticky?","File::Stat","File/Stat.html#method-i-sticky-3F","()","<p>Returns <code>true</code> if <em>stat</em> has its sticky bit set,\n<code>false</code> if it doesn&#39;t or if the operating system doesn&#39;t\n…\n"],["sticky?","FileTest","FileTest.html#method-i-sticky-3F","(p1)","<p>Returns <code>true</code> if the named file has the sticky bit set.\n<p><em>file_name</em> can be an IO object.\n"],["stop","Thread","Thread.html#method-c-stop","()","<p>Stops execution of the current thread, putting it into a “sleep&#39;&#39;\nstate, and schedules execution …\n"],["stop?","Thread","Thread.html#method-i-stop-3F","()","<p>Returns <code>true</code> if <code>thr</code> is dead or sleeping.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = <span class=\"ruby-constant\">Thread</span>.<span class=\"ruby-identifier\">new</span> { <span class=\"ruby-constant\">Thread</span>.<span class=\"ruby-identifier\">stop</span> }\n<span class=\"ruby-identifier\">b</span> = <span class=\"ruby-constant\">Thread</span>.<span class=\"ruby-identifier\">current</span>\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">stop?</span>   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["stopped?","Process::Status","Process/Status.html#method-i-stopped-3F","()","<p>Returns <code>true</code> if this process is stopped. This is only returned\nif the corresponding #wait call had the …\n"],["stopsig","Process::Status","Process/Status.html#method-i-stopsig","()","<p>Returns the number of the signal that caused <em>stat</em> to stop (or\n<code>nil</code> if self is not stopped).\n"],["store","ENV","ENV.html#method-c-store","(p1, p2)","<p>ENV.store is an alias for ENV.[]=.\n<p>Creates, updates, or deletes the named environment variable, returning …\n"],["store","Hash","Hash.html#method-i-store","(p1, p2)","<p>Element Assignment\n<p>Associates the value given by <code>value</code> with the key given by\n<code>key</code>.\n\n<pre>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; ...</pre>\n"],["stress","GC","GC.html#method-c-stress","()","<p>Returns current status of GC stress mode.\n"],["stress=","GC","GC.html#method-c-stress-3D","(flag)","<p>Updates the GC stress mode.\n<p>When stress mode is enabled, the GC is invoked at every GC opportunity: all\n…\n"],["strftime","Time","Time.html#method-i-strftime","(p1)","<p>Formats <em>time</em> according to the directives in the given format\nstring.\n<p>The directives begin with a percent …\n"],["string","MatchData","MatchData.html#method-i-string","()","<p>Returns a frozen copy of the string passed in to <code>match</code>.\n\n<pre>m = /(.)(.)(\\d+)(\\d)/.match(&quot;THX1138.&quot;)\nm.string ...</pre>\n"],["strip","String","String.html#method-i-strip","()","<p>Returns a copy of the receiver with leading and trailing whitespace\nremoved.\n<p>Whitespace is defined as …\n"],["strip!","String","String.html#method-i-strip-21","()","<p>Removes leading and trailing whitespace from the receiver. Returns the\naltered receiver, or <code>nil</code> if there …\n"],["sub","Kernel","Kernel.html#method-i-sub","(*args)","<p>Equivalent to <code>$_.sub(<em>args</em>)</code>, except that\n<code>$_</code> will be updated if substitution occurs. Available only when\n…\n"],["sub","String","String.html#method-i-sub","(*args)","<p>Returns a copy of <code>str</code> with the <em>first</em> occurrence of\n<code>pattern</code> replaced by the second argument. The\n<code>pattern</code> …\n"],["sub!","String","String.html#method-i-sub-21","(*args)","<p>Performs the same substitution as String#sub in-place.\n<p>Returns <code>str</code> if a substitution was performed or …\n"],["subsec","Time","Time.html#method-i-subsec","()","<p>Returns the fraction for <em>time</em>.\n<p>The return value can be a rational number.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">now</span>        <span class=\"ruby-comment\">#=&gt; 2009-03-26 ...</span>\n</pre>\n"],["succ","Integer","Integer.html#method-i-succ","()","<p>Returns the successor of <code>int</code>, i.e. the Integer equal to\n<code>int+1</code>.\n\n<pre>1.next      #=&gt; 2\n(-1).next   #=&gt; 0\n1.succ ...</pre>\n"],["succ","String","String.html#method-i-succ","()","<p>Returns the successor to <em>str</em>. The successor is calculated by\nincrementing characters starting from the …\n"],["succ","Symbol","Symbol.html#method-i-succ","()","<p>Same as <code>sym.to_s.succ.intern</code>.\n"],["succ","Time","Time.html#method-i-succ","()","<p>Returns a new Time object, one second later than <em>time</em>. Time#succ\nis obsolete since 1.9.2 for time is …\n"],["succ!","String","String.html#method-i-succ-21","()","<p>Equivalent to String#succ, but modifies the receiver in place.\n"],["success?","Process::Status","Process/Status.html#method-i-success-3F","()","<p>Returns <code>true</code> if <em>stat</em> is successful,\n<code>false</code> if not. Returns <code>nil</code> if #exited? is not\n<code>true</code>.\n"],["success?","SystemExit","SystemExit.html#method-i-success-3F","()","<p>Returns <code>true</code> if exiting successful, <code>false</code> if not.\n"],["sum","Array","Array.html#method-i-sum","(*args)","<p>Returns the sum of elements. For example, [e1, e2, e3].sum returns init +\ne1 + e2 + e3.\n<p>If a block is …\n"],["sum","Enumerable","Enumerable.html#method-i-sum","(*args)","<p>Returns the sum of elements in an Enumerable.\n<p>If a block is given, the block is applied to each element …\n"],["sum","String","String.html#method-i-sum","(*args)","<p>Returns a basic <em>n</em>-bit checksum of the characters in <em>str</em>,\nwhere <em>n</em> is the optional Integer parameter, defaulting …\n"],["sunday?","Time","Time.html#method-i-sunday-3F","()","<p>Returns <code>true</code> if <em>time</em> represents Sunday.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">local</span>(<span class=\"ruby-value\">1990</span>, <span class=\"ruby-value\">4</span>, <span class=\"ruby-value\">1</span>)       <span class=\"ruby-comment\">#=&gt; 1990-04-01 00:00:00 -0600 ...</span>\n</pre>\n"],["super_method","Method","Method.html#method-i-super_method","()","<p>Returns a Method of superclass which would be called when super is used or\nnil if there is no method …\n"],["super_method","UnboundMethod","UnboundMethod.html#method-i-super_method","()","<p>Returns a Method of superclass which would be called when super is used or\nnil if there is no method …\n"],["superclass","Class","Class.html#method-i-superclass","()","<p>Returns the superclass of <em>class</em>, or <code>nil</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">superclass</span>          <span class=\"ruby-comment\">#=&gt; IO</span>\n<span class=\"ruby-constant\">IO</span>.<span class=\"ruby-identifier\">superclass</span>            <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["swapcase","String","String.html#method-i-swapcase","(*args)","<p>Returns a copy of <em>str</em> with uppercase alphabetic characters\nconverted to lowercase and lowercase characters …\n"],["swapcase","Symbol","Symbol.html#method-i-swapcase","(*args)","<p>Same as <code>sym.to_s.swapcase.intern</code>.\n"],["swapcase!","String","String.html#method-i-swapcase-21","(*args)","<p>Equivalent to String#swapcase, but modifies the receiver in place,\nreturning <em>str</em>, or <code>nil</code> if no changes …\n"],["switch","Process::GID","Process/GID.html#method-c-switch","()","<p>Switch the effective and real group IDs of the current process. If a\n<em>block</em> is given, the group IDs will …\n"],["switch","Process::UID","Process/UID.html#method-c-switch","()","<p>Switch the effective and real user IDs of the current process. If a\n<em>block</em> is given, the user IDs will …\n"],["symlink","File","File.html#method-c-symlink","(p1, p2)","<p>Creates a symbolic link called <em>new_name</em> for the existing file\n<em>old_name</em>. Raises a NotImplemented exception …\n"],["symlink?","File","File.html#method-c-symlink-3F","(p1)","<p>Returns <code>true</code> if the named file is a symbolic link.\n"],["symlink?","File::Stat","File/Stat.html#method-i-symlink-3F","()","<p>Returns <code>true</code> if <em>stat</em> is a symbolic link,\n<code>false</code> if it isn&#39;t or if the operating system doesn&#39;t …\n"],["symlink?","FileTest","FileTest.html#method-i-symlink-3F","(p1)","<p>Returns <code>true</code> if the named file is a symbolic link.\n"],["sync","IO","IO.html#method-i-sync","()","<p>Returns the current “sync mode&#39;&#39; of <em>ios</em>. When sync mode is\ntrue, all output is immediately flushed …\n"],["sync=","IO","IO.html#method-i-sync-3D","(p1)","<p>Sets the “sync mode&#39;&#39; to <code>true</code> or <code>false</code>.\nWhen sync mode is true, all output is immediately flushed …\n"],["synchronize","Mutex","Mutex.html#method-i-synchronize","()","<p>Obtains a lock, runs the block, and releases the lock when the block\ncompletes.  See the example under …\n"],["syscall","Kernel","Kernel.html#method-i-syscall","(*args)","<p>Calls the operating system function identified by <em>num</em> and returns\nthe result of the function or raises …\n"],["sysopen","IO","IO.html#method-c-sysopen","(p1, p2 = v2, p3 = v3)","<p>Opens the given path, returning the underlying file descriptor as a\nInteger.\n\n<pre>IO.sysopen(&quot;testfile&quot;)   ...</pre>\n"],["sysread","IO","IO.html#method-i-sysread","(p1, p2 = v2)","<p>Reads <em>maxlen</em> bytes from <em>ios</em> using a low-level read and\nreturns them as a string.  Do not mix with other …\n"],["sysseek","IO","IO.html#method-i-sysseek","(p1, p2 = v2)","<p>Seeks to a given <em>offset</em> in the stream according to the value of\n<em>whence</em> (see IO#seek for values of <em>whence</em> …\n"],["system","Kernel","Kernel.html#method-i-system","(*args)","<p>Executes <em>command…</em> in a subshell. <em>command…</em> is one of\nfollowing forms.\n<p>commandline &mdash; command line string …\n"],["syswrite","IO","IO.html#method-i-syswrite","(p1)","<p>Writes the given string to <em>ios</em> using a low-level write. Returns\nthe number of bytes written. Do not mix …\n"],["tag","UncaughtThrowError","UncaughtThrowError.html#method-i-tag","()","<p>Return the tag object which was called for.\n"],["taint","Object","Object.html#method-i-taint","()","<p>Returns object. This method is deprecated and will be removed in Ruby 3.2.\n"],["tainted?","Object","Object.html#method-i-tainted-3F","()","<p>Returns false.  This method is deprecated and will be removed in Ruby 3.2.\n"],["take","Array","Array.html#method-i-take","(p1)","<p>Returns first <code>n</code> elements from the array.\n<p>If a negative number is given, raises an ArgumentError.\n<p>See also …\n"],["take","Enumerable","Enumerable.html#method-i-take","(p1)","<p>Returns first n elements from <em>enum</em>.\n\n<pre>a = [1, 2, 3, 4, 5, 0]\na.take(3)             #=&gt; [1, 2, 3]\na.take(30) ...</pre>\n"],["take","Enumerator::Lazy","Enumerator/Lazy.html#method-i-take","(p1)","<p>Like Enumerable#take, but chains operation to be lazy-evaluated.\n"],["take_while","Array","Array.html#method-i-take_while","()","<p>Passes elements to the block until the block returns <code>nil</code> or\n<code>false</code>, then stops iterating and returns an …\n"],["take_while","Enumerable","Enumerable.html#method-i-take_while","()","<p>Passes elements to the block until the block returns <code>nil</code> or\n<code>false</code>, then stops iterating and returns an …\n"],["take_while","Enumerator::Lazy","Enumerator/Lazy.html#method-i-take_while","()","<p>Like Enumerable#take_while, but chains operation to be lazy-evaluated.\n"],["tally","Enumerable","Enumerable.html#method-i-tally","()","<p>Tallies the collection, i.e., counts the occurrences of each element.\nReturns a hash with the elements …\n"],["tan","Math","Math.html#method-c-tan","(p1)","<p>Computes the tangent of <code>x</code> (expressed in radians).\n<p>Domain: (-INFINITY, INFINITY)\n<p>Codomain: (-INFINITY,  …\n"],["tanh","Math","Math.html#method-c-tanh","(p1)","<p>Computes the hyperbolic tangent of <code>x</code> (expressed in radians).\n<p>Domain: (-INFINITY, INFINITY)\n<p>Codomain: (-1, …\n"],["tap","Object","Object.html#method-i-tap","()","<p>Yields self to the block, and then returns self. The primary purpose of\nthis method is to “tap into” …\n"],["tell","ARGF","ARGF.html#method-i-tell","()","<p>Returns the current offset (in bytes) of the current file in\n<code>ARGF</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ARGF</span>.<span class=\"ruby-identifier\">pos</span>    <span class=\"ruby-comment\">#=&gt; 0</span>\n<span class=\"ruby-constant\">ARGF</span>.<span class=\"ruby-identifier\">gets</span>   <span class=\"ruby-comment\">#=&gt; &quot;This ...</span>\n</pre>\n"],["tell","Dir","Dir.html#method-i-tell","()","<p>Returns the current position in <em>dir</em>. See also Dir#seek.\n\n<pre>d = Dir.new(&quot;testdir&quot;)\nd.tell   #=&gt; 0\nd.read  ...</pre>\n"],["tell","IO","IO.html#method-i-tell","()","<p>Returns the current offset (in bytes) of <em>ios</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">f</span> = <span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>)\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">pos</span>    <span class=\"ruby-comment\">#=&gt; 0</span>\n<span class=\"ruby-identifier\">f</span>.<span class=\"ruby-identifier\">gets</span>   <span class=\"ruby-comment\">#=&gt; &quot;This ...</span>\n</pre>\n"],["terminate","Thread","Thread.html#method-i-terminate","()","<p>Terminates <code>thr</code> and schedules another thread to be run,\nreturning the terminated Thread.  If this is the …\n"],["termsig","Process::Status","Process/Status.html#method-i-termsig","()","<p>Returns the number of the signal that caused <em>stat</em> to terminate (or\n<code>nil</code> if self was not terminated by …\n"],["test","Kernel","Kernel.html#method-i-test","(*args)","<p>Uses the character <code>cmd</code> to perform various tests on\n<code>file1</code> (first table below) or on <code>file1</code> and\n<code>file2</code> (second …\n"],["then","Object","Object.html#method-i-then","()","<p>Yields self to the block and returns the result of the block.\n\n<pre>3.next.then {|x| x**x }.to_s            ...</pre>\n"],["thread_variable?","Thread","Thread.html#method-i-thread_variable-3F","(p1)","<p>Returns <code>true</code> if the given string (or symbol) exists as a\nthread-local variable.\n\n<pre>me = Thread.current\nme.thread_variable_set(:oliver, ...</pre>\n"],["thread_variable_get","Thread","Thread.html#method-i-thread_variable_get","(p1)","<p>Returns the value of a thread local variable that has been set.  Note that\nthese are different than fiber …\n"],["thread_variable_set","Thread","Thread.html#method-i-thread_variable_set","(p1, p2)","<p>Sets a thread local with <code>key</code> to <code>value</code>.  Note that\nthese are local to threads, and not to fibers.  Please …\n"],["thread_variables","Thread","Thread.html#method-i-thread_variables","()","<p>Returns an array of the names of the thread-local variables (as Symbols).\n\n<pre>thr = Thread.new do\n  Thread.current.thread_variable_set(:cat, ...</pre>\n"],["throw","Kernel","Kernel.html#method-i-throw","(p1, p2 = v2)","<p>Transfers control to the end of the active <code>catch</code> block waiting\nfor <em>tag</em>. Raises <code>UncaughtThrowError</code> if …\n"],["thursday?","Time","Time.html#method-i-thursday-3F","()","<p>Returns <code>true</code> if <em>time</em> represents Thursday.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">local</span>(<span class=\"ruby-value\">1995</span>, <span class=\"ruby-value\">12</span>, <span class=\"ruby-value\">21</span>)     <span class=\"ruby-comment\">#=&gt; 1995-12-21 00:00:00 -0600 ...</span>\n</pre>\n"],["times","Integer","Integer.html#method-i-times","()","<p>Iterates the given block <code>int</code> times, passing in values from\nzero to <code>int - 1</code>.\n<p>If no block is given, an  …\n"],["times","Process","Process.html#method-c-times","()","<p>Returns a <code>Tms</code> structure (see Process::Tms) that contains user\nand system CPU times for this process, …\n"],["to_a","ARGF","ARGF.html#method-i-to_a","(*args)","<p>Reads <code>ARGF</code>&#39;s current file in its entirety, returning an\n<code>Array</code> of its lines, one line per element. …\n"],["to_a","Array","Array.html#method-i-to_a","()","<p>Returns <code>self</code>.\n<p>If called on a subclass of Array, converts the receiver to an Array object.\n"],["to_a","ENV","ENV.html#method-c-to_a","()","<p>Converts the environment variables into an array of names and value arrays.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ENV</span>.<span class=\"ruby-identifier\">to_a</span> <span class=\"ruby-comment\"># =&gt; [[&quot;TERM&quot;, &quot;xterm-color&quot;], ...</span>\n</pre>\n"],["to_a","Enumerable","Enumerable.html#method-i-to_a","(*args)","<p>Returns an array containing the items in <em>enum</em>.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">7</span>).<span class=\"ruby-identifier\">to_a</span>                       <span class=\"ruby-comment\">#=&gt; [1, 2, 3, 4, 5, 6, ...</span>\n</pre>\n"],["to_a","Enumerator::Lazy","Enumerator/Lazy.html#method-i-to_a","()","<p>Expands <code>lazy</code> enumerator to an array. See Enumerable#to_a.\n"],["to_a","Hash","Hash.html#method-i-to_a","()","<p>Converts <em>hsh</em> to a nested array of <code>[</code> <em>key,\nvalue</em> <code>]</code> arrays.\n\n<pre>h = { &quot;c&quot; =&gt; 300, &quot;a&quot; =&gt; 100, &quot;d&quot; =&gt; 400, &quot;c&quot; ...</pre>\n"],["to_a","MatchData","MatchData.html#method-i-to_a","()","<p>Returns the array of matches.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">m</span> = <span class=\"ruby-regexp\">/(.)(.)(\\d+)(\\d)/</span>.<span class=\"ruby-identifier\">match</span>(<span class=\"ruby-string\">&quot;THX1138.&quot;</span>)\n<span class=\"ruby-identifier\">m</span>.<span class=\"ruby-identifier\">to_a</span>   <span class=\"ruby-comment\">#=&gt; [&quot;HX1138&quot;, &quot;H&quot;, &quot;X&quot;, ...</span>\n</pre>\n"],["to_a","NilClass","NilClass.html#method-i-to_a","()","<p>Always returns an empty array.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">nil</span>.<span class=\"ruby-identifier\">to_a</span>   <span class=\"ruby-comment\">#=&gt; []</span>\n</pre>\n"],["to_a","Range","Range.html#method-i-to_a","()","<p>Returns an array containing the items in the range.\n\n<pre>(1..7).to_a  #=&gt; [1, 2, 3, 4, 5, 6, 7]\n(1..).to_a ...</pre>\n"],["to_a","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-to_a","()","<p>Returns an Array with 14 elements representing the instruction sequence\nwith the following data:\n<p>magic … &mdash; "],["to_a","String","String.html#method-i-to_a","()",""],["to_a","Struct","Struct.html#method-i-to_a","()","<p>Returns the values for this struct as an Array.\n\n<pre>Customer = Struct.new(:name, :address, :zip)\njoe = Customer.new(&quot;Joe ...</pre>\n"],["to_a","Time","Time.html#method-i-to_a","()","<p>Returns a ten-element <em>array</em> of values for <em>time</em>:\n\n<pre>[sec, min, hour, day, month, year, wday, yday, isdst, ...</pre>\n"],["to_ary","Array","Array.html#method-i-to_ary","()","<p>Returns <code>self</code>.\n"],["to_binary","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-to_binary","(*args)","<p>Returns serialized iseq binary format data as a String object. A\ncorresponding iseq object is created …\n"],["to_c","Complex","Complex.html#method-i-to_c","()","<p>Returns self.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">to_c</span>      <span class=\"ruby-comment\">#=&gt; (2+0i)</span>\n<span class=\"ruby-constant\">Complex</span>(<span class=\"ruby-value\">-8</span>, <span class=\"ruby-value\">6</span>).<span class=\"ruby-identifier\">to_c</span>  <span class=\"ruby-comment\">#=&gt; (-8+6i)</span>\n</pre>\n"],["to_c","NilClass","NilClass.html#method-i-to_c","()","<p>Returns zero as a complex.\n"],["to_c","Numeric","Numeric.html#method-i-to_c","()","<p>Returns the value as a complex.\n"],["to_c","String","String.html#method-i-to_c","()","<p>Returns a complex which denotes the string form.  The parser ignores\nleading whitespaces and trailing …\n"],["to_enum","Enumerator::Lazy","Enumerator/Lazy.html#method-i-to_enum","(*args)","<p>Similar to Object#to_enum, except it returns a lazy enumerator. This makes\nit easy to define Enumerable …\n"],["to_enum","Object","Object.html#method-i-to_enum","(*args)","<p>Creates a new Enumerator which will enumerate by calling\n<code>method</code> on <code>obj</code>, passing <code>args</code> if any.\nWhat was …\n"],["to_f","Complex","Complex.html#method-i-to_f","()","<p>Returns the value as a float if possible (the imaginary part should be\nexactly zero).\n\n<pre>Complex(1, 0).to_f ...</pre>\n"],["to_f","Float","Float.html#method-i-to_f","()","<p>Since <code>float</code> is already a Float, returns <code>self</code>.\n"],["to_f","Integer","Integer.html#method-i-to_f","()","<p>Converts <code>int</code> to a Float.  If <code>int</code> doesn&#39;t fit\nin a Float, the result is infinity.\n"],["to_f","NilClass","NilClass.html#method-i-to_f","()","<p>Always returns zero.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">nil</span>.<span class=\"ruby-identifier\">to_f</span>   <span class=\"ruby-comment\">#=&gt; 0.0</span>\n</pre>\n"],["to_f","Rational","Rational.html#method-i-to_f","()","<p>Returns the value as a Float.\n\n<pre>Rational(2).to_f      #=&gt; 2.0\nRational(9, 4).to_f   #=&gt; 2.25\nRational(-3, ...</pre>\n"],["to_f","String","String.html#method-i-to_f","()","<p>Returns the result of interpreting leading characters in <em>str</em> as a\nfloating point number. Extraneous characters …\n"],["to_f","Time","Time.html#method-i-to_f","()","<p>Returns the value of <em>time</em> as a floating point number of seconds\nsince the Epoch.\n\n<pre>t = Time.now\n&quot;%10.5f&quot; ...</pre>\n"],["to_h","Array","Array.html#method-i-to_h","()","<p>Returns the result of interpreting <em>ary</em> as an array of <code>[key,\nvalue]</code> pairs.\n\n<pre>[[:foo, :bar], [1, 2]].to_h ...</pre>\n"],["to_h","ENV","ENV.html#method-c-to_h","()","<p>Creates a hash with a copy of the environment variables.\n"],["to_h","Enumerable","Enumerable.html#method-i-to_h","(*args)","<p>Returns the result of interpreting <em>enum</em> as a list of <code>[key,\nvalue]</code> pairs.\n\n<pre>%i[hello world].each_with_index.to_h ...</pre>\n"],["to_h","Hash","Hash.html#method-i-to_h","()","<p>Returns <code>self</code>. If called on a subclass of Hash, converts the\nreceiver to a Hash object.\n<p>If a block is given, …\n"],["to_h","NilClass","NilClass.html#method-i-to_h","()","<p>Always returns an empty hash.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">nil</span>.<span class=\"ruby-identifier\">to_h</span>   <span class=\"ruby-comment\">#=&gt; {}</span>\n</pre>\n"],["to_h","Struct","Struct.html#method-i-to_h","()","<p>Returns a Hash containing the names and values for the struct&#39;s\nmembers.\n<p>If a block is given, the …\n"],["to_hash","ENV","ENV.html#method-c-to_hash","()","<p>Creates a hash with a copy of the environment variables.\n"],["to_hash","Hash","Hash.html#method-i-to_hash","()","<p>Returns <code>self</code>.\n"],["to_i","ARGF","ARGF.html#method-i-to_i","()","<p>Returns an integer representing the numeric file descriptor for the current\nfile. Raises an <code>ArgumentError</code> …\n"],["to_i","Complex","Complex.html#method-i-to_i","()","<p>Returns the value as an integer if possible (the imaginary part should be\nexactly zero).\n\n<pre>Complex(1, 0).to_i ...</pre>\n"],["to_i","Float","Float.html#method-i-to_i","()","<p>Returns the <code>float</code> truncated to an Integer.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1.2</span>.<span class=\"ruby-identifier\">to_i</span>      <span class=\"ruby-comment\">#=&gt; 1</span>\n(<span class=\"ruby-value\">-1.2</span>).<span class=\"ruby-identifier\">to_i</span>   <span class=\"ruby-comment\">#=&gt; -1</span>\n</pre>\n<p>Note that the limited …\n"],["to_i","IO","IO.html#method-i-to_i","()",""],["to_i","Integer","Integer.html#method-i-to_i","()","<p>Since <code>int</code> is already an Integer, returns <code>self</code>.\n<p>#to_int is an alias for #to_i.\n"],["to_i","NilClass","NilClass.html#method-i-to_i","()","<p>Always returns zero.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">nil</span>.<span class=\"ruby-identifier\">to_i</span>   <span class=\"ruby-comment\">#=&gt; 0</span>\n</pre>\n"],["to_i","Process::Status","Process/Status.html#method-i-to_i","()","<p>Returns the bits in <em>stat</em> as a Integer. Poking around in these bits\nis platform dependent.\n\n<pre>fork { exit ...</pre>\n"],["to_i","Rational","Rational.html#method-i-to_i","()","<p>Returns the truncated value as an integer.\n<p>Equivalent to Rational#truncate.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">to_i</span>    <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["to_i","String","String.html#method-i-to_i","(*args)","<p>Returns the result of interpreting leading characters in <em>str</em> as an\ninteger base <em>base</em> (between 2 and 36). …\n"],["to_i","Time","Time.html#method-i-to_i","()","<p>Returns the value of <em>time</em> as an integer number of seconds since\nthe Epoch.\n\n<pre>t = Time.now\n&quot;%10.5f&quot; % t.to_f ...</pre>\n"],["to_int","Float","Float.html#method-i-to_int","()","<p>Returns the <code>float</code> truncated to an Integer.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1.2</span>.<span class=\"ruby-identifier\">to_i</span>      <span class=\"ruby-comment\">#=&gt; 1</span>\n(<span class=\"ruby-value\">-1.2</span>).<span class=\"ruby-identifier\">to_i</span>   <span class=\"ruby-comment\">#=&gt; -1</span>\n</pre>\n<p>Note that the limited …\n"],["to_int","Integer","Integer.html#method-i-to_int","()","<p>Since <code>int</code> is already an Integer, returns <code>self</code>.\n<p>#to_int is an alias for #to_i.\n"],["to_int","Numeric","Numeric.html#method-i-to_int","()","<p>Invokes the child class&#39;s <code>to_i</code> method to convert\n<code>num</code> to an integer.\n\n<pre>1.0.class          #=&gt; Float\n1.0.to_int.class ...</pre>\n"],["to_io","ARGF","ARGF.html#method-i-to_io","()","<p>Returns an <code>IO</code> object representing the current file. This will\nbe a <code>File</code> object unless the current file …\n"],["to_io","IO","IO.html#method-i-to_io","()","<p>Returns <em>ios</em>.\n"],["to_path","Dir","Dir.html#method-i-to_path","()","<p>Returns the path parameter passed to <em>dir</em>&#39;s constructor.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">d</span> = <span class=\"ruby-constant\">Dir</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&quot;..&quot;</span>)\n<span class=\"ruby-identifier\">d</span>.<span class=\"ruby-identifier\">path</span>   <span class=\"ruby-comment\">#=&gt; &quot;..&quot;</span>\n</pre>\n"],["to_path","File","File.html#method-i-to_path","()","<p>Returns the pathname used to create <em>file</em> as a string. Does not\nnormalize the name.\n<p>The pathname may not …\n"],["to_proc","Enumerator::Yielder","Enumerator/Yielder.html#method-i-to_proc","()","<p>Returns a Proc object that takes an argument and yields it.\n<p>This method is implemented so that a Yielder …\n"],["to_proc","Hash","Hash.html#method-i-to_proc","()","<p>Returns a Proc which maps keys to values.\n\n<pre>h = {a:1, b:2}\nhp = h.to_proc\nhp.call(:a)          #=&gt; 1\nhp.call(:b) ...</pre>\n"],["to_proc","Method","Method.html#method-i-to_proc","()","<p>Returns a Proc object corresponding to this method.\n"],["to_proc","Proc","Proc.html#method-i-to_proc","()","<p>Part of the protocol for converting objects to Proc objects. Instances of\nclass Proc simply return themselves. …\n"],["to_proc","Symbol","Symbol.html#method-i-to_proc","()","<p>Returns a <em>Proc</em> object which responds to the given method by\n<em>sym</em>.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">3</span>).<span class=\"ruby-identifier\">collect</span>(<span class=\"ruby-operator\">&amp;</span>:<span class=\"ruby-identifier\">to_s</span>)  <span class=\"ruby-comment\">#=&gt; [&quot;1&quot;, &quot;2&quot;, ...</span>\n</pre>\n"],["to_r","Complex","Complex.html#method-i-to_r","()","<p>Returns the value as a rational if possible (the imaginary part should be\nexactly zero).\n\n<pre>Complex(1, 0).to_r ...</pre>\n"],["to_r","Float","Float.html#method-i-to_r","()","<p>Returns the value as a rational.\n\n<pre>2.0.to_r    #=&gt; (2/1)\n2.5.to_r    #=&gt; (5/2)\n-0.75.to_r  #=&gt; (-3/4)\n0.0.to_r ...</pre>\n"],["to_r","Integer","Integer.html#method-i-to_r","()","<p>Returns the value as a rational.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1</span>.<span class=\"ruby-identifier\">to_r</span>        <span class=\"ruby-comment\">#=&gt; (1/1)</span>\n(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">&lt;&lt;</span><span class=\"ruby-value\">64</span>).<span class=\"ruby-identifier\">to_r</span>  <span class=\"ruby-comment\">#=&gt; (18446744073709551616/1)</span>\n</pre>\n"],["to_r","NilClass","NilClass.html#method-i-to_r","()","<p>Returns zero as a rational.\n"],["to_r","Rational","Rational.html#method-i-to_r","()","<p>Returns self.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">2</span>).<span class=\"ruby-identifier\">to_r</span>      <span class=\"ruby-comment\">#=&gt; (2/1)</span>\n<span class=\"ruby-constant\">Rational</span>(<span class=\"ruby-value\">-8</span>, <span class=\"ruby-value\">6</span>).<span class=\"ruby-identifier\">to_r</span>  <span class=\"ruby-comment\">#=&gt; (-4/3)</span>\n</pre>\n"],["to_r","String","String.html#method-i-to_r","()","<p>Returns the result of interpreting leading characters in <code>str</code>\nas a rational.  Leading whitespace and extraneous …\n"],["to_r","Time","Time.html#method-i-to_r","()","<p>Returns the value of <em>time</em> as a rational number of seconds since\nthe Epoch.\n\n<pre>t = Time.now\nt.to_r        ...</pre>\n"],["to_s","ARGF","ARGF.html#method-i-to_s","()","<p>Returns “ARGF”.\n"],["to_s","Array","Array.html#method-i-to_s","()",""],["to_s","Complex","Complex.html#method-i-to_s","()","<p>Returns the value as a string.\n\n<pre>Complex(2).to_s                       #=&gt; &quot;2+0i&quot;\nComplex(&#39;-8/6&#39;).to_s  ...</pre>\n"],["to_s","ENV","ENV.html#method-c-to_s","()","<p>Returns “ENV”\n"],["to_s","Encoding","Encoding.html#method-i-to_s","()","<p>Returns the name of the encoding.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Encoding</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">UTF_8</span>.<span class=\"ruby-identifier\">name</span>      <span class=\"ruby-comment\">#=&gt; &quot;UTF-8&quot;</span>\n</pre>\n"],["to_s","Exception","Exception.html#method-i-to_s","()","<p>Returns exception&#39;s message (or the name of the exception if no message\nis set).\n"],["to_s","FalseClass","FalseClass.html#method-i-to_s","()","<p>The string representation of <code>false</code> is “false”.\n"],["to_s","Fiber","Fiber.html#method-i-to_s","()","<p>Returns fiber information string.\n"],["to_s","Float","Float.html#method-i-to_s","()","<p>Returns a string containing a representation of <code>self</code>. As well\nas a fixed or exponential form of the  …\n"],["to_s","Hash","Hash.html#method-i-to_s","()",""],["to_s","Integer","Integer.html#method-i-to_s","(*args)","<p>Returns a string containing the place-value representation of\n<code>int</code> with radix <code>base</code> (between 2 and 36). …\n"],["to_s","MatchData","MatchData.html#method-i-to_s","()","<p>Returns the entire matched string.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">m</span> = <span class=\"ruby-regexp\">/(.)(.)(\\d+)(\\d)/</span>.<span class=\"ruby-identifier\">match</span>(<span class=\"ruby-string\">&quot;THX1138.&quot;</span>)\n<span class=\"ruby-identifier\">m</span>.<span class=\"ruby-identifier\">to_s</span>   <span class=\"ruby-comment\">#=&gt; &quot;HX1138&quot;</span>\n</pre>\n"],["to_s","Method","Method.html#method-i-to_s","()","<p>Returns a human-readable description of the underlying method.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;cat&quot;</span>.<span class=\"ruby-identifier\">method</span>(:<span class=\"ruby-identifier\">count</span>).<span class=\"ruby-identifier\">inspect</span>   <span class=\"ruby-comment\">#=&gt; &quot;#&lt;Method: ...</span>\n</pre>\n"],["to_s","Module","Module.html#method-i-to_s","()","<p>Returns a string representing this module or class. For basic classes and\nmodules, this is the name. …\n"],["to_s","NilClass","NilClass.html#method-i-to_s","()","<p>Always returns the empty string.\n"],["to_s","Object","Object.html#method-i-to_s","()","<p>Returns a string representing <em>obj</em>. The default #to_s prints the\nobject&#39;s class and an encoding of …\n"],["to_s","Proc","Proc.html#method-i-to_s","()","<p>Returns the unique identifier for this proc, along with an indication of\nwhere the proc was defined. …\n"],["to_s","Process::Status","Process/Status.html#method-i-to_s","()","<p>Show pid and exit status as a string.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">system</span>(<span class=\"ruby-string\">&quot;false&quot;</span>)\n<span class=\"ruby-identifier\">p</span> <span class=\"ruby-identifier\">$?</span>.<span class=\"ruby-identifier\">to_s</span>         <span class=\"ruby-comment\">#=&gt; &quot;pid 12766 exit 1&quot;</span>\n</pre>\n"],["to_s","Range","Range.html#method-i-to_s","()","<p>Convert this range object to a printable form (using #to_s to convert the\nbegin and end objects).\n"],["to_s","Rational","Rational.html#method-i-to_s","()","<p>Returns the value as a string.\n\n<pre>Rational(2).to_s      #=&gt; &quot;2/1&quot;\nRational(-8, 6).to_s  #=&gt; &quot;-4/3&quot;\nRational(&#39;1/2&#39;).to_s ...</pre>\n"],["to_s","Regexp","Regexp.html#method-i-to_s","()","<p>Returns a string containing the regular expression and its options (using\nthe <code>(?opts:source)</code> notation. …\n"],["to_s","String","String.html#method-i-to_s","()","<p>Returns <code>self</code>.\n<p>If called on a subclass of String, converts the receiver to a String\nobject.\n"],["to_s","Struct","Struct.html#method-i-to_s","()",""],["to_s","Symbol","Symbol.html#method-i-to_s","()","<p>Returns the name or string corresponding to <em>sym</em>.\n\n<pre class=\"ruby\">:<span class=\"ruby-identifier\">fred</span>.<span class=\"ruby-identifier\">id2name</span>   <span class=\"ruby-comment\">#=&gt; &quot;fred&quot;</span>\n:<span class=\"ruby-identifier\">ginger</span>.<span class=\"ruby-identifier\">to_s</span>    <span class=\"ruby-comment\">#=&gt; &quot;ginger&quot;</span>\n</pre>\n"],["to_s","Thread","Thread.html#method-i-to_s","()","<p>Dump the name, id, and status of <em>thr</em> to a string.\n"],["to_s","Thread::Backtrace::Location","Thread/Backtrace/Location.html#method-i-to_s","()","<p>Returns a Kernel#caller style string representing this frame.\n"],["to_s","Time","Time.html#method-i-to_s","()","<p>Returns a string representing <em>time</em>. Equivalent to calling\n#strftime with the appropriate format string. …\n"],["to_s","TrueClass","TrueClass.html#method-i-to_s","()","<p>The string representation of <code>true</code> is “true”.\n"],["to_s","UnboundMethod","UnboundMethod.html#method-i-to_s","()","<p>Returns a human-readable description of the underlying method.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;cat&quot;</span>.<span class=\"ruby-identifier\">method</span>(:<span class=\"ruby-identifier\">count</span>).<span class=\"ruby-identifier\">inspect</span>   <span class=\"ruby-comment\">#=&gt; &quot;#&lt;Method: ...</span>\n</pre>\n"],["to_s","UncaughtThrowError","UncaughtThrowError.html#method-i-to_s","()","<p>Returns formatted message with the inspected tag.\n"],["to_str","String","String.html#method-i-to_str","()","<p>Returns <code>self</code>.\n<p>If called on a subclass of String, converts the receiver to a String\nobject.\n"],["to_sym","String","String.html#method-i-to_sym","()","<p>Returns the Symbol corresponding to <em>str</em>, creating the symbol if it\ndid not previously exist. See Symbol#id2name …\n"],["to_sym","Symbol","Symbol.html#method-i-to_sym","()","<p>In general, <code>to_sym</code> returns the Symbol corresponding to an\nobject. As <em>sym</em> is already a symbol, <code>self</code> is …\n"],["to_tty?","Exception","Exception.html#method-c-to_tty-3F","()","<p>Returns <code>true</code> if exception messages will be sent to a tty.\n"],["to_write_io","ARGF","ARGF.html#method-i-to_write_io","()","<p>Returns IO instance tied to <em>ARGF</em> for writing if inplace mode is\nenabled.\n"],["token","Ripper","Ripper.html#method-i-token","()","<p>Return the current token string.\n"],["total_time","GC::Profiler","GC/Profiler.html#method-c-total_time","()","<p>The total time used for garbage collection in seconds\n"],["tr","String","String.html#method-i-tr","(p1, p2)","<p>Returns a copy of <code>str</code> with the characters in\n<code>from_str</code> replaced by the corresponding characters in\n<code>to_str</code> …\n"],["tr!","String","String.html#method-i-tr-21","(p1, p2)","<p>Translates <em>str</em> in place, using the same rules as String#tr.\nReturns <em>str</em>, or <code>nil</code> if no changes were made. …\n"],["tr_s","String","String.html#method-i-tr_s","(p1, p2)","<p>Processes a copy of <em>str</em> as described under String#tr, then removes\nduplicate characters in regions that …\n"],["tr_s!","String","String.html#method-i-tr_s-21","(p1, p2)","<p>Performs String#tr_s processing on <em>str</em> in place, returning\n<em>str</em>, or <code>nil</code> if no changes were made.\n"],["trace","TracePoint","TracePoint.html#method-c-trace","(*events)","<p>Document-method: trace\n\n<pre>A convenience method for TracePoint.new, that activates the trace\nautomatically. ...</pre>\n"],["trace_points","RubyVM::InstructionSequence","RubyVM/InstructionSequence.html#method-i-trace_points","()","<p>Return trace points in the instruction sequence. Return an array of [line,\nevent_symbol] pair.\n"],["trace_var","Kernel","Kernel.html#method-i-trace_var","(*args)","<p>Controls tracing of assignments to global variables. The parameter\n<code>symbol</code> identifies the variable (as …\n"],["transfer","Fiber","Fiber.html#method-i-transfer","(*args)","<p>Transfer control to another fiber, resuming it from where it last stopped\nor starting it if it was not …\n"],["transform_keys","Hash","Hash.html#method-i-transform_keys","()","<p>Returns a new hash with the results of running the block once for every\nkey. This method does not change …\n"],["transform_keys!","Hash","Hash.html#method-i-transform_keys-21","()","<p>Invokes the given block once for each key in <em>hsh</em>, replacing it\nwith the new key returned by the block, …\n"],["transform_values","Hash","Hash.html#method-i-transform_values","()","<p>Returns a new hash with the results of running the block once for every\nvalue. This method does not change …\n"],["transform_values!","Hash","Hash.html#method-i-transform_values-21","()","<p>Invokes the given block once for each value in <em>hsh</em>, replacing it\nwith the new value returned by the block, …\n"],["transpose","Array","Array.html#method-i-transpose","()","<p>Assumes that <code>self</code> is an array of arrays and transposes the\nrows and columns.\n\n<pre>a = [[1,2], [3,4], [5,6]] ...</pre>\n"],["trap","Kernel","Kernel.html#method-i-trap","(*args)","<p>Specifies the handling of signals. The first parameter is a signal name (a\nstring such as “SIGALRM&#39;&#39;, …\n"],["trap","Signal","Signal.html#method-c-trap","(*args)","<p>Specifies the handling of signals. The first parameter is a signal name (a\nstring such as “SIGALRM&#39;&#39;, …\n"],["truncate","File","File.html#method-c-truncate","(p1, p2)","<p>Truncates the file <em>file_name</em> to be at most <em>integer</em> bytes\nlong. Not available on all platforms.\n\n<pre>f = File.new(&quot;out&quot;, ...</pre>\n"],["truncate","File","File.html#method-i-truncate","(p1)","<p>Truncates <em>file</em> to at most <em>integer</em> bytes. The file must be\nopened for writing. Not available on all platforms. …\n"],["truncate","Float","Float.html#method-i-truncate","(*args)","<p>Returns <code>float</code> truncated (toward zero) to a precision of\n<code>ndigits</code> decimal digits (default: 0).\n<p>When the …\n"],["truncate","Integer","Integer.html#method-i-truncate","(*args)","<p>Returns <code>int</code> truncated (toward zero) to a precision of\n<code>ndigits</code> decimal digits (default: 0).\n<p>When the precision …\n"],["truncate","Numeric","Numeric.html#method-i-truncate","(*args)","<p>Returns <code>num</code> truncated (toward zero) to a precision of\n<code>ndigits</code> decimal digits (default: 0).\n<p>Numeric implements …\n"],["truncate","Rational","Rational.html#method-i-truncate","(*args)","<p>Returns <code>rat</code> truncated (toward zero) to a precision of\n<code>ndigits</code> decimal digits (default: 0).\n<p>When the precision …\n"],["trust","Object","Object.html#method-i-trust","()","<p>Returns object. This method is deprecated and will be removed in Ruby 3.2.\n"],["try_convert","Array","Array.html#method-c-try_convert","(p1)","<p>Tries to convert <code>obj</code> into an array, using the\n<code>to_ary</code> method.  Returns the converted array or\n<code>nil</code> if  …\n"],["try_convert","Hash","Hash.html#method-c-try_convert","(p1)","<p>Try to convert <em>obj</em> into a hash, using to_hash method. Returns\nconverted hash or nil if <em>obj</em> cannot be …\n"],["try_convert","IO","IO.html#method-c-try_convert","(p1)","<p>Try to convert <em>obj</em> into an IO, using to_io method. Returns\nconverted IO or <code>nil</code> if <em>obj</em> cannot be converted …\n"],["try_convert","Regexp","Regexp.html#method-c-try_convert","(p1)","<p>Try to convert <em>obj</em> into a Regexp, using to_regexp method. Returns\nconverted regexp or nil if <em>obj</em> cannot …\n"],["try_convert","String","String.html#method-c-try_convert","(p1)","<p>Try to convert <em>obj</em> into a String, using to_str method. Returns\nconverted string or nil if <em>obj</em> cannot …\n"],["try_lock","Mutex","Mutex.html#method-i-try_lock","()","<p>Attempts to obtain the lock and returns immediately. Returns\n<code>true</code> if the lock was granted.\n"],["tty?","IO","IO.html#method-i-tty-3F","()","<p>Returns <code>true</code> if <em>ios</em> is associated with a terminal\ndevice (tty), <code>false</code> otherwise.\n\n<pre>File.new(&quot;testfile&quot;).isatty ...</pre>\n"],["tuesday?","Time","Time.html#method-i-tuesday-3F","()","<p>Returns <code>true</code> if <em>time</em> represents Tuesday.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">local</span>(<span class=\"ruby-value\">1991</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">19</span>)      <span class=\"ruby-comment\">#=&gt; 1991-02-19 00:00:00 -0600 ...</span>\n</pre>\n"],["tv_nsec","Time","Time.html#method-i-tv_nsec","()","<p>Returns the number of nanoseconds for <em>time</em>.\n\n<pre>t = Time.now        #=&gt; 2007-11-17 15:18:03 +0900\n&quot;%10.9f&quot; ...</pre>\n"],["tv_sec","Time","Time.html#method-i-tv_sec","()","<p>Returns the value of <em>time</em> as an integer number of seconds since\nthe Epoch.\n\n<pre>t = Time.now\n&quot;%10.5f&quot; % t.to_f ...</pre>\n"],["tv_usec","Time","Time.html#method-i-tv_usec","()","<p>Returns the number of microseconds for <em>time</em>.\n\n<pre>t = Time.now        #=&gt; 2007-11-19 08:03:26 -0600\n&quot;%10.6f&quot; ...</pre>\n"],["type","RubyVM::AbstractSyntaxTree::Node","RubyVM/AbstractSyntaxTree/Node.html#method-i-type","()","<p>Returns the type of this node as a symbol.\n\n<pre>root = RubyVM::AbstractSyntaxTree.parse(&quot;x = 1 + 2&quot;)\nroot.type ...</pre>\n"],["uid","File::Stat","File/Stat.html#method-i-uid","()","<p>Returns the numeric user id of the owner of <em>stat</em>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">uid</span>   <span class=\"ruby-comment\">#=&gt; 501</span>\n</pre>\n"],["uid","Process","Process.html#method-c-uid","()","<p>Returns the (real) user ID of this process.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Process</span>.<span class=\"ruby-identifier\">uid</span>   <span class=\"ruby-comment\">#=&gt; 501</span>\n</pre>\n"],["uid=","Process","Process.html#method-c-uid-3D","(p1)","<p>Sets the (user) user ID for this process. Not available on all platforms.\n"],["umask","File","File.html#method-c-umask","(*args)","<p>Returns the current umask value for this process. If the optional argument\nis given, set the umask to …\n"],["unbind","Method","Method.html#method-i-unbind","()","<p>Dissociates <em>meth</em> from its current receiver. The resulting\nUnboundMethod can subsequently be bound to …\n"],["undef_method","Module","Module.html#method-i-undef_method","(*args)","<p>Prevents the current class from responding to calls to the named method.\nContrast this with <code>remove_method</code> …\n"],["undefine_finalizer","ObjectSpace","ObjectSpace.html#method-c-undefine_finalizer","(p1)","<p>Removes all finalizers for <em>obj</em>.\n"],["undump","String","String.html#method-i-undump","()","<p>Returns an unescaped version of the string. This does the inverse of\nString#dump.\n\n<pre>&quot;\\&quot;hello \\\\n &#39;&#39;\\&quot;&quot;.undump ...</pre>\n"],["ungetbyte","IO","IO.html#method-i-ungetbyte","(p1)","<p>Pushes back bytes (passed as a parameter) onto <em>ios</em>, such that a\nsubsequent buffered read will return …\n"],["ungetc","IO","IO.html#method-i-ungetc","(p1)","<p>Pushes back one character (passed as a parameter) onto <em>ios</em>, such\nthat a subsequent buffered character …\n"],["unicode_normalize","String","String.html#method-i-unicode_normalize","(*args)","<p>Unicode Normalization—Returns a normalized form of <code>str</code>, using\nUnicode normalizations NFC, NFD, NFKC …\n"],["unicode_normalize!","String","String.html#method-i-unicode_normalize-21","(*args)","<p>Destructive version of String#unicode_normalize, doing Unicode\nnormalization in place.\n"],["unicode_normalized?","String","String.html#method-i-unicode_normalized-3F","(*args)","<p>Checks whether <code>str</code> is in Unicode normalization form\n<code>form</code>, which can be any of the four values <code>:nfc</code>, \n…\n"],["union","Array","Array.html#method-i-union","(*args)","<p>Set Union — Returns a new array by joining <code>other_ary</code>s with\n<code>self</code>, excluding any duplicates and preserving …\n"],["union","Regexp","Regexp.html#method-c-union","(*args)","<p>Return a Regexp object that is the union of the given <em>pattern</em>s,\ni.e., will match any of its parts. The …\n"],["uniq","Array","Array.html#method-i-uniq","()","<p>Returns a new array by removing duplicate values in <code>self</code>.\n<p>If a block is given, it will use the return …\n"],["uniq","Enumerable","Enumerable.html#method-i-uniq","()","<p>Returns a new array by removing duplicate values in <code>self</code>.\n<p>See also Array#uniq.\n"],["uniq","Enumerator::Lazy","Enumerator/Lazy.html#method-i-uniq","()","<p>Like Enumerable#uniq, but chains operation to be lazy-evaluated.\n"],["uniq!","Array","Array.html#method-i-uniq-21","()","<p>Removes duplicate elements from <code>self</code>.\n<p>If a block is given, it will use the return value of the block for …\n"],["unlink","Dir","Dir.html#method-c-unlink","(p1)","<p>Deletes the named directory. Raises a subclass of SystemCallError if the\ndirectory isn&#39;t empty.\n"],["unlink","File","File.html#method-c-unlink","(*args)","<p>Deletes the named files, returning the number of names passed as arguments.\nRaises an exception on any …\n"],["unlock","Mutex","Mutex.html#method-i-unlock","()","<p>Releases the lock. Raises <code>ThreadError</code> if <code>mutex</code>\nwasn&#39;t locked by the current thread.\n"],["unpack","String","String.html#method-i-unpack","(fmt)","<p>Decodes <em>str</em> (which may contain binary data) according to the\nformat string, returning an array of each …\n"],["unpack1","String","String.html#method-i-unpack1","(fmt)","<p>Decodes <em>str</em> (which may contain binary data) according to the\nformat string, returning the first value …\n"],["unshift","Array","Array.html#method-i-unshift","(*args)","<p>Prepends objects to the front of <code>self</code>, moving other elements\nupwards. See also Array#shift for the opposite …\n"],["untaint","Object","Object.html#method-i-untaint","()","<p>Returns object. This method is deprecated and will be removed in Ruby 3.2.\n"],["untrace_var","Kernel","Kernel.html#method-i-untrace_var","(*args)","<p>Removes tracing for the specified command on the given global variable and\nreturns <code>nil</code>. If no command …\n"],["untrust","Object","Object.html#method-i-untrust","()","<p>Returns object. This method is deprecated and will be removed in Ruby 3.2.\n"],["untrusted?","Object","Object.html#method-i-untrusted-3F","()","<p>Returns false.  This method is deprecated and will be removed in Ruby 3.2.\n"],["upcase","String","String.html#method-i-upcase","(*args)","<p>Returns a copy of <em>str</em> with all lowercase letters replaced with\ntheir uppercase counterparts.\n<p>See String#downcase …\n"],["upcase","Symbol","Symbol.html#method-i-upcase","(*args)","<p>Same as <code>sym.to_s.upcase.intern</code>.\n"],["upcase!","String","String.html#method-i-upcase-21","(*args)","<p>Upcases the contents of <em>str</em>, returning <code>nil</code> if no\nchanges were made.\n<p>See String#downcase for meaning of …\n"],["update","ENV","ENV.html#method-c-update","(p1)","<p>Adds the contents of <code>hash</code> to the environment variables.  If no\nblock is specified entries with duplicate …\n"],["update","Hash","Hash.html#method-i-update","(*args)","<p>Adds the contents of the given hashes to the receiver.\n<p>If no block is given, entries with duplicate keys …\n"],["upto","Integer","Integer.html#method-i-upto","(p1)","<p>Iterates the given block, passing in integer values from <code>int</code>\nup to and including <code>limit</code>.\n<p>If no block is …\n"],["upto","String","String.html#method-i-upto","(p1, p2 = v2)","<p>Iterates through successive values, starting at <em>str</em> and ending at\n<em>other_str</em> inclusive, passing each value …\n"],["urandom","Random","Random.html#method-c-urandom","(p1)","<p>Returns a string, using platform providing features. Returned value is\nexpected to be a cryptographically …\n"],["usec","Time","Time.html#method-i-usec","()","<p>Returns the number of microseconds for <em>time</em>.\n\n<pre>t = Time.now        #=&gt; 2007-11-19 08:03:26 -0600\n&quot;%10.6f&quot; ...</pre>\n"],["used_modules","Module","Module.html#method-c-used_modules","()","<p>Returns an array of all modules used in the current scope. The ordering of\nmodules in the resulting array …\n"],["using","Module","Module.html#method-i-using","(p1)","<p>Import class refinements from <em>module</em> into the current class or\nmodule definition.\n"],["utc","Time","Time.html#method-c-utc","(*args)","<p>Creates a Time object based on given values, interpreted as UTC (GMT). The\nyear must be specified. Other …\n"],["utc","Time","Time.html#method-i-utc","()","<p>Converts <em>time</em> to UTC (GMT), modifying the receiver.\n\n<pre>t = Time.now   #=&gt; 2007-11-19 08:18:31 -0600\nt.gmt? ...</pre>\n"],["utc?","Time","Time.html#method-i-utc-3F","()","<p>Returns <code>true</code> if <em>time</em> represents a time in UTC (GMT).\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">now</span>                        <span class=\"ruby-comment\">#=&gt; 2007-11-19 ...</span>\n</pre>\n"],["utc_offset","Time","Time.html#method-i-utc_offset","()","<p>Returns the offset in seconds between the timezone of <em>time</em> and\nUTC.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">gm</span>(<span class=\"ruby-value\">2000</span>,<span class=\"ruby-value\">1</span>,<span class=\"ruby-value\">1</span>,<span class=\"ruby-value\">20</span>,<span class=\"ruby-value\">15</span>,<span class=\"ruby-value\">1</span>)   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["utime","File","File.html#method-c-utime","(*args)","<p>Sets the access and modification times of each named file to the first two\narguments. If a file is a …\n"],["valid_encoding?","String","String.html#method-i-valid_encoding-3F","()","<p>Returns true for a string which is encoded correctly.\n\n<pre>&quot;\\xc2\\xa1&quot;.force_encoding(&quot;UTF-8&quot;).valid_encoding? ...</pre>\n"],["value","Thread","Thread.html#method-i-value","()","<p>Waits for <code>thr</code> to complete, using #join, and returns its value\nor raises the exception which terminated …\n"],["value","UncaughtThrowError","UncaughtThrowError.html#method-i-value","()","<p>Return the return value which was called for.\n"],["value?","ENV","ENV.html#method-c-value-3F","(p1)","<p>Returns <code>true</code> if there is an environment variable with the\ngiven <code>value</code>.\n"],["value?","Hash","Hash.html#method-i-value-3F","(p1)","<p>Returns <code>true</code> if the given value is present for some key in\n<em>hsh</em>.\n\n<pre>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; =&gt; 200 }\nh.value?(100) ...</pre>\n"],["values","ENV","ENV.html#method-c-values","()","<p>Returns all environment variable values in an Array:\n\n<pre>ENV.replace(&#39;foo&#39; =&gt; &#39;0&#39;, &#39;bar&#39; =&gt; &#39;1&#39;)\nENV.values ...</pre>\n"],["values","Hash","Hash.html#method-i-values","()","<p>Returns a new array populated with the values from <em>hsh</em>. See also\nHash#keys.\n\n<pre>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; =&gt; 200, ...</pre>\n"],["values","ObjectSpace::WeakMap","ObjectSpace/WeakMap.html#method-i-values","()","<p>Iterates over values and objects in a weakly referenced object\n"],["values","Struct","Struct.html#method-i-values","()","<p>Returns the values for this struct as an Array.\n\n<pre>Customer = Struct.new(:name, :address, :zip)\njoe = Customer.new(&quot;Joe ...</pre>\n"],["values_at","Array","Array.html#method-i-values_at","(*args)","<p>Returns an array containing the elements in <code>self</code> corresponding\nto the given <code>selector</code>(s).\n<p>The selectors …\n"],["values_at","ENV","ENV.html#method-c-values_at","(*args)","<p>Returns an array containing the environment variable values associated with\nthe given names.  See also …\n"],["values_at","Hash","Hash.html#method-i-values_at","(*args)","<p>Return an array containing the values associated with the given keys. Also\nsee Hash.select.\n\n<pre>h = { &quot;cat&quot; ...</pre>\n"],["values_at","MatchData","MatchData.html#method-i-values_at","(*args)","<p>Uses each <em>index</em> to access the matching values, returning an array\nof the corresponding matches.\n\n<pre>m = /(.)(.)(\\d+)(\\d)/.match(&quot;THX1138: ...</pre>\n"],["values_at","Struct","Struct.html#method-i-values_at","(*args)","<p>Returns the struct member values for each <code>selector</code> as an\nArray.  A <code>selector</code> may be either an Integer …\n"],["verify_compaction_references","GC","GC.html#method-c-verify_compaction_references","(p1 = {})","<p>Verify compaction reference consistency.\n<p>This method is implementation specific.  During compaction, objects …\n"],["verify_internal_consistency","GC","GC.html#method-c-verify_internal_consistency","()","<p>Verify internal consistency.\n<p>This method is implementation specific. Now this method checks generational\n…\n"],["verify_transient_heap_internal_consistency","GC","GC.html#method-c-verify_transient_heap_internal_consistency","()",""],["wait","ConditionVariable","ConditionVariable.html#method-i-wait","(p1, p2 = v2)","<p>Releases the lock held in <code>mutex</code> and waits; reacquires the lock\non wakeup.\n<p>If <code>timeout</code> is given, this method …\n"],["wait","Process","Process.html#method-c-wait","(*args)","<p>Waits for a child process to exit, returns its process id, and sets\n<code>$?</code> to a Process::Status object containing …\n"],["wait2","Process","Process.html#method-c-wait2","(*args)","<p>Waits for a child process to exit (see Process::waitpid for exact\nsemantics) and returns an array containing …\n"],["waitall","Process","Process.html#method-c-waitall","()","<p>Waits for all children, returning an array of <em>pid</em>/<em>status</em>\npairs (where <em>status</em> is a Process::Status object). …\n"],["waitpid","Process","Process.html#method-c-waitpid","(*args)","<p>Waits for a child process to exit, returns its process id, and sets\n<code>$?</code> to a Process::Status object containing …\n"],["waitpid2","Process","Process.html#method-c-waitpid2","(*args)","<p>Waits for a child process to exit (see Process::waitpid for exact\nsemantics) and returns an array containing …\n"],["wakeup","Thread","Thread.html#method-i-wakeup","()","<p>Marks a given thread as eligible for scheduling, however it may still\nremain blocked on I/O.\n<p><strong>Note:</strong> This …\n"],["warn","Kernel","Kernel.html#method-i-warn","(*msgs, uplevel: nil)","<p>If warnings have been disabled (for example with the <code>-W0</code>\nflag), does nothing.  Otherwise, converts each …\n"],["warn","Warning","Warning.html#method-i-warn","(p1)","<p>Writes warning message <code>msg</code> to $stderr. This method is called\nby Ruby for all emitted warnings.\n"],["wday","Time","Time.html#method-i-wday","()","<p>Returns an integer representing the day of the week, 0..6, with Sunday ==\n0.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">now</span>   <span class=\"ruby-comment\">#=&gt; 2007-11-20 ...</span>\n</pre>\n"],["wednesday?","Time","Time.html#method-i-wednesday-3F","()","<p>Returns <code>true</code> if <em>time</em> represents Wednesday.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">local</span>(<span class=\"ruby-value\">1993</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">24</span>)      <span class=\"ruby-comment\">#=&gt; 1993-02-24 00:00:00 -0600 ...</span>\n</pre>\n"],["with_index","Enumerator","Enumerator.html#method-i-with_index","(*args)","<p>Iterates the given block for each element with an index, which starts from\n<code>offset</code>.  If no block is given, …\n"],["with_index","Enumerator::Lazy","Enumerator/Lazy.html#method-i-with_index","(p1 = v1)","<p>If a block is given, iterates the given block for each element with an\nindex, which starts from <code>offset</code> …\n"],["with_object","Enumerator","Enumerator.html#method-i-with_object","(p1)","<p>Iterates the given block for each element with an arbitrary object,\n<code>obj</code>, and returns <code>obj</code>\n<p>If no block is …\n"],["world_readable?","File","File.html#method-c-world_readable-3F","(p1)","<p>If <em>file_name</em> is readable by others, returns an integer\nrepresenting the file permission bits of <em>file_name</em> …\n"],["world_readable?","File::Stat","File/Stat.html#method-i-world_readable-3F","()","<p>If <em>stat</em> is readable by others, returns an integer representing the\nfile permission bits of <em>stat</em>. Returns …\n"],["world_readable?","FileTest","FileTest.html#method-i-world_readable-3F","(p1)","<p>If <em>file_name</em> is readable by others, returns an integer\nrepresenting the file permission bits of <em>file_name</em> …\n"],["world_writable?","File","File.html#method-c-world_writable-3F","(p1)","<p>If <em>file_name</em> is writable by others, returns an integer\nrepresenting the file permission bits of <em>file_name</em> …\n"],["world_writable?","File::Stat","File/Stat.html#method-i-world_writable-3F","()","<p>If <em>stat</em> is writable by others, returns an integer representing the\nfile permission bits of <em>stat</em>. Returns …\n"],["world_writable?","FileTest","FileTest.html#method-i-world_writable-3F","(p1)","<p>If <em>file_name</em> is writable by others, returns an integer\nrepresenting the file permission bits of <em>file_name</em> …\n"],["writable?","File","File.html#method-c-writable-3F","(p1)","<p>Returns <code>true</code> if the named file is writable by the effective\nuser and group id of this process. See eaccess(3). …\n"],["writable?","File::Stat","File/Stat.html#method-i-writable-3F","()","<p>Returns <code>true</code> if <em>stat</em> is writable by the effective\nuser id of this process.\n\n<pre>File.stat(&quot;testfile&quot;).writable? ...</pre>\n"],["writable?","FileTest","FileTest.html#method-i-writable-3F","(p1)","<p>Returns <code>true</code> if the named file is writable by the effective\nuser and group id of this process. See eaccess(3). …\n"],["writable_real?","File","File.html#method-c-writable_real-3F","(p1)","<p>Returns <code>true</code> if the named file is writable by the real user\nand group id of this process. See access(3). …\n"],["writable_real?","File::Stat","File/Stat.html#method-i-writable_real-3F","()","<p>Returns <code>true</code> if <em>stat</em> is writable by the real user id\nof this process.\n\n<pre>File.stat(&quot;testfile&quot;).writable_real? ...</pre>\n"],["writable_real?","FileTest","FileTest.html#method-i-writable_real-3F","(p1)","<p>Returns <code>true</code> if the named file is writable by the real user\nand group id of this process. See access(3). …\n"],["write","ARGF","ARGF.html#method-i-write","(p1)","<p>Writes <em>string</em> if inplace mode.\n"],["write","IO","IO.html#method-c-write","(*args)","<p>Opens the file, optionally seeks to the given <em>offset</em>, writes\n<em>string</em>, then returns the length written. …\n"],["write","IO","IO.html#method-i-write","(*args)","<p>Writes the given strings to <em>ios</em>. The stream must be opened for\nwriting. Arguments that are not a string …\n"],["write_nonblock","IO","IO.html#method-i-write_nonblock","(buf, exception: true)","<p>Writes the given string to <em>ios</em> using the write(2) system call\nafter O_NONBLOCK is set for the underlying …\n"],["yday","Time","Time.html#method-i-yday","()","<p>Returns an integer representing the day of the year, 1..366.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">now</span>   <span class=\"ruby-comment\">#=&gt; 2007-11-19 08:32:31 -0600 ...</span>\n</pre>\n"],["year","Time","Time.html#method-i-year","()","<p>Returns the year for <em>time</em> (including the century).\n\n<pre>t = Time.now   #=&gt; 2007-11-19 08:27:51 -0600\nt.year ...</pre>\n"],["yield","Fiber","Fiber.html#method-c-yield","(*args)","<p>Yields control back to the context that resumed the fiber, passing along\nany arguments that were passed …\n"],["yield","Proc","Proc.html#method-i-yield","(*args)","<p>Invokes the block, setting the block&#39;s parameters to the values in\n<em>params</em> using something close to …\n"],["yield_self","Object","Object.html#method-i-yield_self","()","<p>Yields self to the block and returns the result of the block.\n\n<pre>3.next.then {|x| x**x }.to_s            ...</pre>\n"],["yydebug","Ripper","Ripper.html#method-i-yydebug","()","<p>Get yydebug.\n"],["yydebug=","Ripper","Ripper.html#method-i-yydebug-3D","(p1)","<p>Set yydebug.\n"],["zero?","File","File.html#method-c-zero-3F","(p1)","<p>Returns <code>true</code> if the named file exists and has a zero size.\n<p><em>file_name</em> can be an IO object.\n"],["zero?","File::Stat","File/Stat.html#method-i-zero-3F","()","<p>Returns <code>true</code> if <em>stat</em> is a zero-length file;\n<code>false</code> otherwise.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">stat</span>(<span class=\"ruby-string\">&quot;testfile&quot;</span>).<span class=\"ruby-identifier\">zero?</span>   <span class=\"ruby-comment\">#=&gt; false</span>\n</pre>\n"],["zero?","FileTest","FileTest.html#method-i-zero-3F","(p1)","<p>Returns <code>true</code> if the named file exists and has a zero size.\n<p><em>file_name</em> can be an IO object.\n"],["zero?","Float","Float.html#method-i-zero-3F","()","<p>Returns <code>true</code> if <code>float</code> is 0.0.\n"],["zero?","Numeric","Numeric.html#method-i-zero-3F","()","<p>Returns <code>true</code> if <code>num</code> has a zero value.\n"],["zip","Array","Array.html#method-i-zip","(*args)","<p>Converts any arguments to arrays, then merges elements of <code>self</code>\nwith corresponding elements from each …\n"],["zip","Enumerable","Enumerable.html#method-i-zip","(*args)","<p>Takes one element from <em>enum</em> and merges corresponding elements from\neach <em>args</em>.  This generates a sequence …\n"],["zip","Enumerator::Lazy","Enumerator/Lazy.html#method-i-zip","(*args)","<p>Like Enumerable#zip, but chains operation to be lazy-evaluated. However, if\na block is given to zip, …\n"],["zone","Time","Time.html#method-i-zone","()","<p>Returns the name of the time zone used for <em>time</em>. As of Ruby 1.8,\nreturns “UTC&#39;&#39; rather than …\n"],["|","Array","Array.html#method-i-7C","(p1)","<p>Set Union — Returns a new array by joining <code>ary</code> with\n<code>other_ary</code>, excluding any duplicates and preserving …\n"],["|","FalseClass","FalseClass.html#method-i-7C","(p1)","<p>Or—Returns <code>false</code> if <em>obj</em> is <code>nil</code> or\n<code>false</code>; <code>true</code> otherwise.\n"],["|","Integer","Integer.html#method-i-7C","(p1)","<p>Bitwise OR.\n"],["|","NilClass","NilClass.html#method-i-7C","(p1)","<p>Or—Returns <code>false</code> if <em>obj</em> is <code>nil</code> or\n<code>false</code>; <code>true</code> otherwise.\n"],["|","TrueClass","TrueClass.html#method-i-7C","(p1)","<p>Or—Returns <code>true</code>. As <em>obj</em> is an argument to a method\ncall, it is always evaluated; there is no short-circuit …\n"],["~","Integer","Integer.html#method-i-7E","()","<p>One&#39;s complement: returns a number where each bit is flipped.\n<p>Inverts the bits in an Integer. As integers …\n"],["~","Regexp","Regexp.html#method-i-7E","()","<p>Match—Matches <em>rxp</em> against the contents of <code>$_</code>.\nEquivalent to <code><em>rxp</em> =~ $_</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">$_</span> = <span class=\"ruby-string\">&quot;input data&quot;</span>\n<span class=\"ruby-operator\">~</span> <span class=\"ruby-regexp\">/at/</span>   <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["grammar.en","","_lib/racc/rdoc/grammar_en_rdoc.html","","<p>Racc Grammar File Reference\n<p>Global Structure\n<p>Class Block and User Code Block\n"],["test.ja","","_test/rdoc/test_ja_rdoc.html","","<p>こんにちは！\n<p>初めまして。アーロンと申します。\n<p>どんな食べ物が好きですか？私はフランスの料理が大好きです。 日本の料理も大好きです。\n"],["CONTRIBUTING","","CONTRIBUTING_md.html","","<p>Please see the official issue tracker and wiki HowToContribute.\n"],["COPYING.ja","","COPYING_ja.html","","<p>本プログラムはフリーソフトウェアです．2-clause BSDL または以下に示す条件で本プログラムを再配布できます 2-clause\nBSDLについてはBSDLファイルを参照して下さい．\n<p>複製は制限なく自由です． …\n"],["README.EXT","","README_EXT.html","","<p>Moved to doc/extension.rdoc\n"],["README.EXT.ja","","README_EXT_ja.html","","<p>doc/extension.ja.rdocに移動しました\n"],["README.ja","","README_ja_md.html","","<p><img src=\"https://travis-ci.org/ruby/ruby.svg?branch=master\">\n<img\nsrc=\"https://ci.appveyor.com/api/projects/status/0sy8rrxut4o0k960/branch/master?svg=true\">\n...\n"],["README","","README_md.html","","<p><img src=\"https://travis-ci.org/ruby/ruby.svg?branch=master\">\n<img\nsrc=\"https://ci.appveyor.com/api/projects/status/0sy8rrxut4o0k960/branch/master?svg=true\">\n...\n"],["configure.ac","","configure_ac.html","","<p>dnl Process this file with autoconf to produce a configure script.\nAC_INIT() { AC_CONFIG_AUX_DIR(tool) …\n"],["bug_triaging","","doc/bug_triaging_rdoc.html","","<p>Bug Triaging Guide\n<p>This guide discusses recommendations for triaging bugs in Ruby&#39;s bug\ntracker.\n<p>Bugs …\n"],["contributing","","doc/contributing_rdoc.html","","<p>Contributing to Ruby\n<p>Ruby has a vast and friendly community with hundreds of people contributing\nto a …\n"],["contributors","","doc/contributors_rdoc.html","","<p>Contributors to Ruby\n<p>The following list might be incomplete. Feel free to add your name if your\npatch …\n"],["dtrace_probes","","doc/dtrace_probes_rdoc.html","","<p>DTrace Probes\n<p>A list of DTrace probes and their functionality. “Module” and “Function” …\n"],["extension.ja","","doc/extension_ja_rdoc.html","","<p>Rubyの拡張ライブラリの作り方\n<p>Rubyの拡張ライブラリの作り方を説明します．\n<p>基礎知識\n"],["extension","","doc/extension_rdoc.html","","<p>Creating Extension Libraries for Ruby\n<p>This document explains how to make extension libraries for Ruby …\n"],["globals","","doc/globals_rdoc.html","","<p>Pre-defined global variables\n<p>$! &mdash; The Exception object set by Kernel#raise.\n<p>$@ &mdash; The same as <code>$!.backtrace</code>. …\n"],["keywords","","doc/keywords_rdoc.html","","<p>Keywords\n<p>The following keywords are used by Ruby.\n<p>__ENCODING__ &mdash; The script encoding of the current file. …\n"],["maintainers","","doc/maintainers_rdoc.html","","<p>Maintainers\n<p>This page describes the current module, library, and extension maintainers\nof Ruby.\n<p>Module …\n"],["marshal","","doc/marshal_rdoc.html","","<p>Marshal Format\n<p>The Marshal format is used to serialize ruby objects.  The format can store\narbitrary objects …\n"],["regexp","","doc/regexp_rdoc.html","","<p>Regular expressions (<em>regexp</em>s) are patterns which describe the\ncontents of a string. They&#39;re used …\n"],["security","","doc/security_rdoc.html","","<p>Ruby Security\n<p>The Ruby programming language is large and complex and there are many\nsecurity pitfalls …\n"],["signals","","doc/signals_rdoc.html","","<p>Caveats for implementing Signal.trap callbacks\n<p>As with implementing signal handlers in C or most other …\n"],["standard_library","","doc/standard_library_rdoc.html","","<p>Ruby Standard Library\n<p>The Ruby Standard Library is a vast collection of classes and modules that\nyou can …\n"],["syntax","","doc/syntax_rdoc.html","","<p>Ruby Syntax\n<p>The Ruby syntax is large and is split up into the following sections:\n<p>Literals  &mdash; Numbers, Strings …\n"],["assignment","","doc/syntax/assignment_rdoc.html","","<p>Assignment\n<p>In Ruby, assignment uses the <code>=</code> (equals sign) character.  This\nexample assigns the number five …\n"],["calling_methods","","doc/syntax/calling_methods_rdoc.html","","<p>Calling Methods\n<p>Calling a method sends a message to an object so it can perform some work.\n<p>In ruby you …\n"],["comments","","doc/syntax/comments_rdoc.html","","<p>Code Comments\n<p>Ruby has two types of comments: inline and block.\n<p>Inline comments start with the <code>#</code> character …\n"],["control_expressions","","doc/syntax/control_expressions_rdoc.html","","<p>Control Expressions\n<p>Ruby has a variety of ways to control execution.  All the expressions\ndescribed here …\n"],["exceptions","","doc/syntax/exceptions_rdoc.html","","<p>Exception Handling\n<p>Exceptions are rescued in a <code>begin</code>/<code>end</code> block:\n\n<pre>begin\n  # code that might raise\nrescue ...</pre>\n"],["literals","","doc/syntax/literals_rdoc.html","","<p>Literals\n<p>Literals create objects you can use in your program.  Literals include:\n<p>Booleans and nil\n"],["methods","","doc/syntax/methods_rdoc.html","","<p>Methods\n<p>Methods implement the functionality of your program.  Here is a simple\nmethod definition:\n\n<pre>def one_plus_one ...</pre>\n"],["miscellaneous","","doc/syntax/miscellaneous_rdoc.html","","<p>Miscellaneous Syntax\n<p>Ending an Expression\n<p>Ruby uses a newline as the end of an expression.  When ending …\n"],["modules_and_classes","","doc/syntax/modules_and_classes_rdoc.html","","<p>Modules\n<p>Modules serve two purposes in Ruby, namespacing and mix-in functionality.\n<p>A namespace can be used …\n"],["precedence","","doc/syntax/precedence_rdoc.html","","<p>Precedence\n<p>From highest to lowest, this is the precedence table for ruby.  High\nprecedence operations …\n"],["refinements","","doc/syntax/refinements_rdoc.html","","<p>Refinements\n<p>Due to Ruby&#39;s open classes you can redefine or add functionality to\nexisting classes. …\n"],["lex.c.blt","","lex_c_blt.html","","\n<pre>ANSI-C code produced by gperf version 3.1   \nCommand-line: gperf -C -P -p -j1 -i 1 -g -o -t -N rb_reserved_word ...</pre>\n"],["README.ja","","sample/drb/README_ja_rdoc.html","","<p>サンプルスクリプト\n<p>Arrayをリモートから利用してイテレータを試す。\n<p>darray.rb — server\n"],["README","","sample/drb/README_rdoc.html","","<p>Sample scripts\n<p>array and iteretor\n<p>darray.rb — server\n"]]}}