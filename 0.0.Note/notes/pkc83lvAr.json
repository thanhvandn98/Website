{"_id":"note:pkc83lvAr","title":"HTTP & REST","content":"#HTTP Format\n- When we issue an HTTP request, we specify the URL that we are making a request to and we can pass additional meta-information to the request by using headers. You can learn more about headers here. Request headers can include information about:\n\t- Sending cookies to the server\n\t- Caching information\n\t- Data types that are ok to be sent (json/html/xml)\n\t- Browser information (Name/Version)\n- Receive:\n\t- Caching information\n\t- The server issuing the response\n\t- Attaching a cookie in the browser\n\t- The data type being sent (json/html/xml)\n- The curl command accepts quite a few flags including:\n\t- -v - for additional information\n\t- -H - for adding request headers\n\t- -I - including response headers\n\t- -X - for picking an HTTP verb\n\t- -d - for passing data in the request\n\n#HTTP Verbs\n- GET - An idempotent operation that is designed for - getting data from the server.\n- POST - A non idempotent operation that can create data on the server or otherwise modify data.\n- PUT - Technically idempotent, but commonly used for updating data that already exists on the server.\n- PATCH - Non idempotent and also used for modifying data on the server. (Read this for details on why PATCH is not classified as idempotent.)\n- DELETE - Deletes data from the server. Not idempotent.\n\n#HTTP Status Code\n- 200's Success! Your request was successfully processed by the server.\n- 300's Redirect! The server will return another url for which the client should make a GET request to.\n- 400's Client Error! The client made a request that the server decided was invalid for some reason. This could be a get request to a resource that doesn't exit or a post request that was missing required information.\n- 500's Server Error! The client made a request to the server and the server could not fulfill the request because of some problem on the server side. This happens frequently if a website is down and cannot respond to requests or if there is an error in your server code.\n\n#API & REST API\n- API (Application Programming Interface) allow to communicate between 2 or more software\n- REST (REpresentational State Transfer) \n- Api là cách giao tiếp giữa frontend và backend, dùng để lập trình đa ứng dụng, đa nền tảng. Có thể dùng 1 backend để xử lí các tác vụ trên web, app desktop, app mobiles\n- https://www.youtube.com/watch?v=Q-BpqyOT3a8\n- http://rest.elkstein.org/\n","tags":[],"folderPathname":"/","data":{},"createdAt":"2020-10-22T10:18:51.180Z","updatedAt":"2020-10-22T10:41:56.437Z","trashed":false,"_rev":"_-3i3koLI"}